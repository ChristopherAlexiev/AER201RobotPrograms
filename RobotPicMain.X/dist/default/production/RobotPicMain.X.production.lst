

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 01 18:08:16 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1,inline
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 2.05
    94                           ; Generated 20/12/2018 GMT
    95                           ; 
    96                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4620 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataCOMRAM
   129  0041D8                     __pidataCOMRAM:
   130                           	opt callstack 0
   131                           
   132                           ;initializer for _motorBDirection
   133  0041D8  01                 	db	1
   134                           
   135                           	psect	idataBANK1
   136  0041C0                     __pidataBANK1:
   137                           	opt callstack 0
   138                           
   139                           ;initializer for stoa@F1144
   140  0041C0  28                 	db	40
   141  0041C1  6E                 	db	110
   142  0041C2  75                 	db	117
   143  0041C3  6C                 	db	108
   144  0041C4  6C                 	db	108
   145  0041C5  29                 	db	41
   146  0041C6  00                 	db	0
   147                           
   148                           ;initializer for _motorADirection
   149  0041C7  01                 	db	1
   150                           
   151                           	psect	mediumconst
   152  00FE32                     __pmediumconst:
   153                           	opt callstack 0
   154  00FE32  00                 	db	0
   155  00FE33                     _keys:
   156                           	opt callstack 0
   157  00FE33  31                 	db	49
   158  00FE34  32                 	db	50
   159  00FE35  33                 	db	51
   160  00FE36  41                 	db	65
   161  00FE37  34                 	db	52
   162  00FE38  35                 	db	53
   163  00FE39  36                 	db	54
   164  00FE3A  42                 	db	66
   165  00FE3B  37                 	db	55
   166  00FE3C  38                 	db	56
   167  00FE3D  39                 	db	57
   168  00FE3E  43                 	db	67
   169  00FE3F  2A                 	db	42
   170  00FE40  30                 	db	48
   171  00FE41  23                 	db	35
   172  00FE42  44                 	db	68
   173  00FE43  00                 	db	0
   174  00FE44                     __end_of_keys:
   175                           	opt callstack 0
   176  00FE44                     _happynewyear:
   177                           	opt callstack 0
   178  00FE44  00                 	db	0
   179  00FE45  37                 	db	55
   180  00FE46  0E                 	db	14
   181  00FE47  02                 	db	2
   182  00FE48  13                 	db	19
   183  00FE49  02                 	db	2
   184  00FE4A  13                 	db	19
   185  00FE4B                     __end_of_happynewyear:
   186                           	opt callstack 0
   187  00FE4B                     _LCD_LINE1_ADDR:
   188                           	opt callstack 0
   189  00FE4B  00                 	db	0
   190  00FE4C                     __end_of_LCD_LINE1_ADDR:
   191                           	opt callstack 0
   192  00FE4C                     _LCD_SIZE_VERT:
   193                           	opt callstack 0
   194  00FE4C  04                 	db	4
   195  00FE4D                     __end_of_LCD_SIZE_VERT:
   196                           	opt callstack 0
   197  00FE4D                     _LCD_SIZE_HORZ:
   198                           	opt callstack 0
   199  00FE4D  10                 	db	16
   200  00FE4E                     __end_of_LCD_SIZE_HORZ:
   201                           	opt callstack 0
   202  00FE4E  10                 	db	16
   203  00FE4F                     __end_ofinit_motor_PWM@TIMER2_PRESCALER:
   204                           	opt callstack 0
   205  00FE4F  03E8               	dw	1000
   206  00FE51  0000               	dw	0
   207  00FE53                     __end_ofinit_motor_PWM@FREQUENCY:
   208                           	opt callstack 0
   209  00FE53  50                 	db	80
   210  00FE54                     __end_of_LCD_LINE4_ADDR:
   211                           	opt callstack 0
   212  00FE54  10                 	db	16
   213  00FE55                     __end_of_LCD_LINE3_ADDR:
   214                           	opt callstack 0
   215  00FE55  40                 	db	64
   216  00FE56                     __end_of_LCD_LINE2_ADDR:
   217                           	opt callstack 0
   218  0000                     _SSPBUF	set	4041
   219  0000                     _SSPCON2bits	set	4037
   220  0000                     _SSPCON1	set	4038
   221  0000                     _SSPADD	set	4040
   222  0000                     _SSPCON1bits	set	4038
   223  0000                     _SSPCON2	set	4037
   224  0000                     _SSPSTAT	set	4039
   225  0000                     _LATDbits	set	3980
   226  0000                     _ADCON1	set	4033
   227  0000                     _LATB	set	3978
   228  0000                     _TRISD	set	3989
   229  0000                     _LATD	set	3980
   230  0000                     _EECON2	set	4007
   231  0000                     _EECON1bits	set	4006
   232  0000                     _EEADR	set	4009
   233  0000                     _EEDATA	set	4008
   234  0000                     _TRISAbits	set	3986
   235  0000                     _LATAbits	set	3977
   236  0000                     _CCPR2L	set	4027
   237  0000                     _CCPR1L	set	4030
   238  0000                     _PR2	set	4043
   239  0000                     _INTCONbits	set	4082
   240  0000                     _TMR0L	set	4054
   241  0000                     _TMR0H	set	4055
   242  0000                     _T0CONbits	set	4053
   243  0000                     _OSCCONbits	set	4051
   244  0000                     _TRISBbits	set	3987
   245  0000                     _TRISEbits	set	3990
   246  0000                     _TRISCbits	set	3988
   247  0000                     _PORTCbits	set	3970
   248  0000                     _PORTEbits	set	3972
   249  0000                     _PORTBbits	set	3969
   250  0000                     _PORTB	set	3969
   251  0000                     _INT0IF	set	32657
   252  0000                     _INT2IF	set	32641
   253  0000                     _TMR0IF	set	32658
   254  0000                     _INT1IF	set	32640
   255  0000                     _INT1IE	set	32643
   256  0000                     _CCP2Y	set	32212
   257  0000                     _CCP2X	set	32213
   258  0000                     _CCP1Y	set	32236
   259  0000                     _CCP1X	set	32237
   260  0000                     _TMR2ON	set	32338
   261  0000                     _T2CKPS1	set	32337
   262  0000                     _T2CKPS0	set	32336
   263  0000                     _CCP2M0	set	32208
   264  0000                     _CCP2M1	set	32209
   265  0000                     _CCP2M2	set	32210
   266  0000                     _CCP2M3	set	32211
   267  0000                     _CCP1M0	set	32232
   268  0000                     _CCP1M1	set	32233
   269  0000                     _CCP1M2	set	32234
   270  0000                     _CCP1M3	set	32235
   271  0000                     _P1M0	set	32238
   272  0000                     _P1M1	set	32239
   273  0000                     _TMR0ON	set	32431
   274  0000                     _TMR0IE	set	32661
   275  0000                     _PSA	set	32427
   276  0000                     _T0PS0	set	32424
   277  0000                     _T0PS1	set	32425
   278  0000                     _T0PS2	set	32426
   279  0000                     _T08BIT	set	32430
   280  0000                     _INT0IE	set	32660
   281  0000                     _INT2IE	set	32644
   282  00FE56                     STR_19:
   283                           
   284                           ; BSR set to: 0
   285  00FE56  54                 	db	84	;'T'
   286  00FE57  49                 	db	73	;'I'
   287  00FE58  52                 	db	82	;'R'
   288  00FE59  45                 	db	69	;'E'
   289  00FE5A  20                 	db	32
   290  00FE5B  50                 	db	80	;'P'
   291  00FE5C  4F                 	db	79	;'O'
   292  00FE5D  53                 	db	83	;'S'
   293  00FE5E  49                 	db	73	;'I'
   294  00FE5F  54                 	db	84	;'T'
   295  00FE60  49                 	db	73	;'I'
   296  00FE61  4F                 	db	79	;'O'
   297  00FE62  4E                 	db	78	;'N'
   298  00FE63  49                 	db	73	;'I'
   299  00FE64  4E                 	db	78	;'N'
   300  00FE65  47                 	db	71	;'G'
   301  00FE66  00                 	db	0
   302  00FE67                     STR_16:
   303                           
   304                           ; BSR set to: 0
   305  00FE67  54                 	db	84	;'T'
   306  00FE68  49                 	db	73	;'I'
   307  00FE69  52                 	db	82	;'R'
   308  00FE6A  45                 	db	69	;'E'
   309  00FE6B  2E                 	db	46
   310  00FE6C  20                 	db	32
   311  00FE6D  4F                 	db	79	;'O'
   312  00FE6E  4E                 	db	78	;'N'
   313  00FE6F  20                 	db	32
   314  00FE70  50                 	db	80	;'P'
   315  00FE71  4F                 	db	79	;'O'
   316  00FE72  4C                 	db	76	;'L'
   317  00FE73  45                 	db	69	;'E'
   318  00FE74  3A                 	db	58	;':'
   319  00FE75  20                 	db	32
   320  00FE76  00                 	db	0
   321  00FE77                     STR_52:
   322                           
   323                           ; BSR set to: 0
   324  00FE77  28                 	db	40
   325  00FE78  31                 	db	49	;'1'
   326  00FE79  29                 	db	41
   327  00FE7A  20                 	db	32
   328  00FE7B  28                 	db	40
   329  00FE7C  32                 	db	50	;'2'
   330  00FE7D  29                 	db	41
   331  00FE7E  20                 	db	32
   332  00FE7F  28                 	db	40
   333  00FE80  33                 	db	51	;'3'
   334  00FE81  29                 	db	41
   335  00FE82  20                 	db	32
   336  00FE83  28                 	db	40
   337  00FE84  34                 	db	52	;'4'
   338  00FE85  29                 	db	41
   339  00FE86  00                 	db	0
   340  00FE87                     STR_9:
   341                           
   342                           ; BSR set to: 0
   343  00FE87  28                 	db	40
   344  00FE88  32                 	db	50	;'2'
   345  00FE89  29                 	db	41
   346  00FE8A  20                 	db	32
   347  00FE8B  53                 	db	83	;'S'
   348  00FE8C  41                 	db	65	;'A'
   349  00FE8D  56                 	db	86	;'V'
   350  00FE8E  45                 	db	69	;'E'
   351  00FE8F  20                 	db	32
   352  00FE90  26                 	db	38
   353  00FE91  20                 	db	32
   354  00FE92  45                 	db	69	;'E'
   355  00FE93  58                 	db	88	;'X'
   356  00FE94  49                 	db	73	;'I'
   357  00FE95  54                 	db	84	;'T'
   358  00FE96  00                 	db	0
   359  00FE97                     STR_44:
   360                           
   361                           ; BSR set to: 0
   362  00FE97  28                 	db	40
   363  00FE98  32                 	db	50	;'2'
   364  00FE99  29                 	db	41
   365  00FE9A  20                 	db	32
   366  00FE9B  51                 	db	81	;'Q'
   367  00FE9C  55                 	db	85	;'U'
   368  00FE9D  49                 	db	73	;'I'
   369  00FE9E  54                 	db	84	;'T'
   370  00FE9F  20                 	db	32
   371  00FEA0  44                 	db	68	;'D'
   372  00FEA1  4F                 	db	79	;'O'
   373  00FEA2  20                 	db	32
   374  00FEA3  4E                 	db	78	;'N'
   375  00FEA4  4F                 	db	79	;'O'
   376  00FEA5  54                 	db	84	;'T'
   377  00FEA6  00                 	db	0
   378  00FEA7                     STR_5:
   379                           
   380                           ; BSR set to: 0
   381  00FEA7  54                 	db	84	;'T'
   382  00FEA8  49                 	db	73	;'I'
   383  00FEA9  52                 	db	82	;'R'
   384  00FEAA  2E                 	db	46
   385  00FEAB  20                 	db	32
   386  00FEAC  53                 	db	83	;'S'
   387  00FEAD  55                 	db	85	;'U'
   388  00FEAE  50                 	db	80	;'P'
   389  00FEAF  50                 	db	80	;'P'
   390  00FEB0  4C                 	db	76	;'L'
   391  00FEB1  49                 	db	73	;'I'
   392  00FEB2  45                 	db	69	;'E'
   393  00FEB3  44                 	db	68	;'D'
   394  00FEB4  20                 	db	32
   395  00FEB5  00                 	db	0
   396  00FEB6                     STR_29:
   397                           
   398                           ; BSR set to: 0
   399  00FEB6  25                 	db	37
   400  00FEB7  30                 	db	48	;'0'
   401  00FEB8  32                 	db	50	;'2'
   402  00FEB9  78                 	db	120	;'x'
   403  00FEBA  2F                 	db	47
   404  00FEBB  25                 	db	37
   405  00FEBC  30                 	db	48	;'0'
   406  00FEBD  32                 	db	50	;'2'
   407  00FEBE  78                 	db	120	;'x'
   408  00FEBF  2F                 	db	47
   409  00FEC0  25                 	db	37
   410  00FEC1  30                 	db	48	;'0'
   411  00FEC2  32                 	db	50	;'2'
   412  00FEC3  78                 	db	120	;'x'
   413  00FEC4  00                 	db	0
   414  00FEC5                     STR_30:
   415                           
   416                           ; BSR set to: 0
   417  00FEC5  25                 	db	37
   418  00FEC6  30                 	db	48	;'0'
   419  00FEC7  32                 	db	50	;'2'
   420  00FEC8  78                 	db	120	;'x'
   421  00FEC9  3A                 	db	58	;':'
   422  00FECA  25                 	db	37
   423  00FECB  30                 	db	48	;'0'
   424  00FECC  32                 	db	50	;'2'
   425  00FECD  78                 	db	120	;'x'
   426  00FECE  3A                 	db	58	;':'
   427  00FECF  25                 	db	37
   428  00FED0  30                 	db	48	;'0'
   429  00FED1  32                 	db	50	;'2'
   430  00FED2  78                 	db	120	;'x'
   431  00FED3  00                 	db	0
   432  00FED4                     STR_14:
   433                           
   434                           ; BSR set to: 0
   435  00FED4  54                 	db	84	;'T'
   436  00FED5  49                 	db	73	;'I'
   437  00FED6  52                 	db	82	;'R'
   438  00FED7  2E                 	db	46
   439  00FED8  20                 	db	32
   440  00FED9  44                 	db	68	;'D'
   441  00FEDA  45                 	db	69	;'E'
   442  00FEDB  50                 	db	80	;'P'
   443  00FEDC  4C                 	db	76	;'L'
   444  00FEDD  4F                 	db	79	;'O'
   445  00FEDE  59                 	db	89	;'Y'
   446  00FEDF  3A                 	db	58	;':'
   447  00FEE0  20                 	db	32
   448  00FEE1  00                 	db	0
   449  00FEE2                     STR_50:
   450                           
   451                           ; BSR set to: 0
   452  00FEE2  28                 	db	40
   453  00FEE3  31                 	db	49	;'1'
   454  00FEE4  20                 	db	32
   455  00FEE5  49                 	db	73	;'I'
   456  00FEE6  53                 	db	83	;'S'
   457  00FEE7  20                 	db	32
   458  00FEE8  4F                 	db	79	;'O'
   459  00FEE9  4C                 	db	76	;'L'
   460  00FEEA  44                 	db	68	;'D'
   461  00FEEB  45                 	db	69	;'E'
   462  00FEEC  53                 	db	83	;'S'
   463  00FEED  54                 	db	84	;'T'
   464  00FEEE  29                 	db	41
   465  00FEEF  00                 	db	0
   466  00FEF0                     STR_7:
   467                           
   468                           ; BSR set to: 0
   469  00FEF0  28                 	db	40
   470  00FEF1  31                 	db	49	;'1'
   471  00FEF2  29                 	db	41
   472  00FEF3  20                 	db	32
   473  00FEF4  50                 	db	80	;'P'
   474  00FEF5  4F                 	db	79	;'O'
   475  00FEF6  4C                 	db	76	;'L'
   476  00FEF7  45                 	db	69	;'E'
   477  00FEF8  20                 	db	32
   478  00FEF9  49                 	db	73	;'I'
   479  00FEFA  4E                 	db	78	;'N'
   480  00FEFB  46                 	db	70	;'F'
   481  00FEFC  4F                 	db	79	;'O'
   482  00FEFD  00                 	db	0
   483  00FEFE                     STR_34:
   484                           
   485                           ; BSR set to: 0
   486  00FEFE  28                 	db	40
   487  00FEFF  32                 	db	50	;'2'
   488  00FF00  29                 	db	41
   489  00FF01  20                 	db	32
   490  00FF02  56                 	db	86	;'V'
   491  00FF03  49                 	db	73	;'I'
   492  00FF04  45                 	db	69	;'E'
   493  00FF05  57                 	db	87	;'W'
   494  00FF06  20                 	db	32
   495  00FF07  4C                 	db	76	;'L'
   496  00FF08  4F                 	db	79	;'O'
   497  00FF09  47                 	db	71	;'G'
   498  00FF0A  53                 	db	83	;'S'
   499  00FF0B  00                 	db	0
   500  00FF0C                     STR_18:
   501                           
   502                           ; BSR set to: 0
   503  00FF0C  31                 	db	49	;'1'
   504  00FF0D  3C                 	db	60	;'<'
   505  00FF0E  2D                 	db	45
   506  00FF0F  20                 	db	32
   507  00FF10  32                 	db	50	;'2'
   508  00FF11  2D                 	db	45
   509  00FF12  3E                 	db	62	;'>'
   510  00FF13  20                 	db	32
   511  00FF14  33                 	db	51	;'3'
   512  00FF15  4D                 	db	77	;'M'
   513  00FF16  45                 	db	69	;'E'
   514  00FF17  4E                 	db	78	;'N'
   515  00FF18  55                 	db	85	;'U'
   516  00FF19  00                 	db	0
   517  00FF1A                     STR_40:
   518                           
   519                           ; BSR set to: 0
   520  00FF1A  4F                 	db	79	;'O'
   521  00FF1B  50                 	db	80	;'P'
   522  00FF1C  2E                 	db	46
   523  00FF1D  20                 	db	32
   524  00FF1E  43                 	db	67	;'C'
   525  00FF1F  4F                 	db	79	;'O'
   526  00FF20  4D                 	db	77	;'M'
   527  00FF21  50                 	db	80	;'P'
   528  00FF22  4C                 	db	76	;'L'
   529  00FF23  45                 	db	69	;'E'
   530  00FF24  54                 	db	84	;'T'
   531  00FF25  45                 	db	69	;'E'
   532  00FF26  00                 	db	0
   533  00FF27                     STR_42:
   534                           
   535                           ; BSR set to: 0
   536  00FF27  28                 	db	40
   537  00FF28  31                 	db	49	;'1'
   538  00FF29  29                 	db	41
   539  00FF2A  20                 	db	32
   540  00FF2B  56                 	db	86	;'V'
   541  00FF2C  49                 	db	73	;'I'
   542  00FF2D  45                 	db	69	;'E'
   543  00FF2E  57                 	db	87	;'W'
   544  00FF2F  20                 	db	32
   545  00FF30  4C                 	db	76	;'L'
   546  00FF31  4F                 	db	79	;'O'
   547  00FF32  47                 	db	71	;'G'
   548  00FF33  00                 	db	0
   549  00FF34                     STR_36:
   550                           
   551                           ; BSR set to: 0
   552  00FF34  4F                 	db	79	;'O'
   553  00FF35  50                 	db	80	;'P'
   554  00FF36  45                 	db	69	;'E'
   555  00FF37  52                 	db	82	;'R'
   556  00FF38  41                 	db	65	;'A'
   557  00FF39  54                 	db	84	;'T'
   558  00FF3A  49                 	db	73	;'I'
   559  00FF3B  4F                 	db	79	;'O'
   560  00FF3C  4E                 	db	78	;'N'
   561  00FF3D  20                 	db	32
   562  00FF3E  49                 	db	73	;'I'
   563  00FF3F  4E                 	db	78	;'N'
   564  00FF40  00                 	db	0
   565  00FF41                     STR_26:
   566                           
   567                           ; BSR set to: 0
   568  00FF41  4C                 	db	76	;'L'
   569  00FF42  65                 	db	101	;'e'
   570  00FF43  61                 	db	97	;'a'
   571  00FF44  76                 	db	118	;'v'
   572  00FF45  69                 	db	105	;'i'
   573  00FF46  6E                 	db	110	;'n'
   574  00FF47  67                 	db	103	;'g'
   575  00FF48  20                 	db	32
   576  00FF49  50                 	db	80	;'P'
   577  00FF4A  6F                 	db	111	;'o'
   578  00FF4B  6C                 	db	108	;'l'
   579  00FF4C  65                 	db	101	;'e'
   580  00FF4D  00                 	db	0
   581  00FF4E                     
   582                           ; BSR set to: 0
   583  00FF4E  45                 	db	69	;'E'
   584  00FF4F  45                 	db	69	;'E'
   585  00FF50  50                 	db	80	;'P'
   586  00FF51  52                 	db	82	;'R'
   587  00FF52  4F                 	db	79	;'O'
   588  00FF53  4D                 	db	77	;'M'
   589  00FF54  2D                 	db	45
   590  00FF55  44                 	db	68	;'D'
   591  00FF56  65                 	db	101	;'e'
   592  00FF57  6D                 	db	109	;'m'
   593  00FF58  6F                 	db	111	;'o'
   594  00FF59  6E                 	db	110	;'n'
   595  00FF5A  00                 	db	0
   596  00FF5B                     STR_48:
   597                           
   598                           ; BSR set to: 0
   599  00FF5B  53                 	db	83	;'S'
   600  00FF5C  45                 	db	69	;'E'
   601  00FF5D  4C                 	db	76	;'L'
   602  00FF5E  45                 	db	69	;'E'
   603  00FF5F  43                 	db	67	;'C'
   604  00FF60  54                 	db	84	;'T'
   605  00FF61  20                 	db	32
   606  00FF62  4C                 	db	76	;'L'
   607  00FF63  4F                 	db	79	;'O'
   608  00FF64  47                 	db	71	;'G'
   609  00FF65  00                 	db	0
   610  00FF66                     STR_25:
   611                           
   612                           ; BSR set to: 0
   613  00FF66  25                 	db	37
   614  00FF67  64                 	db	100	;'d'
   615  00FF68  20                 	db	32
   616  00FF69  6F                 	db	111	;'o'
   617  00FF6A  6E                 	db	110	;'n'
   618  00FF6B  20                 	db	32
   619  00FF6C  70                 	db	112	;'p'
   620  00FF6D  6F                 	db	111	;'o'
   621  00FF6E  6C                 	db	108	;'l'
   622  00FF6F  65                 	db	101	;'e'
   623  00FF70  00                 	db	0
   624  00FF71                     
   625                           ; BSR set to: 0
   626  00FF71  77                 	db	119	;'w'
   627  00FF72  72                 	db	114	;'r'
   628  00FF73  6F                 	db	111	;'o'
   629  00FF74  74                 	db	116	;'t'
   630  00FF75  65                 	db	101	;'e'
   631  00FF76  3A                 	db	58	;':'
   632  00FF77  20                 	db	32
   633  00FF78  25                 	db	37
   634  00FF79  63                 	db	99	;'c'
   635  00FF7A  6E                 	db	110	;'n'
   636  00FF7B  00                 	db	0
   637  00FF7C                     
   638                           ; BSR set to: 0
   639  00FF7C  72                 	db	114	;'r'
   640  00FF7D  65                 	db	101	;'e'
   641  00FF7E  61                 	db	97	;'a'
   642  00FF7F  64                 	db	100	;'d'
   643  00FF80  3A                 	db	58	;':'
   644  00FF81  20                 	db	32
   645  00FF82  25                 	db	37
   646  00FF83  63                 	db	99	;'c'
   647  00FF84  6E                 	db	110	;'n'
   648  00FF85  6E                 	db	110	;'n'
   649  00FF86  00                 	db	0
   650  00FF87                     STR_2:
   651                           
   652                           ; BSR set to: 0
   653  00FF87  4F                 	db	79	;'O'
   654  00FF88  50                 	db	80	;'P'
   655  00FF89  2E                 	db	46
   656  00FF8A  20                 	db	32
   657  00FF8B  54                 	db	84	;'T'
   658  00FF8C  49                 	db	73	;'I'
   659  00FF8D  4D                 	db	77	;'M'
   660  00FF8E  45                 	db	69	;'E'
   661  00FF8F  20                 	db	32
   662  00FF90  00                 	db	0
   663  00FF91                     STR_24:
   664                           
   665                           ; BSR set to: 0
   666  00FF91  54                 	db	84	;'T'
   667  00FF92  49                 	db	73	;'I'
   668  00FF93  52                 	db	82	;'R'
   669  00FF94  45                 	db	69	;'E'
   670  00FF95  20                 	db	32
   671  00FF96  44                 	db	68	;'D'
   672  00FF97  52                 	db	82	;'R'
   673  00FF98  4F                 	db	79	;'O'
   674  00FF99  50                 	db	80	;'P'
   675  00FF9A  00                 	db	0
   676  00FF9B                     STR_32:
   677                           
   678                           ; BSR set to: 0
   679  00FF9B  28                 	db	40
   680  00FF9C  31                 	db	49	;'1'
   681  00FF9D  29                 	db	41
   682  00FF9E  20                 	db	32
   683  00FF9F  53                 	db	83	;'S'
   684  00FFA0  54                 	db	84	;'T'
   685  00FFA1  41                 	db	65	;'A'
   686  00FFA2  52                 	db	82	;'R'
   687  00FFA3  54                 	db	84	;'T'
   688  00FFA4  00                 	db	0
   689  00FFA5                     
   690                           ; BSR set to: 0
   691  00FFA5  72                 	db	114	;'r'
   692  00FFA6  65                 	db	101	;'e'
   693  00FFA7  61                 	db	97	;'a'
   694  00FFA8  64                 	db	100	;'d'
   695  00FFA9  3A                 	db	58	;':'
   696  00FFAA  20                 	db	32
   697  00FFAB  25                 	db	37
   698  00FFAC  63                 	db	99	;'c'
   699  00FFAD  6E                 	db	110	;'n'
   700  00FFAE  00                 	db	0
   701  00FFAF                     STR_28:
   702                           
   703                           ; BSR set to: 0
   704  00FFAF  57                 	db	87	;'W'
   705  00FFB0  45                 	db	69	;'E'
   706  00FFB1  4C                 	db	76	;'L'
   707  00FFB2  43                 	db	67	;'C'
   708  00FFB3  4F                 	db	79	;'O'
   709  00FFB4  4D                 	db	77	;'M'
   710  00FFB5  45                 	db	69	;'E'
   711  00FFB6  20                 	db	32
   712  00FFB7  00                 	db	0
   713  00FFB8                     STR_46:
   714                           
   715                           ; BSR set to: 0
   716  00FFB8  53                 	db	83	;'S'
   717  00FFB9  41                 	db	65	;'A'
   718  00FFBA  56                 	db	86	;'V'
   719  00FFBB  45                 	db	69	;'E'
   720  00FFBC  20                 	db	32
   721  00FFBD  4C                 	db	76	;'L'
   722  00FFBE  4F                 	db	79	;'O'
   723  00FFBF  47                 	db	71	;'G'
   724  00FFC0  00                 	db	0
   725  00FFC1                     STR_38:
   726                           
   727                           ; BSR set to: 0
   728  00FFC1  50                 	db	80	;'P'
   729  00FFC2  52                 	db	82	;'R'
   730  00FFC3  4F                 	db	79	;'O'
   731  00FFC4  47                 	db	71	;'G'
   732  00FFC5  52                 	db	82	;'R'
   733  00FFC6  45                 	db	69	;'E'
   734  00FFC7  53                 	db	83	;'S'
   735  00FFC8  53                 	db	83	;'S'
   736  00FFC9  00                 	db	0
   737  00FFCA                     STR_10:
   738                           
   739                           ; BSR set to: 0
   740  00FFCA  25                 	db	37
   741  00FFCB  73                 	db	115	;'s'
   742  00FFCC  25                 	db	37
   743  00FFCD  64                 	db	100	;'d'
   744  00FFCE  25                 	db	37
   745  00FFCF  73                 	db	115	;'s'
   746  00FFD0  25                 	db	37
   747  00FFD1  64                 	db	100	;'d'
   748  00FFD2  00                 	db	0
   749  00FFD3                     STR_1:
   750                           
   751                           ; BSR set to: 0
   752  00FFD3  25                 	db	37
   753  00FFD4  73                 	db	115	;'s'
   754  00FFD5  25                 	db	37
   755  00FFD6  64                 	db	100	;'d'
   756  00FFD7  25                 	db	37
   757  00FFD8  73                 	db	115	;'s'
   758  00FFD9  00                 	db	0
   759  00FFDA                     STR_11:
   760                           
   761                           ; BSR set to: 0
   762  00FFDA  50                 	db	80	;'P'
   763  00FFDB  4F                 	db	79	;'O'
   764  00FFDC  4C                 	db	76	;'L'
   765  00FFDD  45                 	db	69	;'E'
   766  00FFDE  20                 	db	32
   767  00FFDF  00                 	db	0
   768  00FFE0                     STR_23:
   769                           
   770                           ; BSR set to: 0
   771  00FFE0  41                 	db	65	;'A'
   772  00FFE1  3A                 	db	58	;':'
   773  00FFE2  20                 	db	32
   774  00FFE3  25                 	db	37
   775  00FFE4  64                 	db	100	;'d'
   776  00FFE5  00                 	db	0
   777  00FFE6                     STR_22:
   778                           
   779                           ; BSR set to: 0
   780  00FFE6  42                 	db	66	;'B'
   781  00FFE7  3A                 	db	58	;':'
   782  00FFE8  20                 	db	32
   783  00FFE9  25                 	db	37
   784  00FFEA  64                 	db	100	;'d'
   785  00FFEB  00                 	db	0
   786  00FFEC                     STR_20:
   787                           
   788                           ; BSR set to: 0
   789  00FFEC  25                 	db	37
   790  00FFED  6C                 	db	108	;'l'
   791  00FFEE  75                 	db	117	;'u'
   792  00FFEF  00                 	db	0
   793  00FFF0                     STR_75:
   794                           
   795                           ; BSR set to: 0
   796  00FFF0  6C                 	db	108	;'l'
   797  00FFF1  58                 	db	88	;'X'
   798  00FFF2  00                 	db	0
   799  00FFF3                     STR_57:
   800                           
   801                           ; BSR set to: 0
   802  00FFF3  6C                 	db	108	;'l'
   803  00FFF4  64                 	db	100	;'d'
   804  00FFF5  00                 	db	0
   805  00FFF6                     STR_61:
   806                           
   807                           ; BSR set to: 0
   808  00FFF6  6C                 	db	108	;'l'
   809  00FFF7  69                 	db	105	;'i'
   810  00FFF8  00                 	db	0
   811  00FFF9                     STR_71:
   812                           
   813                           ; BSR set to: 0
   814  00FFF9  6C                 	db	108	;'l'
   815  00FFFA  78                 	db	120	;'x'
   816  00FFFB  00                 	db	0
   817  00FFFC                     STR_12:
   818                           
   819                           ; BSR set to: 0
   820  00FFFC  2F                 	db	47
   821  00FFFD  00                 	db	0
   822  0000                     
   823                           ; #config settings
   824  00FFFE  00                 	db	0	; dummy byte at the end
   825  0000                     
   826                           	psect	cinit
   827  0038BA                     __pcinit:
   828                           	opt callstack 0
   829  0038BA                     start_initialization:
   830                           	opt callstack 0
   831  0038BA                     __initialization:
   832                           	opt callstack 0
   833                           
   834                           ; Initialize objects allocated to BANK1 (8 bytes)
   835                           ; load TBLPTR registers with __pidataBANK1
   836  0038BA  0EC0               	movlw	low __pidataBANK1
   837  0038BC  6EF6               	movwf	tblptrl,c
   838  0038BE  0E41               	movlw	high __pidataBANK1
   839  0038C0  6EF7               	movwf	tblptrh,c
   840  0038C2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   841  0038C4  6EF8               	movwf	tblptru,c
   842  0038C6  EE01  F070         	lfsr	0,__pdataBANK1
   843  0038CA  EE10 F008          	lfsr	1,8
   844  0038CE                     copy_data0:
   845  0038CE  0009               	tblrd		*+
   846  0038D0  CFF5 FFEE          	movff	tablat,postinc0
   847  0038D4  50E5               	movf	postdec1,w,c
   848  0038D6  50E1               	movf	fsr1l,w,c
   849  0038D8  E1FA               	bnz	copy_data0
   850                           
   851                           ; Initialize objects allocated to COMRAM (1 bytes)
   852                           ; load TBLPTR registers with __pidataCOMRAM
   853  0038DA  0ED8               	movlw	low __pidataCOMRAM
   854  0038DC  6EF6               	movwf	tblptrl,c
   855  0038DE  0E41               	movlw	high __pidataCOMRAM
   856  0038E0  6EF7               	movwf	tblptrh,c
   857  0038E2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   858  0038E4  6EF8               	movwf	tblptru,c
   859  0038E6  0009               	tblrd		*+	;fetch initializer
   860  0038E8  CFF5 F079          	movff	tablat,__pdataCOMRAM
   861                           
   862                           ; Clear objects allocated to BIGRAM (480 bytes)
   863  0038EC  EE01  F078         	lfsr	0,__pbssBIGRAM
   864  0038F0  EE11 F0E0          	lfsr	1,480
   865  0038F4                     clear_0:
   866  0038F4  6AEE               	clrf	postinc0,c
   867  0038F6  50E5               	movf	postdec1,w,c
   868  0038F8  50E1               	movf	fsr1l,w,c
   869  0038FA  E1FC               	bnz	clear_0
   870  0038FC  50E2               	movf	fsr1h,w,c
   871  0038FE  E1FA               	bnz	clear_0
   872                           
   873                           ; Clear objects allocated to BANK1 (45 bytes)
   874  003900  EE01  F043         	lfsr	0,__pbssBANK1
   875  003904  0E2D               	movlw	45
   876  003906                     clear_1:
   877  003906  6AEE               	clrf	postinc0,c
   878  003908  06E8               	decf	wreg,f,c
   879  00390A  E1FD               	bnz	clear_1
   880                           
   881                           ; Clear objects allocated to BANK0 (8 bytes)
   882  00390C  EE00  F0D3         	lfsr	0,__pbssBANK0
   883  003910  0E08               	movlw	8
   884  003912                     clear_2:
   885  003912  6AEE               	clrf	postinc0,c
   886  003914  06E8               	decf	wreg,f,c
   887  003916  E1FD               	bnz	clear_2
   888                           
   889                           ; Clear objects allocated to COMRAM (4 bytes)
   890  003918  6A78               	clrf	(__pbssCOMRAM+3)& (0+255),c
   891  00391A  6A77               	clrf	(__pbssCOMRAM+2)& (0+255),c
   892  00391C  6A76               	clrf	(__pbssCOMRAM+1)& (0+255),c
   893  00391E  6A75               	clrf	__pbssCOMRAM& (0+255),c
   894  003920                     end_of_initialization:
   895                           	opt callstack 0
   896  003920                     __end_of__initialization:
   897                           	opt callstack 0
   898  003920  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   899  003922  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   900  003924  0E00               	movlw	low (__Lmediumconst shr (0+16))
   901  003926  6EF8               	movwf	tblptru,c
   902  003928  0100               	movlb	0
   903  00392A  EFDE  F006         	goto	_main	;jump to C main() function
   904                           
   905                           	psect	bssCOMRAM
   906  000075                     __pbssCOMRAM:
   907                           	opt callstack 0
   908  000075                     _millisecondsMeasured:
   909                           	opt callstack 0
   910  000075                     	ds	4
   911                           
   912                           	psect	dataCOMRAM
   913  000079                     __pdataCOMRAM:
   914                           	opt callstack 0
   915  000079                     _motorBDirection:
   916                           	opt callstack 0
   917  000079                     	ds	1
   918                           
   919                           	psect	bssBANK0
   920  0000D3                     __pbssBANK0:
   921                           	opt callstack 0
   922  0000D3                     _prec:
   923                           	opt callstack 0
   924  0000D3                     	ds	2
   925  0000D5                     _flags:
   926                           	opt callstack 0
   927  0000D5                     	ds	2
   928  0000D7                     _motorBDistance:
   929                           	opt callstack 0
   930  0000D7                     	ds	2
   931  0000D9                     _motorADistance:
   932                           	opt callstack 0
   933  0000D9                     	ds	2
   934                           
   935                           	psect	bssBANK1
   936  000143                     __pbssBANK1:
   937                           	opt callstack 0
   938  000143                     	ds	4
   939  000147                     _nout:
   940                           	opt callstack 0
   941  000147                     	ds	2
   942  000149                     _width:
   943                           	opt callstack 0
   944  000149                     	ds	2
   945  00014B                     _encoderAInterruptLast:
   946                           	opt callstack 0
   947  00014B                     	ds	1
   948  00014C                     _encoderBInterruptLast:
   949                           	opt callstack 0
   950  00014C                     	ds	1
   951  00014D                     _bottomBreakBeamTriggeredChange:
   952                           	opt callstack 0
   953  00014D                     	ds	1
   954  00014E                     _topBreakBeamTriggeredChange:
   955                           	opt callstack 0
   956  00014E                     	ds	1
   957  00014F                     _keyPressed:
   958                           	opt callstack 0
   959  00014F                     	ds	1
   960  000150                     _dbuf:
   961                           	opt callstack 0
   962  000150                     	ds	32
   963                           
   964                           	psect	dataBANK1
   965  000170                     __pdataBANK1:
   966                           	opt callstack 0
   967  000170                     stoa@F1144:
   968                           	opt callstack 0
   969  000170                     	ds	7
   970  000177                     _motorADirection:
   971                           	opt callstack 0
   972  000177                     	ds	1
   973                           
   974                           	psect	bssBIGRAM
   975  000178                     __pbssBIGRAM:
   976                           	opt callstack 0
   977  000178                     _logs:
   978                           	opt callstack 0
   979  000178                     	ds	480
   980                           
   981                           	psect	cstackBANK1
   982  000100                     __pcstackBANK1:
   983                           	opt callstack 0
   984  000100                     doOperation@PIDData:
   985                           	opt callstack 0
   986                           
   987                           ; 4 bytes @ 0x0
   988  000100                     	ds	18
   989  000112                     doOperation@tiresOnPoleAfterOp:
   990                           	opt callstack 0
   991                           
   992                           ; 2 bytes @ 0x12
   993  000112                     	ds	2
   994  000114                     doOperation@startedDistA:
   995                           	opt callstack 0
   996                           
   997                           ; 2 bytes @ 0x14
   998  000114                     	ds	2
   999  000116                     doOperation@startedDistB:
  1000                           	opt callstack 0
  1001                           
  1002                           ; 2 bytes @ 0x16
  1003  000116                     	ds	2
  1004  000118                     doOperation@send:
  1005                           	opt callstack 0
  1006                           
  1007                           ; 1 bytes @ 0x18
  1008  000118                     	ds	1
  1009  000119                     doOperation@badCount:
  1010                           	opt callstack 0
  1011                           
  1012                           ; 2 bytes @ 0x19
  1013  000119                     	ds	2
  1014  00011B                     doOperation@badCountBot:
  1015                           	opt callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x1B
  1018  00011B                     	ds	2
  1019  00011D                     doOperation@poleNumber:
  1020                           	opt callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x1D
  1023  00011D                     	ds	2
  1024  00011F                     doOperation@totalTiresSupplied:
  1025                           	opt callstack 0
  1026                           
  1027                           ; 2 bytes @ 0x1F
  1028  00011F                     	ds	2
  1029  000121                     doOperation@distanceFromLastPole:
  1030                           	opt callstack 0
  1031                           
  1032                           ; 2 bytes @ 0x21
  1033  000121                     	ds	2
  1034  000123                     doOperation@timeStart:
  1035                           	opt callstack 0
  1036                           
  1037                           ; 4 bytes @ 0x23
  1038  000123                     	ds	4
  1039  000127                     doOperation@goalSpeed:
  1040                           	opt callstack 0
  1041                           
  1042                           ; 2 bytes @ 0x27
  1043  000127                     	ds	2
  1044  000129                     doOperation@isDoneDrop:
  1045                           	opt callstack 0
  1046                           
  1047                           ; 1 bytes @ 0x29
  1048  000129                     	ds	1
  1049  00012A                     doOperation@motorAStartDistance:
  1050                           	opt callstack 0
  1051                           
  1052                           ; 2 bytes @ 0x2A
  1053  00012A                     	ds	2
  1054  00012C                     doOperation@motorBStartDistance:
  1055                           	opt callstack 0
  1056                           
  1057                           ; 2 bytes @ 0x2C
  1058  00012C                     	ds	2
  1059  00012E                     doOperation@counted:
  1060                           	opt callstack 0
  1061                           
  1062                           ; 2 bytes @ 0x2E
  1063  00012E                     	ds	2
  1064  000130                     doOperation@distanceToPole:
  1065                           	opt callstack 0
  1066                           
  1067                           ; 2 bytes @ 0x30
  1068  000130                     	ds	2
  1069  000132                     doOperation@tiresToDrop:
  1070                           	opt callstack 0
  1071                           
  1072                           ; 2 bytes @ 0x32
  1073  000132                     	ds	2
  1074  000134                     doOperation@tiresDeployedOnPole:
  1075                           	opt callstack 0
  1076                           
  1077                           ; 2 bytes @ 0x34
  1078  000134                     	ds	2
  1079  000136                     doOperation@tiresOnPole:
  1080                           	opt callstack 0
  1081                           
  1082                           ; 2 bytes @ 0x36
  1083  000136                     	ds	2
  1084  000138                     doOperation@topLaserStatePrev:
  1085                           	opt callstack 0
  1086                           
  1087                           ; 1 bytes @ 0x38
  1088  000138                     	ds	1
  1089  000139                     doOperation@bottomLaserStatePrev:
  1090                           	opt callstack 0
  1091                           
  1092                           ; 1 bytes @ 0x39
  1093  000139                     	ds	1
  1094  00013A                     doOperation@i:
  1095                           	opt callstack 0
  1096                           
  1097                           ; 2 bytes @ 0x3A
  1098  00013A                     	ds	2
  1099  00013C                     doOperation@timeInOperation:
  1100                           	opt callstack 0
  1101                           
  1102                           ; 4 bytes @ 0x3C
  1103  00013C                     	ds	4
  1104  000140                     doOperation@currentOperationState:
  1105                           	opt callstack 0
  1106                           
  1107                           ; 1 bytes @ 0x40
  1108  000140                     	ds	1
  1109  000141                     doOperation@bottomLaserState:
  1110                           	opt callstack 0
  1111                           
  1112                           ; 1 bytes @ 0x41
  1113  000141                     	ds	1
  1114  000142                     doOperation@topLaserState:
  1115                           	opt callstack 0
  1116                           
  1117                           ; 1 bytes @ 0x42
  1118  000142                     	ds	1
  1119                           
  1120                           	psect	cstackBANK0
  1121  000080                     __pcstackBANK0:
  1122                           	opt callstack 0
  1123  000080                     vfpfcnvrt@cp:
  1124                           	opt callstack 0
  1125  000080                     _setMotorSpeeds$2272:
  1126                           	opt callstack 0
  1127                           
  1128                           ; 4 bytes @ 0x0
  1129  000080                     	ds	2
  1130  000082                     vfpfcnvrt@done:
  1131                           	opt callstack 0
  1132                           
  1133                           ; 2 bytes @ 0x2
  1134  000082                     	ds	2
  1135  000084                     _vfpfcnvrt$1385:
  1136                           	opt callstack 0
  1137  000084                     _setMotorSpeeds$2273:
  1138                           	opt callstack 0
  1139                           
  1140                           ; 4 bytes @ 0x4
  1141  000084                     	ds	2
  1142  000086                     vfpfcnvrt@ll:
  1143                           	opt callstack 0
  1144                           
  1145                           ; 8 bytes @ 0x6
  1146  000086                     	ds	2
  1147  000088                     errorCorrectedMove@goalSpeed:
  1148                           	opt callstack 0
  1149                           
  1150                           ; 2 bytes @ 0x8
  1151  000088                     	ds	2
  1152  00008A                     errorCorrectedMove@turnRatio:
  1153                           	opt callstack 0
  1154                           
  1155                           ; 4 bytes @ 0xA
  1156  00008A                     	ds	4
  1157  00008E                     vfpfcnvrt@c:
  1158                           	opt callstack 0
  1159  00008E                     errorCorrectedMove@motorAStartDistance:
  1160                           	opt callstack 0
  1161                           
  1162                           ; 2 bytes @ 0xE
  1163  00008E                     	ds	1
  1164  00008F                     vfpfcnvrt@llu:
  1165                           	opt callstack 0
  1166                           
  1167                           ; 8 bytes @ 0xF
  1168  00008F                     	ds	1
  1169  000090                     errorCorrectedMove@motorBStartDistance:
  1170                           	opt callstack 0
  1171                           
  1172                           ; 2 bytes @ 0x10
  1173  000090                     	ds	2
  1174  000092                     errorCorrectedMove@correctionConstant:
  1175                           	opt callstack 0
  1176                           
  1177                           ; 4 bytes @ 0x12
  1178  000092                     	ds	4
  1179  000096                     ??_errorCorrectedMove:
  1180                           
  1181                           ; 1 bytes @ 0x16
  1182  000096                     	ds	1
  1183  000097                     ?_vfprintf:
  1184                           	opt callstack 0
  1185  000097                     vfprintf@fp:
  1186                           	opt callstack 0
  1187                           
  1188                           ; 2 bytes @ 0x17
  1189  000097                     	ds	2
  1190  000099                     vfprintf@fmt:
  1191                           	opt callstack 0
  1192                           
  1193                           ; 2 bytes @ 0x19
  1194  000099                     	ds	1
  1195  00009A                     errorCorrectedMove@error:
  1196                           	opt callstack 0
  1197                           
  1198                           ; 2 bytes @ 0x1A
  1199  00009A                     	ds	1
  1200  00009B                     vfprintf@ap:
  1201                           	opt callstack 0
  1202                           
  1203                           ; 2 bytes @ 0x1B
  1204  00009B                     	ds	1
  1205  00009C                     errorCorrectedMove@ASpeed:
  1206                           	opt callstack 0
  1207                           
  1208                           ; 2 bytes @ 0x1C
  1209  00009C                     	ds	1
  1210  00009D                     ?_printf:
  1211                           	opt callstack 0
  1212  00009D                     printf@fmt:
  1213                           	opt callstack 0
  1214                           
  1215                           ; 2 bytes @ 0x1D
  1216  00009D                     	ds	1
  1217  00009E                     errorCorrectedMove@BSpeed:
  1218                           	opt callstack 0
  1219                           
  1220                           ; 2 bytes @ 0x1E
  1221  00009E                     	ds	2
  1222  0000A0                     opErrorCorrectionDegrees@goalSpeed:
  1223                           	opt callstack 0
  1224                           
  1225                           ; 2 bytes @ 0x20
  1226  0000A0                     	ds	2
  1227  0000A2                     opErrorCorrectionDegrees@turnRatio:
  1228                           	opt callstack 0
  1229                           
  1230                           ; 2 bytes @ 0x22
  1231  0000A2                     	ds	2
  1232  0000A4                     opErrorCorrectionDegrees@correctionConstant:
  1233                           	opt callstack 0
  1234                           
  1235                           ; 4 bytes @ 0x24
  1236  0000A4                     	ds	3
  1237  0000A7                     ?_tirePositioning:
  1238                           	opt callstack 0
  1239  0000A7                     doDisplayLog@logNumber:
  1240                           	opt callstack 0
  1241  0000A7                     tirePositioning@maxOperationTime:
  1242                           	opt callstack 0
  1243                           
  1244                           ; 4 bytes @ 0x27
  1245  0000A7                     	ds	1
  1246  0000A8                     opErrorCorrectionDegrees@distanceDegrees:
  1247                           	opt callstack 0
  1248                           
  1249                           ; 2 bytes @ 0x28
  1250  0000A8                     	ds	2
  1251  0000AA                     opErrorCorrectionDegrees@maxOperationTime:
  1252                           	opt callstack 0
  1253                           
  1254                           ; 4 bytes @ 0x2A
  1255  0000AA                     	ds	1
  1256  0000AB                     tirePositioning@startDistanceTop:
  1257                           	opt callstack 0
  1258                           
  1259                           ; 2 bytes @ 0x2B
  1260  0000AB                     	ds	2
  1261  0000AD                     tirePositioning@startDistanceBottom:
  1262                           	opt callstack 0
  1263                           
  1264                           ; 2 bytes @ 0x2D
  1265  0000AD                     	ds	1
  1266  0000AE                     _opErrorCorrectionDegrees$2275:
  1267                           	opt callstack 0
  1268                           
  1269                           ; 4 bytes @ 0x2E
  1270  0000AE                     	ds	1
  1271  0000AF                     tirePositioning@startDistance:
  1272                           	opt callstack 0
  1273                           
  1274                           ; 2 bytes @ 0x2F
  1275  0000AF                     	ds	2
  1276  0000B1                     tirePositioning@topPreviousState:
  1277                           	opt callstack 0
  1278                           
  1279                           ; 2 bytes @ 0x31
  1280  0000B1                     	ds	1
  1281  0000B2                     opErrorCorrectionDegrees@motorBStartDistance:
  1282                           	opt callstack 0
  1283                           
  1284                           ; 2 bytes @ 0x32
  1285  0000B2                     	ds	1
  1286  0000B3                     tirePositioning@bottomPreviousState:
  1287                           	opt callstack 0
  1288                           
  1289                           ; 2 bytes @ 0x33
  1290  0000B3                     	ds	1
  1291  0000B4                     opErrorCorrectionDegrees@motorAStartDistance:
  1292                           	opt callstack 0
  1293                           
  1294                           ; 2 bytes @ 0x34
  1295  0000B4                     	ds	1
  1296  0000B5                     tirePositioning@distanceRecordedTop:
  1297                           	opt callstack 0
  1298                           
  1299                           ; 2 bytes @ 0x35
  1300  0000B5                     	ds	2
  1301  0000B7                     tirePositioning@distanceRecordedBottom:
  1302                           	opt callstack 0
  1303                           
  1304                           ; 2 bytes @ 0x37
  1305  0000B7                     	ds	2
  1306  0000B9                     tirePositioning@topBreakbeam:
  1307                           	opt callstack 0
  1308                           
  1309                           ; 2 bytes @ 0x39
  1310  0000B9                     	ds	2
  1311  0000BB                     tirePositioning@bottomBreakbeam:
  1312                           	opt callstack 0
  1313                           
  1314                           ; 2 bytes @ 0x3B
  1315  0000BB                     	ds	2
  1316  0000BD                     ??_doOperation:
  1317                           
  1318                           ; 1 bytes @ 0x3D
  1319  0000BD                     	ds	4
  1320  0000C1                     ??_main:
  1321                           
  1322                           ; 1 bytes @ 0x41
  1323  0000C1                     	ds	2
  1324  0000C3                     main@time:
  1325                           	opt callstack 0
  1326                           
  1327                           ; 7 bytes @ 0x43
  1328  0000C3                     	ds	7
  1329  0000CA                     main@tick:
  1330                           	opt callstack 0
  1331                           
  1332                           ; 4 bytes @ 0x4A
  1333  0000CA                     	ds	4
  1334  0000CE                     main@keypress:
  1335                           	opt callstack 0
  1336                           
  1337                           ; 1 bytes @ 0x4E
  1338  0000CE                     	ds	1
  1339  0000CF                     main@i:
  1340                           	opt callstack 0
  1341                           
  1342                           ; 1 bytes @ 0x4F
  1343  0000CF                     	ds	1
  1344  0000D0                     main@currentLogState:
  1345                           	opt callstack 0
  1346                           
  1347                           ; 1 bytes @ 0x50
  1348  0000D0                     	ds	1
  1349  0000D1                     main@currentRobotState:
  1350                           	opt callstack 0
  1351                           
  1352                           ; 1 bytes @ 0x51
  1353  0000D1                     	ds	1
  1354  0000D2                     main@keyValue:
  1355                           	opt callstack 0
  1356                           
  1357                           ; 1 bytes @ 0x52
  1358  0000D2                     	ds	1
  1359                           
  1360                           	psect	cstackCOMRAM
  1361  000001                     __pcstackCOMRAM:
  1362                           	opt callstack 0
  1363  000001                     ??_updateMotorBEncoder:
  1364  000001                     ??_updateMotorAEncoder:
  1365  000001                     
  1366                           ; 1 bytes @ 0x0
  1367  000001                     	ds	1
  1368  000002                     updateMotorBEncoder@interruptPinState:
  1369                           	opt callstack 0
  1370  000002                     updateMotorAEncoder@interruptPinState:
  1371                           	opt callstack 0
  1372                           
  1373                           ; 2 bytes @ 0x1
  1374  000002                     	ds	2
  1375  000004                     updateMotorBEncoder@directionPin:
  1376                           	opt callstack 0
  1377  000004                     updateMotorAEncoder@directionPin:
  1378                           	opt callstack 0
  1379                           
  1380                           ; 2 bytes @ 0x3
  1381  000004                     	ds	2
  1382  000006                     ??_I2C_Master_Wait:
  1383  000006                     ?_strlen:
  1384                           	opt callstack 0
  1385  000006                     ?_isupper:
  1386                           	opt callstack 0
  1387  000006                     ?_isalpha:
  1388                           	opt callstack 0
  1389  000006                     ?_isdigit:
  1390                           	opt callstack 0
  1391  000006                     ?_strncmp:
  1392                           	opt callstack 0
  1393  000006                     ?_isspace:
  1394                           	opt callstack 0
  1395  000006                     ?_islower:
  1396                           	opt callstack 0
  1397  000006                     ?___wmul:
  1398                           	opt callstack 0
  1399  000006                     ?___awdiv:
  1400                           	opt callstack 0
  1401  000006                     ?___awmod:
  1402                           	opt callstack 0
  1403  000006                     ?___lldiv:
  1404                           	opt callstack 0
  1405  000006                     ?___llmod:
  1406                           	opt callstack 0
  1407  000006                     ?___xxtofl:
  1408                           	opt callstack 0
  1409  000006                     ?___aodiv:
  1410                           	opt callstack 0
  1411  000006                     ?___aomod:
  1412                           	opt callstack 0
  1413  000006                     ?___lodiv:
  1414                           	opt callstack 0
  1415  000006                     ?___lomod:
  1416                           	opt callstack 0
  1417  000006                     pulse_e@interruptState:
  1418                           	opt callstack 0
  1419  000006                     opDelay@millis:
  1420                           	opt callstack 0
  1421  000006                     replaceOldLog@i:
  1422                           	opt callstack 0
  1423  000006                     ___wmul@multiplier:
  1424                           	opt callstack 0
  1425  000006                     ___awdiv@dividend:
  1426                           	opt callstack 0
  1427  000006                     ___awmod@dividend:
  1428                           	opt callstack 0
  1429  000006                     isalpha@c:
  1430                           	opt callstack 0
  1431  000006                     isdigit@c:
  1432                           	opt callstack 0
  1433  000006                     isspace@c:
  1434                           	opt callstack 0
  1435  000006                     isupper@c:
  1436                           	opt callstack 0
  1437  000006                     strlen@s:
  1438                           	opt callstack 0
  1439  000006                     strncmp@_l:
  1440                           	opt callstack 0
  1441  000006                     islower@c:
  1442                           	opt callstack 0
  1443  000006                     ___lldiv@dividend:
  1444                           	opt callstack 0
  1445  000006                     ___flge@ff1:
  1446                           	opt callstack 0
  1447  000006                     ___llmod@dividend:
  1448                           	opt callstack 0
  1449  000006                     ___xxtofl@val:
  1450                           	opt callstack 0
  1451  000006                     ___aodiv@dividend:
  1452                           	opt callstack 0
  1453  000006                     ___aomod@dividend:
  1454                           	opt callstack 0
  1455  000006                     ___lodiv@dividend:
  1456                           	opt callstack 0
  1457  000006                     ___lomod@dividend:
  1458                           	opt callstack 0
  1459                           
  1460                           ; 8 bytes @ 0x5
  1461  000006                     	ds	1
  1462  000007                     send_nibble@data:
  1463                           	opt callstack 0
  1464  000007                     I2C_Master_Read@ackBit:
  1465                           	opt callstack 0
  1466  000007                     I2C_Master_Write@byteToWrite:
  1467                           	opt callstack 0
  1468                           
  1469                           ; 2 bytes @ 0x6
  1470  000007                     	ds	1
  1471  000008                     ??_isupper:
  1472  000008                     ??_isalpha:
  1473  000008                     ??_isdigit:
  1474  000008                     ??_isspace:
  1475  000008                     ??_islower:
  1476  000008                     send_byte@data:
  1477                           	opt callstack 0
  1478  000008                     I2C_Master_Read@receivedByte:
  1479                           	opt callstack 0
  1480  000008                     ___wmul@multiplicand:
  1481                           	opt callstack 0
  1482  000008                     ___awdiv@divisor:
  1483                           	opt callstack 0
  1484  000008                     ___awmod@divisor:
  1485                           	opt callstack 0
  1486  000008                     strlen@a:
  1487                           	opt callstack 0
  1488  000008                     strncmp@_r:
  1489                           	opt callstack 0
  1490  000008                     opDelay@maxOperationTime:
  1491                           	opt callstack 0
  1492                           
  1493                           ; 4 bytes @ 0x7
  1494  000008                     	ds	1
  1495  000009                     requestIsTireDropDone@data:
  1496                           	opt callstack 0
  1497  000009                     lcdInst@data:
  1498                           	opt callstack 0
  1499  000009                     putch@data:
  1500                           	opt callstack 0
  1501                           
  1502                           ; 1 bytes @ 0x8
  1503  000009                     	ds	1
  1504  00000A                     ??_initLCD:
  1505  00000A                     ??___xxtofl:
  1506  00000A                     ___awdiv@counter:
  1507                           	opt callstack 0
  1508  00000A                     ___awmod@counter:
  1509                           	opt callstack 0
  1510  00000A                     ___wmul@product:
  1511                           	opt callstack 0
  1512  00000A                     fputc@c:
  1513                           	opt callstack 0
  1514  00000A                     strncmp@n:
  1515                           	opt callstack 0
  1516  00000A                     ___lldiv@divisor:
  1517                           	opt callstack 0
  1518  00000A                     ___flge@ff2:
  1519                           	opt callstack 0
  1520  00000A                     ___llmod@divisor:
  1521                           	opt callstack 0
  1522                           
  1523                           ; 4 bytes @ 0x9
  1524  00000A                     	ds	1
  1525  00000B                     ___awdiv@sign:
  1526                           	opt callstack 0
  1527  00000B                     ___awmod@sign:
  1528                           	opt callstack 0
  1529                           
  1530                           ; 1 bytes @ 0xA
  1531  00000B                     	ds	1
  1532  00000C                     ??_strncmp:
  1533  00000C                     ??_opDelay:
  1534  00000C                     ?_toupper:
  1535                           	opt callstack 0
  1536  00000C                     _isspace$1896:
  1537                           	opt callstack 0
  1538  00000C                     ___awdiv@quotient:
  1539                           	opt callstack 0
  1540  00000C                     fputc@fp:
  1541                           	opt callstack 0
  1542  00000C                     toupper@c:
  1543                           	opt callstack 0
  1544                           
  1545                           ; 2 bytes @ 0xB
  1546  00000C                     	ds	1
  1547  00000D                     ?_atoi:
  1548                           	opt callstack 0
  1549  00000D                     atoi@s:
  1550                           	opt callstack 0
  1551  00000D                     strncmp@l:
  1552                           	opt callstack 0
  1553                           
  1554                           ; 2 bytes @ 0xC
  1555  00000D                     	ds	1
  1556  00000E                     ??_fputc:
  1557  00000E                     ??_toupper:
  1558  00000E                     ??___flge:
  1559  00000E                     ___llmod@counter:
  1560                           	opt callstack 0
  1561  00000E                     ___xxtofl@sign:
  1562                           	opt callstack 0
  1563  00000E                     ___lldiv@quotient:
  1564                           	opt callstack 0
  1565  00000E                     ___aodiv@divisor:
  1566                           	opt callstack 0
  1567  00000E                     ___aomod@divisor:
  1568                           	opt callstack 0
  1569  00000E                     ___lodiv@divisor:
  1570                           	opt callstack 0
  1571  00000E                     ___lomod@divisor:
  1572                           	opt callstack 0
  1573                           
  1574                           ; 8 bytes @ 0xD
  1575  00000E                     	ds	1
  1576  00000F                     ??_atoi:
  1577  00000F                     ___xxtofl@exp:
  1578                           	opt callstack 0
  1579  00000F                     strncmp@r:
  1580                           	opt callstack 0
  1581                           
  1582                           ; 2 bytes @ 0xE
  1583  00000F                     	ds	1
  1584  000010                     ___xxtofl@arg:
  1585                           	opt callstack 0
  1586                           
  1587                           ; 4 bytes @ 0xF
  1588  000010                     	ds	2
  1589  000012                     ___lldiv@counter:
  1590                           	opt callstack 0
  1591  000012                     _toupper$1966:
  1592                           	opt callstack 0
  1593                           
  1594                           ; 2 bytes @ 0x11
  1595  000012                     	ds	1
  1596  000013                     ?_stoa:
  1597                           	opt callstack 0
  1598  000013                     stoa@fp:
  1599                           	opt callstack 0
  1600  000013                     atoi@neg:
  1601                           	opt callstack 0
  1602  000013                     fputs@s:
  1603                           	opt callstack 0
  1604  000013                     I2C_Master_Init@clockFreq:
  1605                           	opt callstack 0
  1606                           
  1607                           ; 4 bytes @ 0x12
  1608  000013                     	ds	1
  1609  000014                     ?___flmul:
  1610                           	opt callstack 0
  1611  000014                     opDelay@startTime:
  1612                           	opt callstack 0
  1613  000014                     ___flmul@b:
  1614                           	opt callstack 0
  1615                           
  1616                           ; 4 bytes @ 0x13
  1617  000014                     	ds	1
  1618  000015                     stoa@s:
  1619                           	opt callstack 0
  1620  000015                     _atoi$1869:
  1621                           	opt callstack 0
  1622  000015                     fputs@fp:
  1623                           	opt callstack 0
  1624                           
  1625                           ; 2 bytes @ 0x14
  1626  000015                     	ds	1
  1627  000016                     ___aodiv@counter:
  1628                           	opt callstack 0
  1629  000016                     ___aomod@counter:
  1630                           	opt callstack 0
  1631  000016                     ___lomod@counter:
  1632                           	opt callstack 0
  1633  000016                     ___lodiv@quotient:
  1634                           	opt callstack 0
  1635                           
  1636                           ; 8 bytes @ 0x15
  1637  000016                     	ds	1
  1638  000017                     ??_I2C_Master_Init:
  1639  000017                     ??_stoa:
  1640  000017                     ___aodiv@sign:
  1641                           	opt callstack 0
  1642  000017                     ___aomod@sign:
  1643                           	opt callstack 0
  1644  000017                     fputs@c:
  1645                           	opt callstack 0
  1646  000017                     _atoi$1871:
  1647                           	opt callstack 0
  1648                           
  1649                           ; 2 bytes @ 0x16
  1650  000017                     	ds	1
  1651  000018                     ?_abs:
  1652                           	opt callstack 0
  1653  000018                     abs@a:
  1654                           	opt callstack 0
  1655  000018                     fputs@i:
  1656                           	opt callstack 0
  1657  000018                     ___flmul@a:
  1658                           	opt callstack 0
  1659  000018                     stoa@nuls:
  1660                           	opt callstack 0
  1661  000018                     ___aodiv@quotient:
  1662                           	opt callstack 0
  1663                           
  1664                           ; 8 bytes @ 0x17
  1665  000018                     	ds	1
  1666  000019                     _atoi$1870:
  1667                           	opt callstack 0
  1668                           
  1669                           ; 1 bytes @ 0x18
  1670  000019                     	ds	1
  1671  00001A                     ??_abs:
  1672  00001A                     ?_pad:
  1673                           	opt callstack 0
  1674  00001A                     pad@fp:
  1675                           	opt callstack 0
  1676  00001A                     atoi@n:
  1677                           	opt callstack 0
  1678                           
  1679                           ; 2 bytes @ 0x19
  1680  00001A                     	ds	1
  1681  00001B                     
  1682                           ; 1 bytes @ 0x1A
  1683  00001B                     	ds	1
  1684  00001C                     ??___flmul:
  1685  00001C                     pad@buf:
  1686                           	opt callstack 0
  1687                           
  1688                           ; 2 bytes @ 0x1B
  1689  00001C                     	ds	2
  1690  00001E                     ___lodiv@counter:
  1691                           	opt callstack 0
  1692  00001E                     pad@p:
  1693                           	opt callstack 0
  1694                           
  1695                           ; 2 bytes @ 0x1D
  1696  00001E                     	ds	1
  1697  00001F                     stoa@i:
  1698                           	opt callstack 0
  1699                           
  1700                           ; 2 bytes @ 0x1E
  1701  00001F                     	ds	1
  1702  000020                     ??_pad:
  1703  000020                     ___flmul@sign:
  1704                           	opt callstack 0
  1705                           
  1706                           ; 1 bytes @ 0x1F
  1707  000020                     	ds	1
  1708  000021                     ___flmul@aexp:
  1709                           	opt callstack 0
  1710  000021                     pad@i:
  1711                           	opt callstack 0
  1712  000021                     stoa@w:
  1713                           	opt callstack 0
  1714                           
  1715                           ; 2 bytes @ 0x20
  1716  000021                     	ds	1
  1717  000022                     ___flmul@grs:
  1718                           	opt callstack 0
  1719                           
  1720                           ; 4 bytes @ 0x21
  1721  000022                     	ds	1
  1722  000023                     pad@w:
  1723                           	opt callstack 0
  1724  000023                     stoa@cp:
  1725                           	opt callstack 0
  1726                           
  1727                           ; 2 bytes @ 0x22
  1728  000023                     	ds	2
  1729  000025                     ?_ctoa:
  1730                           	opt callstack 0
  1731  000025                     ?_dtoa:
  1732                           	opt callstack 0
  1733  000025                     ?_utoa:
  1734                           	opt callstack 0
  1735  000025                     ?_xtoa:
  1736                           	opt callstack 0
  1737  000025                     ctoa@fp:
  1738                           	opt callstack 0
  1739  000025                     dtoa@fp:
  1740                           	opt callstack 0
  1741  000025                     stoa@p:
  1742                           	opt callstack 0
  1743  000025                     utoa@fp:
  1744                           	opt callstack 0
  1745  000025                     xtoa@fp:
  1746                           	opt callstack 0
  1747                           
  1748                           ; 2 bytes @ 0x24
  1749  000025                     	ds	1
  1750  000026                     ___flmul@bexp:
  1751                           	opt callstack 0
  1752                           
  1753                           ; 1 bytes @ 0x25
  1754  000026                     	ds	1
  1755  000027                     ctoa@c:
  1756                           	opt callstack 0
  1757  000027                     stoa@l:
  1758                           	opt callstack 0
  1759  000027                     ___flmul@prod:
  1760                           	opt callstack 0
  1761  000027                     dtoa@d:
  1762                           	opt callstack 0
  1763  000027                     utoa@d:
  1764                           	opt callstack 0
  1765  000027                     xtoa@d:
  1766                           	opt callstack 0
  1767                           
  1768                           ; 8 bytes @ 0x26
  1769  000027                     	ds	1
  1770  000028                     ctoa@w:
  1771                           	opt callstack 0
  1772                           
  1773                           ; 2 bytes @ 0x27
  1774  000028                     	ds	3
  1775  00002B                     ___flmul@temp:
  1776                           	opt callstack 0
  1777                           
  1778                           ; 2 bytes @ 0x2A
  1779  00002B                     	ds	2
  1780  00002D                     ?___fladd:
  1781                           	opt callstack 0
  1782  00002D                     ?___fldiv:
  1783                           	opt callstack 0
  1784  00002D                     ___fladd@b:
  1785                           	opt callstack 0
  1786  00002D                     ___fldiv@b:
  1787                           	opt callstack 0
  1788                           
  1789                           ; 4 bytes @ 0x2C
  1790  00002D                     	ds	2
  1791  00002F                     ??_dtoa:
  1792  00002F                     ??_utoa:
  1793  00002F                     xtoa@x:
  1794                           	opt callstack 0
  1795                           
  1796                           ; 1 bytes @ 0x2E
  1797  00002F                     	ds	1
  1798  000030                     ??_xtoa:
  1799                           
  1800                           ; 1 bytes @ 0x2F
  1801  000030                     	ds	1
  1802  000031                     ___fladd@a:
  1803                           	opt callstack 0
  1804  000031                     ___fldiv@a:
  1805                           	opt callstack 0
  1806                           
  1807                           ; 4 bytes @ 0x30
  1808  000031                     	ds	4
  1809  000035                     ??___fladd:
  1810  000035                     ??___fldiv:
  1811                           
  1812                           ; 1 bytes @ 0x34
  1813  000035                     	ds	2
  1814  000037                     _dtoa$1342:
  1815                           	opt callstack 0
  1816  000037                     utoa@p:
  1817                           	opt callstack 0
  1818                           
  1819                           ; 2 bytes @ 0x36
  1820  000037                     	ds	1
  1821  000038                     _xtoa$1370:
  1822                           	opt callstack 0
  1823                           
  1824                           ; 2 bytes @ 0x37
  1825  000038                     	ds	1
  1826  000039                     ___fladd@signs:
  1827                           	opt callstack 0
  1828  000039                     dtoa@p:
  1829                           	opt callstack 0
  1830  000039                     utoa@w:
  1831                           	opt callstack 0
  1832  000039                     ___fldiv@rem:
  1833                           	opt callstack 0
  1834                           
  1835                           ; 4 bytes @ 0x38
  1836  000039                     	ds	1
  1837  00003A                     ___fladd@aexp:
  1838                           	opt callstack 0
  1839  00003A                     _xtoa$1371:
  1840                           	opt callstack 0
  1841                           
  1842                           ; 2 bytes @ 0x39
  1843  00003A                     	ds	1
  1844  00003B                     ___fladd@bexp:
  1845                           	opt callstack 0
  1846  00003B                     dtoa@w:
  1847                           	opt callstack 0
  1848  00003B                     utoa@n:
  1849                           	opt callstack 0
  1850                           
  1851                           ; 8 bytes @ 0x3A
  1852  00003B                     	ds	1
  1853  00003C                     ___fladd@grs:
  1854                           	opt callstack 0
  1855  00003C                     xtoa@p:
  1856                           	opt callstack 0
  1857                           
  1858                           ; 2 bytes @ 0x3B
  1859  00003C                     	ds	1
  1860  00003D                     ___fldiv@sign:
  1861                           	opt callstack 0
  1862  00003D                     dtoa@s:
  1863                           	opt callstack 0
  1864                           
  1865                           ; 2 bytes @ 0x3C
  1866  00003D                     	ds	1
  1867  00003E                     xtoa@w:
  1868                           	opt callstack 0
  1869  00003E                     ___fldiv@new_exp:
  1870                           	opt callstack 0
  1871                           
  1872                           ; 2 bytes @ 0x3D
  1873  00003E                     	ds	1
  1874  00003F                     dtoa@n:
  1875                           	opt callstack 0
  1876                           
  1877                           ; 8 bytes @ 0x3E
  1878  00003F                     	ds	1
  1879  000040                     ___fldiv@grs:
  1880                           	opt callstack 0
  1881  000040                     xtoa@n:
  1882                           	opt callstack 0
  1883                           
  1884                           ; 8 bytes @ 0x3F
  1885  000040                     	ds	3
  1886  000043                     utoa@i:
  1887                           	opt callstack 0
  1888                           
  1889                           ; 2 bytes @ 0x42
  1890  000043                     	ds	1
  1891  000044                     ___fldiv@bexp:
  1892                           	opt callstack 0
  1893                           
  1894                           ; 1 bytes @ 0x43
  1895  000044                     	ds	1
  1896  000045                     ___fldiv@aexp:
  1897                           	opt callstack 0
  1898                           
  1899                           ; 1 bytes @ 0x44
  1900  000045                     	ds	1
  1901  000046                     ?___flsub:
  1902                           	opt callstack 0
  1903  000046                     ___flsub@b:
  1904                           	opt callstack 0
  1905                           
  1906                           ; 4 bytes @ 0x45
  1907  000046                     	ds	1
  1908  000047                     dtoa@i:
  1909                           	opt callstack 0
  1910                           
  1911                           ; 2 bytes @ 0x46
  1912  000047                     	ds	1
  1913  000048                     xtoa@i:
  1914                           	opt callstack 0
  1915                           
  1916                           ; 2 bytes @ 0x47
  1917  000048                     	ds	2
  1918  00004A                     xtoa@c:
  1919                           	opt callstack 0
  1920  00004A                     ___flsub@a:
  1921                           	opt callstack 0
  1922                           
  1923                           ; 4 bytes @ 0x49
  1924  00004A                     	ds	2
  1925  00004C                     ?_vfpfcnvrt:
  1926                           	opt callstack 0
  1927  00004C                     vfpfcnvrt@fp:
  1928                           	opt callstack 0
  1929                           
  1930                           ; 2 bytes @ 0x4B
  1931  00004C                     	ds	2
  1932  00004E                     ?___fltol:
  1933                           	opt callstack 0
  1934  00004E                     vfpfcnvrt@fmt:
  1935                           	opt callstack 0
  1936  00004E                     ___fltol@f1:
  1937                           	opt callstack 0
  1938                           
  1939                           ; 4 bytes @ 0x4D
  1940  00004E                     	ds	2
  1941  000050                     vfpfcnvrt@ap:
  1942                           	opt callstack 0
  1943                           
  1944                           ; 2 bytes @ 0x4F
  1945  000050                     	ds	2
  1946  000052                     ??_vfpfcnvrt:
  1947  000052                     ??___fltol:
  1948                           
  1949                           ; 1 bytes @ 0x51
  1950  000052                     	ds	4
  1951  000056                     ___fltol@sign1:
  1952                           	opt callstack 0
  1953                           
  1954                           ; 1 bytes @ 0x55
  1955  000056                     	ds	1
  1956  000057                     ___fltol@exp1:
  1957                           	opt callstack 0
  1958                           
  1959                           ; 1 bytes @ 0x56
  1960  000057                     	ds	1
  1961  000058                     set_pwm_duty_cycle@dutyA:
  1962                           	opt callstack 0
  1963                           
  1964                           ; 4 bytes @ 0x57
  1965  000058                     	ds	4
  1966  00005C                     set_pwm_duty_cycle@dutyB:
  1967                           	opt callstack 0
  1968                           
  1969                           ; 4 bytes @ 0x5B
  1970  00005C                     	ds	4
  1971  000060                     ??_set_pwm_duty_cycle:
  1972  000060                     vfprintf@cfmt:
  1973                           	opt callstack 0
  1974                           
  1975                           ; 2 bytes @ 0x5F
  1976  000060                     	ds	2
  1977  000062                     set_pwm_duty_cycle@max_duty_val:
  1978                           	opt callstack 0
  1979                           
  1980                           ; 2 bytes @ 0x61
  1981  000062                     	ds	2
  1982  000064                     set_pwm_duty_cycle@duty_valA:
  1983                           	opt callstack 0
  1984  000064                     printf@ap:
  1985                           	opt callstack 0
  1986                           
  1987                           ; 2 bytes @ 0x63
  1988  000064                     	ds	2
  1989  000066                     ??_doDisplayLog:
  1990  000066                     set_pwm_duty_cycle@duty_valB:
  1991                           	opt callstack 0
  1992                           
  1993                           ; 2 bytes @ 0x65
  1994  000066                     	ds	2
  1995  000068                     _set_pwm_duty_cycle$2271:
  1996                           	opt callstack 0
  1997                           
  1998                           ; 4 bytes @ 0x67
  1999  000068                     	ds	2
  2000  00006A                     doDisplayLog@keypress:
  2001                           	opt callstack 0
  2002                           
  2003                           ; 1 bytes @ 0x69
  2004  00006A                     	ds	1
  2005  00006B                     doDisplayLog@currentDisplayState:
  2006                           	opt callstack 0
  2007                           
  2008                           ; 1 bytes @ 0x6A
  2009  00006B                     	ds	1
  2010  00006C                     doDisplayLog@keyValue:
  2011                           	opt callstack 0
  2012  00006C                     setMotorSpeeds@motorASpeed:
  2013                           	opt callstack 0
  2014                           
  2015                           ; 2 bytes @ 0x6B
  2016  00006C                     	ds	1
  2017  00006D                     doDisplayLog@currentPole:
  2018                           	opt callstack 0
  2019                           
  2020                           ; 2 bytes @ 0x6C
  2021  00006D                     	ds	1
  2022  00006E                     setMotorSpeeds@Aforward:
  2023                           	opt callstack 0
  2024                           
  2025                           ; 1 bytes @ 0x6D
  2026  00006E                     	ds	1
  2027  00006F                     setMotorSpeeds@Bforward:
  2028                           	opt callstack 0
  2029  00006F                     _doDisplayLog$2270:
  2030                           	opt callstack 0
  2031                           
  2032                           ; 2 bytes @ 0x6E
  2033  00006F                     	ds	1
  2034  000070                     setMotorSpeeds@motorBSpeed:
  2035                           	opt callstack 0
  2036                           
  2037                           ; 2 bytes @ 0x6F
  2038  000070                     	ds	2
  2039  000072                     ??_tirePositioning:
  2040  000072                     ??_opErrorCorrectionDegrees:
  2041                           
  2042                           ; 1 bytes @ 0x71
  2043  000072                     	ds	3
  2044                           
  2045 ;;
  2046 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2047 ;;
  2048 ;; *************** function _main *****************
  2049 ;; Defined at:
  2050 ;;		line 1036 in file "main.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;		None
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  i               1   79[BANK0 ] unsigned char 
  2055 ;;  keyValue        1   82[BANK0 ] unsigned char 
  2056 ;;  keypress        1   78[BANK0 ] unsigned char 
  2057 ;;  time            7   67[BANK0 ] unsigned char [7]
  2058 ;;  tick            4   74[BANK0 ] unsigned long 
  2059 ;;  currentRobot    1   81[BANK0 ] enum E3411
  2060 ;;  currentLogSt    1   80[BANK0 ] enum E3418
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;Total ram usage:       18 bytes
  2075 ;; Hardware stack levels required when called:   15
  2076 ;; This function calls:
  2077 ;;		_I2C_Master_Read
  2078 ;;		_I2C_Master_Start
  2079 ;;		_I2C_Master_Stop
  2080 ;;		_I2C_Master_Write
  2081 ;;		___llmod
  2082 ;;		_doDisplayLog
  2083 ;;		_doOperation
  2084 ;;		_lcdInst
  2085 ;;		_printf
  2086 ;;		_replaceOldLog
  2087 ;;		_robotInit
  2088 ;; This function is called by:
  2089 ;;		Startup code after reset
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text0
  2094  000DBC                     __ptext0:
  2095                           	opt callstack 0
  2096  000DBC                     _main:
  2097                           	opt callstack 16
  2098                           
  2099                           ;main.c: 1037:     robotInit();
  2100                           
  2101                           ;incstack = 0
  2102  000DBC  EC16  F01F         	call	_robotInit	;wreg free
  2103                           
  2104                           ;main.c: 1040:     unsigned char time[7];;main.c: 1047:     enum robotStates currentRobo
      +                          tState = standby;
  2105  000DC0  0E00               	movlw	0
  2106  000DC2  0100               	movlb	0	; () banked
  2107  000DC4  6FD1               	movwf	main@currentRobotState& (0+255),b
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;main.c: 1049:     enum logStates currentLogState = one;
  2111  000DC6  0E01               	movlw	1
  2112  000DC8  6FD0               	movwf	main@currentLogState& (0+255),b
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;main.c: 1051:     unsigned long tick = 0ul;
  2116  000DCA  0E00               	movlw	0
  2117  000DCC  6FCA               	movwf	main@tick& (0+255),b
  2118  000DCE  0E00               	movlw	0
  2119  000DD0  6FCB               	movwf	(main@tick+1)& (0+255),b
  2120  000DD2  0E00               	movlw	0
  2121  000DD4  6FCC               	movwf	(main@tick+2)& (0+255),b
  2122  000DD6  0E00               	movlw	0
  2123  000DD8  6FCD               	movwf	(main@tick+3)& (0+255),b
  2124  000DDA                     l9226:
  2125                           
  2126                           ;main.c: 1054:             if (tick%10ul==0){
  2127  000DDA  C0CA  F006         	movff	main@tick,___llmod@dividend
  2128  000DDE  C0CB  F007         	movff	main@tick+1,___llmod@dividend+1
  2129  000DE2  C0CC  F008         	movff	main@tick+2,___llmod@dividend+2
  2130  000DE6  C0CD  F009         	movff	main@tick+3,___llmod@dividend+3
  2131  000DEA  0E0A               	movlw	10
  2132  000DEC  6E0A               	movwf	___llmod@divisor,c
  2133  000DEE  0E00               	movlw	0
  2134  000DF0  6E0B               	movwf	___llmod@divisor+1,c
  2135  000DF2  0E00               	movlw	0
  2136  000DF4  6E0C               	movwf	___llmod@divisor+2,c
  2137  000DF6  0E00               	movlw	0
  2138  000DF8  6E0D               	movwf	___llmod@divisor+3,c
  2139  000DFA  EC3A  F01D         	call	___llmod	;wreg free
  2140  000DFE  5006               	movf	?___llmod,w,c
  2141  000E00  1007               	iorwf	?___llmod+1,w,c
  2142  000E02  1008               	iorwf	?___llmod+2,w,c
  2143  000E04  1009               	iorwf	?___llmod+3,w,c
  2144  000E06  A4D8               	btfss	status,2,c
  2145  000E08  D150               	goto	l9332
  2146                           
  2147                           ;main.c: 1056:                 I2C_Master_Start();
  2148  000E0A  ECE8  F020         	call	_I2C_Master_Start	;wreg free
  2149                           
  2150                           ;main.c: 1057:                 I2C_Master_Write(0b11010000);
  2151  000E0E  0E00               	movlw	0
  2152  000E10  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  2153  000E12  0ED0               	movlw	208
  2154  000E14  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  2155  000E16  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  2156                           
  2157                           ;main.c: 1058:                 I2C_Master_Write(0x00);
  2158  000E1A  0E00               	movlw	0
  2159  000E1C  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  2160  000E1E  0E00               	movlw	0
  2161  000E20  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  2162  000E22  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  2163                           
  2164                           ;main.c: 1059:                 I2C_Master_Stop();
  2165  000E26  ECE4  F020         	call	_I2C_Master_Stop	;wreg free
  2166                           
  2167                           ;main.c: 1062:                 I2C_Master_Start();
  2168  000E2A  ECE8  F020         	call	_I2C_Master_Start	;wreg free
  2169                           
  2170                           ;main.c: 1063:                 I2C_Master_Write(0b11010001);
  2171  000E2E  0E00               	movlw	0
  2172  000E30  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  2173  000E32  0ED1               	movlw	209
  2174  000E34  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  2175  000E36  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  2176                           
  2177                           ;main.c: 1064:                 for(unsigned char i = 0; i < 6; i++){
  2178  000E3A  0E00               	movlw	0
  2179  000E3C  0100               	movlb	0	; () banked
  2180  000E3E  6FCF               	movwf	main@i& (0+255),b
  2181  000E40                     l9236:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;main.c: 1065:                     time[i] = I2C_Master_Read(0);
  2185  000E40  0EC3               	movlw	low main@time
  2186  000E42  25CF               	addwf	main@i& (0+255),w,b
  2187  000E44  6ED9               	movwf	fsr2l,c
  2188  000E46  6ADA               	clrf	fsr2h,c
  2189  000E48  0E00               	movlw	high main@time
  2190  000E4A  22DA               	addwfc	fsr2h,f,c
  2191  000E4C  0E00               	movlw	0
  2192  000E4E  EC52  F020         	call	_I2C_Master_Read
  2193  000E52  6EDF               	movwf	indf2,c
  2194                           
  2195                           ;main.c: 1066:                 }
  2196  000E54  0100               	movlb	0	; () banked
  2197  000E56  2BCF               	incf	main@i& (0+255),f,b
  2198                           
  2199                           ; BSR set to: 0
  2200  000E58  0E05               	movlw	5
  2201  000E5A  65CF               	cpfsgt	main@i& (0+255),b
  2202  000E5C  D7F1               	goto	l9236
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;main.c: 1067:                 time[6] = I2C_Master_Read(1);
  2206  000E5E  0E01               	movlw	1
  2207  000E60  EC52  F020         	call	_I2C_Master_Read
  2208  000E64  0100               	movlb	0	; () banked
  2209  000E66  6FC9               	movwf	(main@time+6)& (0+255),b
  2210                           
  2211                           ;main.c: 1068:                 I2C_Master_Stop();
  2212  000E68  ECE4  F020         	call	_I2C_Master_Stop	;wreg free
  2213  000E6C  D11E               	goto	l9332
  2214  000E6E                     l9244:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 1081:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/400
      +                          0.0)));};
  2218  000E6E  0E80               	movlw	128
  2219  000E70  ECD5  F020         	call	_lcdInst
  2220  000E74  0E07               	movlw	7
  2221  000E76  0100               	movlb	0	; () banked
  2222  000E78  6FC1               	movwf	??_main& (0+255),b
  2223  000E7A  0E7D               	movlw	125
  2224  000E7C                     u10897:
  2225  000E7C  2EE8               	decfsz	wreg,f,c
  2226  000E7E  D7FE               	bra	u10897
  2227  000E80  2FC1               	decfsz	??_main& (0+255),f,b
  2228  000E82  D7FC               	bra	u10897
  2229                           
  2230                           ;main.c: 1083:                 printf("%s", "WELCOME ");
  2231  000E84  0ED7               	movlw	low (STR_1+4)
  2232  000E86  0100               	movlb	0	; () banked
  2233  000E88  6F9D               	movwf	printf@fmt& (0+255),b
  2234  000E8A  0EFF               	movlw	high (STR_1+4)
  2235  000E8C  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2236  000E8E  0EAF               	movlw	low STR_28
  2237  000E90  6F9F               	movwf	(?_printf+2)& (0+255),b
  2238  000E92  0EFF               	movlw	high STR_28
  2239  000E94  6FA0               	movwf	(?_printf+3)& (0+255),b
  2240  000E96  EC2B  F020         	call	_printf	;wreg free
  2241                           
  2242                           ;main.c: 1084:                 printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  2243  000E9A  0EB6               	movlw	low STR_29
  2244  000E9C  0100               	movlb	0	; () banked
  2245  000E9E  6F9D               	movwf	printf@fmt& (0+255),b
  2246  000EA0  0EFE               	movlw	high STR_29
  2247  000EA2  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2248  000EA4  C0C9  F09F         	movff	main@time+6,?_printf+2
  2249  000EA8  6BA0               	clrf	(?_printf+3)& (0+255),b
  2250  000EAA  C0C8  F0A1         	movff	main@time+5,?_printf+4
  2251  000EAE  6BA2               	clrf	(?_printf+5)& (0+255),b
  2252  000EB0  C0C7  F0A3         	movff	main@time+4,?_printf+6
  2253  000EB4  6BA4               	clrf	(?_printf+7)& (0+255),b
  2254  000EB6  EC2B  F020         	call	_printf	;wreg free
  2255  000EBA  0EC0               	movlw	192
  2256  000EBC  ECD5  F020         	call	_lcdInst
  2257                           
  2258                           ;main.c: 1086:                 printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2259  000EC0  0EC5               	movlw	low STR_30
  2260  000EC2  0100               	movlb	0	; () banked
  2261  000EC4  6F9D               	movwf	printf@fmt& (0+255),b
  2262  000EC6  0EFE               	movlw	high STR_30
  2263  000EC8  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2264  000ECA  C0C5  F09F         	movff	main@time+2,?_printf+2
  2265  000ECE  6BA0               	clrf	(?_printf+3)& (0+255),b
  2266  000ED0  C0C4  F0A1         	movff	main@time+1,?_printf+4
  2267  000ED4  6BA2               	clrf	(?_printf+5)& (0+255),b
  2268  000ED6  C0C3  F0A3         	movff	main@time,?_printf+6
  2269  000EDA  6BA4               	clrf	(?_printf+7)& (0+255),b
  2270  000EDC  EC2B  F020         	call	_printf	;wreg free
  2271  000EE0  0E90               	movlw	144
  2272  000EE2  ECD5  F020         	call	_lcdInst
  2273                           
  2274                           ;main.c: 1088:                 printf("%s","(1) START");
  2275  000EE6  0ED7               	movlw	low (STR_1+4)
  2276  000EE8  0100               	movlb	0	; () banked
  2277  000EEA  6F9D               	movwf	printf@fmt& (0+255),b
  2278  000EEC  0EFF               	movlw	high (STR_1+4)
  2279  000EEE  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2280  000EF0  0E9B               	movlw	low STR_32
  2281  000EF2  6F9F               	movwf	(?_printf+2)& (0+255),b
  2282  000EF4  0EFF               	movlw	high STR_32
  2283  000EF6  6FA0               	movwf	(?_printf+3)& (0+255),b
  2284  000EF8  EC2B  F020         	call	_printf	;wreg free
  2285  000EFC  0ED0               	movlw	208
  2286  000EFE  ECD5  F020         	call	_lcdInst
  2287                           
  2288                           ;main.c: 1090:                 printf("%s","(2) VIEW LOGS");
  2289  000F02  0ED7               	movlw	low (STR_1+4)
  2290  000F04  0100               	movlb	0	; () banked
  2291  000F06  6F9D               	movwf	printf@fmt& (0+255),b
  2292  000F08  0EFF               	movlw	high (STR_1+4)
  2293  000F0A  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2294  000F0C  0EFE               	movlw	low STR_34
  2295  000F0E  6F9F               	movwf	(?_printf+2)& (0+255),b
  2296  000F10  0EFE               	movlw	high STR_34
  2297  000F12  6FA0               	movwf	(?_printf+3)& (0+255),b
  2298  000F14  EC2B  F020         	call	_printf	;wreg free
  2299                           
  2300                           ;main.c: 1091:                 break;
  2301  000F18  D0E0               	goto	l9334
  2302  000F1A                     l9264:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;main.c: 1094:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/400
      +                          0.0)));};
  2306  000F1A  0E80               	movlw	128
  2307  000F1C  ECD5  F020         	call	_lcdInst
  2308  000F20  0E07               	movlw	7
  2309  000F22  0100               	movlb	0	; () banked
  2310  000F24  6FC1               	movwf	??_main& (0+255),b
  2311  000F26  0E7D               	movlw	125
  2312  000F28                     u10907:
  2313  000F28  2EE8               	decfsz	wreg,f,c
  2314  000F2A  D7FE               	bra	u10907
  2315  000F2C  2FC1               	decfsz	??_main& (0+255),f,b
  2316  000F2E  D7FC               	bra	u10907
  2317                           
  2318                           ;main.c: 1095:                 printf("%s", "OPERATION IN");
  2319  000F30  0ED7               	movlw	low (STR_1+4)
  2320  000F32  0100               	movlb	0	; () banked
  2321  000F34  6F9D               	movwf	printf@fmt& (0+255),b
  2322  000F36  0EFF               	movlw	high (STR_1+4)
  2323  000F38  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2324  000F3A  0E34               	movlw	low STR_36
  2325  000F3C  6F9F               	movwf	(?_printf+2)& (0+255),b
  2326  000F3E  0EFF               	movlw	high STR_36
  2327  000F40  6FA0               	movwf	(?_printf+3)& (0+255),b
  2328  000F42  EC2B  F020         	call	_printf	;wreg free
  2329  000F46  0EC0               	movlw	192
  2330  000F48  ECD5  F020         	call	_lcdInst
  2331                           
  2332                           ;main.c: 1097:                 printf("%s","PROGRESS");
  2333  000F4C  0ED7               	movlw	low (STR_1+4)
  2334  000F4E  0100               	movlb	0	; () banked
  2335  000F50  6F9D               	movwf	printf@fmt& (0+255),b
  2336  000F52  0EFF               	movlw	high (STR_1+4)
  2337  000F54  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2338  000F56  0EC1               	movlw	low STR_38
  2339  000F58  6F9F               	movwf	(?_printf+2)& (0+255),b
  2340  000F5A  0EFF               	movlw	high STR_38
  2341  000F5C  6FA0               	movwf	(?_printf+3)& (0+255),b
  2342  000F5E  EC2B  F020         	call	_printf	;wreg free
  2343                           
  2344                           ;main.c: 1098:                 doOperation();
  2345  000F62  EC0A  F004         	call	_doOperation	;wreg free
  2346                           
  2347                           ;main.c: 1099:                 { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/400
      +                          0.0)));};
  2348  000F66  0E01               	movlw	1
  2349  000F68  ECD5  F020         	call	_lcdInst
  2350  000F6C  0E11               	movlw	17
  2351  000F6E  0100               	movlb	0	; () banked
  2352  000F70  6FC1               	movwf	??_main& (0+255),b
  2353  000F72  0E3A               	movlw	58
  2354  000F74                     u10917:
  2355  000F74  2EE8               	decfsz	wreg,f,c
  2356  000F76  D7FE               	bra	u10917
  2357  000F78  2FC1               	decfsz	??_main& (0+255),f,b
  2358  000F7A  D7FC               	bra	u10917
  2359  000F7C  F000               	nop	
  2360                           
  2361                           ;main.c: 1100:                 currentRobotState = operationComplete;
  2362  000F7E  0E02               	movlw	2
  2363  000F80  D091               	goto	L1
  2364  000F82                     l9282:
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;main.c: 1106:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/400
      +                          0.0)));};
  2368  000F82  0E80               	movlw	128
  2369  000F84  ECD5  F020         	call	_lcdInst
  2370  000F88  0E07               	movlw	7
  2371  000F8A  0100               	movlb	0	; () banked
  2372  000F8C  6FC1               	movwf	??_main& (0+255),b
  2373  000F8E  0E7D               	movlw	125
  2374  000F90                     u10927:
  2375  000F90  2EE8               	decfsz	wreg,f,c
  2376  000F92  D7FE               	bra	u10927
  2377  000F94  2FC1               	decfsz	??_main& (0+255),f,b
  2378  000F96  D7FC               	bra	u10927
  2379                           
  2380                           ;main.c: 1107:                 printf("%s", "OP. COMPLETE");
  2381  000F98  0ED7               	movlw	low (STR_1+4)
  2382  000F9A  0100               	movlb	0	; () banked
  2383  000F9C  6F9D               	movwf	printf@fmt& (0+255),b
  2384  000F9E  0EFF               	movlw	high (STR_1+4)
  2385  000FA0  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2386  000FA2  0E1A               	movlw	low STR_40
  2387  000FA4  6F9F               	movwf	(?_printf+2)& (0+255),b
  2388  000FA6  0EFF               	movlw	high STR_40
  2389  000FA8  6FA0               	movwf	(?_printf+3)& (0+255),b
  2390  000FAA  EC2B  F020         	call	_printf	;wreg free
  2391  000FAE  0EC0               	movlw	192
  2392  000FB0  ECD5  F020         	call	_lcdInst
  2393                           
  2394                           ;main.c: 1109:                 printf("%s","(1) VIEW LOG");
  2395  000FB4  0ED7               	movlw	low (STR_1+4)
  2396  000FB6  0100               	movlb	0	; () banked
  2397  000FB8  6F9D               	movwf	printf@fmt& (0+255),b
  2398  000FBA  0EFF               	movlw	high (STR_1+4)
  2399  000FBC  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2400  000FBE  0E27               	movlw	low STR_42
  2401  000FC0  6F9F               	movwf	(?_printf+2)& (0+255),b
  2402  000FC2  0EFF               	movlw	high STR_42
  2403  000FC4  6FA0               	movwf	(?_printf+3)& (0+255),b
  2404  000FC6  EC2B  F020         	call	_printf	;wreg free
  2405  000FCA  0E90               	movlw	144
  2406  000FCC  ECD5  F020         	call	_lcdInst
  2407                           
  2408                           ;main.c: 1111:                 printf("%s","(2) QUIT DO NOT");
  2409  000FD0  0ED7               	movlw	low (STR_1+4)
  2410  000FD2  0100               	movlb	0	; () banked
  2411  000FD4  6F9D               	movwf	printf@fmt& (0+255),b
  2412  000FD6  0EFF               	movlw	high (STR_1+4)
  2413  000FD8  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2414  000FDA  0E97               	movlw	low STR_44
  2415  000FDC  6F9F               	movwf	(?_printf+2)& (0+255),b
  2416  000FDE  0EFE               	movlw	high STR_44
  2417  000FE0  6FA0               	movwf	(?_printf+3)& (0+255),b
  2418  000FE2  EC2B  F020         	call	_printf	;wreg free
  2419  000FE6  0ED0               	movlw	208
  2420  000FE8  ECD5  F020         	call	_lcdInst
  2421                           
  2422                           ;main.c: 1113:                 printf("%s","SAVE LOG");
  2423  000FEC  0ED7               	movlw	low (STR_1+4)
  2424  000FEE  0100               	movlb	0	; () banked
  2425  000FF0  6F9D               	movwf	printf@fmt& (0+255),b
  2426  000FF2  0EFF               	movlw	high (STR_1+4)
  2427  000FF4  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2428  000FF6  0EB8               	movlw	low STR_46
  2429  000FF8  6F9F               	movwf	(?_printf+2)& (0+255),b
  2430  000FFA  0EFF               	movlw	high STR_46
  2431  000FFC  6FA0               	movwf	(?_printf+3)& (0+255),b
  2432  000FFE  EC2B  F020         	call	_printf	;wreg free
  2433                           
  2434                           ;main.c: 1114:                 currentLogState = justRan;
  2435  001002  0E00               	movlw	0
  2436  001004  0100               	movlb	0	; () banked
  2437  001006  6FD0               	movwf	main@currentLogState& (0+255),b
  2438                           
  2439                           ;main.c: 1115:                 break;
  2440  001008  D068               	goto	l9334
  2441  00100A                     l9302:
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;main.c: 1118:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/400
      +                          0.0)));};
  2445  00100A  0E80               	movlw	128
  2446  00100C  ECD5  F020         	call	_lcdInst
  2447  001010  0E07               	movlw	7
  2448  001012  0100               	movlb	0	; () banked
  2449  001014  6FC1               	movwf	??_main& (0+255),b
  2450  001016  0E7D               	movlw	125
  2451  001018                     u10937:
  2452  001018  2EE8               	decfsz	wreg,f,c
  2453  00101A  D7FE               	bra	u10937
  2454  00101C  2FC1               	decfsz	??_main& (0+255),f,b
  2455  00101E  D7FC               	bra	u10937
  2456                           
  2457                           ;main.c: 1119:                 printf("%s", "SELECT LOG");
  2458  001020  0ED7               	movlw	low (STR_1+4)
  2459  001022  0100               	movlb	0	; () banked
  2460  001024  6F9D               	movwf	printf@fmt& (0+255),b
  2461  001026  0EFF               	movlw	high (STR_1+4)
  2462  001028  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2463  00102A  0E5B               	movlw	low STR_48
  2464  00102C  6F9F               	movwf	(?_printf+2)& (0+255),b
  2465  00102E  0EFF               	movlw	high STR_48
  2466  001030  6FA0               	movwf	(?_printf+3)& (0+255),b
  2467  001032  EC2B  F020         	call	_printf	;wreg free
  2468  001036  0EC0               	movlw	192
  2469  001038  ECD5  F020         	call	_lcdInst
  2470                           
  2471                           ;main.c: 1121:                 printf("%s","(1 IS OLDEST)");
  2472  00103C  0ED7               	movlw	low (STR_1+4)
  2473  00103E  0100               	movlb	0	; () banked
  2474  001040  6F9D               	movwf	printf@fmt& (0+255),b
  2475  001042  0EFF               	movlw	high (STR_1+4)
  2476  001044  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2477  001046  0EE2               	movlw	low STR_50
  2478  001048  6F9F               	movwf	(?_printf+2)& (0+255),b
  2479  00104A  0EFE               	movlw	high STR_50
  2480  00104C  6FA0               	movwf	(?_printf+3)& (0+255),b
  2481  00104E  EC2B  F020         	call	_printf	;wreg free
  2482  001052  0E90               	movlw	144
  2483  001054  ECD5  F020         	call	_lcdInst
  2484                           
  2485                           ;main.c: 1123:                 printf("%s","(1) (2) (3) (4)");
  2486  001058  0ED7               	movlw	low (STR_1+4)
  2487  00105A  0100               	movlb	0	; () banked
  2488  00105C  6F9D               	movwf	printf@fmt& (0+255),b
  2489  00105E  0EFF               	movlw	high (STR_1+4)
  2490  001060  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  2491  001062  0E77               	movlw	low STR_52
  2492  001064  6F9F               	movwf	(?_printf+2)& (0+255),b
  2493  001066  0EFE               	movlw	high STR_52
  2494  001068  6FA0               	movwf	(?_printf+3)& (0+255),b
  2495  00106A  EC2B  F020         	call	_printf	;wreg free
  2496                           
  2497                           ;main.c: 1124:                 break;
  2498  00106E  D035               	goto	l9334
  2499  001070                     l9316:
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;main.c: 1126:                 if (currentLogState == justRan){
  2503  001070  51D0               	movf	main@currentLogState& (0+255),w,b
  2504  001072  A4D8               	btfss	status,2,c
  2505  001074  D005               	goto	l9322
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;main.c: 1127:                     replaceOldLog();
  2509  001076  EC1F  F01E         	call	_replaceOldLog	;wreg free
  2510                           
  2511                           ;main.c: 1128:                     currentLogState = four;
  2512  00107A  0E04               	movlw	4
  2513  00107C  0100               	movlb	0	; () banked
  2514  00107E  6FD0               	movwf	main@currentLogState& (0+255),b
  2515  001080                     l9322:
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;main.c: 1130:                 doDisplayLog(currentLogState);
  2519  001080  C0D0  F0A7         	movff	main@currentLogState,doDisplayLog@logNumber
  2520  001084  6BA8               	clrf	(doDisplayLog@logNumber+1)& (0+255),b
  2521  001086  ECE7  F008         	call	_doDisplayLog	;wreg free
  2522                           
  2523                           ;main.c: 1131:                 { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/400
      +                          0.0)));};
  2524  00108A  0E01               	movlw	1
  2525  00108C  ECD5  F020         	call	_lcdInst
  2526  001090  0E11               	movlw	17
  2527  001092  0100               	movlb	0	; () banked
  2528  001094  6FC1               	movwf	??_main& (0+255),b
  2529  001096  0E3A               	movlw	58
  2530  001098                     u10947:
  2531  001098  2EE8               	decfsz	wreg,f,c
  2532  00109A  D7FE               	bra	u10947
  2533  00109C  2FC1               	decfsz	??_main& (0+255),f,b
  2534  00109E  D7FC               	bra	u10947
  2535  0010A0  F000               	nop	
  2536                           
  2537                           ;main.c: 1132:                 currentRobotState = standby;
  2538  0010A2  0E00               	movlw	0
  2539  0010A4                     L1:
  2540  0010A4  0100               	movlb	0	; () banked
  2541  0010A6  6FD1               	movwf	main@currentRobotState& (0+255),b
  2542                           
  2543                           ;main.c: 1133:                 break;
  2544  0010A8  D018               	goto	l9334
  2545  0010AA                     l9332:
  2546  0010AA  0100               	movlb	0	; () banked
  2547  0010AC  51D1               	movf	main@currentRobotState& (0+255),w,b
  2548  0010AE  6FC1               	movwf	??_main& (0+255),b
  2549  0010B0  6BC2               	clrf	(??_main+1)& (0+255),b
  2550                           
  2551                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2552                           ; Switch size 1, requested type "simple"
  2553                           ; Number of cases is 1, Range of values is 0 to 0
  2554                           ; switch strategies available:
  2555                           ; Name         Instructions Cycles
  2556                           ; simple_byte            4     3 (average)
  2557                           ;	Chosen strategy is simple_byte
  2558  0010B2  51C2               	movf	(??_main+1)& (0+255),w,b
  2559  0010B4  0A00               	xorlw	0	; case 0
  2560  0010B6  A4D8               	btfss	status,2,c
  2561  0010B8  D010               	goto	l9334
  2562                           
  2563                           ; BSR set to: 0
  2564                           ; Switch size 1, requested type "simple"
  2565                           ; Number of cases is 5, Range of values is 0 to 4
  2566                           ; switch strategies available:
  2567                           ; Name         Instructions Cycles
  2568                           ; simple_byte           16     9 (average)
  2569                           ;	Chosen strategy is simple_byte
  2570  0010BA  51C1               	movf	??_main& (0+255),w,b
  2571  0010BC  0A00               	xorlw	0	; case 0
  2572  0010BE  B4D8               	btfsc	status,2,c
  2573  0010C0  D6D6               	goto	l9244
  2574  0010C2  0A01               	xorlw	1	; case 1
  2575  0010C4  B4D8               	btfsc	status,2,c
  2576  0010C6  D729               	goto	l9264
  2577  0010C8  0A03               	xorlw	3	; case 2
  2578  0010CA  B4D8               	btfsc	status,2,c
  2579  0010CC  D75A               	goto	l9282
  2580  0010CE  0A01               	xorlw	1	; case 3
  2581  0010D0  B4D8               	btfsc	status,2,c
  2582  0010D2  D79B               	goto	l9302
  2583  0010D4  0A07               	xorlw	7	; case 4
  2584  0010D6  B4D8               	btfsc	status,2,c
  2585  0010D8  D7CB               	goto	l9316
  2586  0010DA                     l9334:
  2587                           
  2588                           ;main.c: 1137:         if(keyPressed){
  2589  0010DA  0101               	movlb	1	; () banked
  2590  0010DC  514F               	movf	_keyPressed& (0+255),w,b	;volatile
  2591  0010DE  B4D8               	btfsc	status,2,c
  2592  0010E0  D065               	goto	l410
  2593                           
  2594                           ; BSR set to: 1
  2595                           ;main.c: 1140:             keyPressed = 0;
  2596  0010E2  0E00               	movlw	0
  2597  0010E4  6F4F               	movwf	_keyPressed& (0+255),b	;volatile
  2598                           
  2599                           ; BSR set to: 1
  2600                           ;main.c: 1143:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  2601  0010E6  3881               	swapf	3969,w,c	;volatile
  2602  0010E8  0B0F               	andlw	15
  2603  0010EA  0B0F               	andlw	15
  2604  0010EC  0100               	movlb	0	; () banked
  2605  0010EE  6FCE               	movwf	main@keypress& (0+255),b
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 1144:             char keyValue = keys[keypress];
  2609  0010F0  0E33               	movlw	low _keys
  2610  0010F2  25CE               	addwf	main@keypress& (0+255),w,b
  2611  0010F4  6EF6               	movwf	tblptrl,c
  2612  0010F6  6AF7               	clrf	tblptrh,c
  2613  0010F8  0EFE               	movlw	high _keys
  2614  0010FA  22F7               	addwfc	tblptrh,f,c
  2615  0010FC                     	if	0	;There are less than 3 active tblptr bytes
  2616  0010FC                     	endif
  2617  0010FC  0008               	tblrd		*
  2618  0010FE  CFF5 F0D2          	movff	tablat,main@keyValue
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;main.c: 1145:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));};
  2622  001102  0E01               	movlw	1
  2623  001104  ECD5  F020         	call	_lcdInst
  2624  001108  0E11               	movlw	17
  2625  00110A  0100               	movlb	0	; () banked
  2626  00110C  6FC1               	movwf	??_main& (0+255),b
  2627  00110E  0E3A               	movlw	58
  2628  001110                     u10957:
  2629  001110  2EE8               	decfsz	wreg,f,c
  2630  001112  D7FE               	bra	u10957
  2631  001114  2FC1               	decfsz	??_main& (0+255),f,b
  2632  001116  D7FC               	bra	u10957
  2633  001118  F000               	nop	
  2634                           
  2635                           ;main.c: 1146:             switch (currentRobotState){
  2636  00111A  D032               	goto	l9382
  2637  00111C                     l9346:
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 1148:                     if (keyValue == '1'){
  2641  00111C  0E31               	movlw	49
  2642  00111E  19D2               	xorwf	main@keyValue& (0+255),w,b
  2643  001120  A4D8               	btfss	status,2,c
  2644  001122  D002               	goto	l9350
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;main.c: 1149:                         currentRobotState = operation;
  2648  001124  0E01               	movlw	1
  2649  001126  D011               	goto	L4
  2650  001128                     l9350:
  2651                           
  2652                           ; BSR set to: 0
  2653  001128  0E32               	movlw	50
  2654  00112A  19D2               	xorwf	main@keyValue& (0+255),w,b
  2655  00112C  A4D8               	btfss	status,2,c
  2656  00112E  D03E               	goto	l410
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 1151:                         currentRobotState = selectLog;
  2660  001130  0E03               	movlw	3
  2661  001132  D00B               	goto	L4
  2662  001134                     l9354:
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;main.c: 1157:                     if (keyValue == '1'){
  2666  001134  0E31               	movlw	49
  2667  001136  19D2               	xorwf	main@keyValue& (0+255),w,b
  2668  001138  A4D8               	btfss	status,2,c
  2669  00113A  D002               	goto	l9358
  2670  00113C                     u10810:
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;main.c: 1158:                         currentRobotState = displayLog;
  2674  00113C  0E04               	movlw	4
  2675  00113E  D005               	goto	L4
  2676  001140                     l9358:
  2677                           
  2678                           ; BSR set to: 0
  2679  001140  0E32               	movlw	50
  2680  001142  19D2               	xorwf	main@keyValue& (0+255),w,b
  2681  001144  A4D8               	btfss	status,2,c
  2682  001146  D032               	goto	l410
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;main.c: 1160:                         currentRobotState = standby;
  2686  001148  0E00               	movlw	0
  2687  00114A                     L4:
  2688  00114A  6FD1               	movwf	main@currentRobotState& (0+255),b
  2689  00114C  D02F               	goto	l410
  2690  00114E                     l9362:
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;main.c: 1164:                     if (keyValue == '1'){
  2694  00114E  0E31               	movlw	49
  2695  001150  19D2               	xorwf	main@keyValue& (0+255),w,b
  2696  001152  A4D8               	btfss	status,2,c
  2697  001154  D002               	goto	l9366
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 1165:                         currentLogState = one;
  2701  001156  0E01               	movlw	1
  2702  001158  D011               	goto	L7
  2703  00115A                     l9366:
  2704                           
  2705                           ; BSR set to: 0
  2706  00115A  0E32               	movlw	50
  2707  00115C  19D2               	xorwf	main@keyValue& (0+255),w,b
  2708  00115E  A4D8               	btfss	status,2,c
  2709  001160  D002               	goto	l9370
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 1167:                         currentLogState = two;
  2713  001162  0E02               	movlw	2
  2714  001164  D00B               	goto	L7
  2715  001166                     l9370:
  2716                           
  2717                           ; BSR set to: 0
  2718  001166  0E33               	movlw	51
  2719  001168  19D2               	xorwf	main@keyValue& (0+255),w,b
  2720  00116A  A4D8               	btfss	status,2,c
  2721  00116C  D002               	goto	l9374
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;main.c: 1169:                         currentLogState = three;
  2725  00116E  0E03               	movlw	3
  2726  001170  D005               	goto	L7
  2727  001172                     l9374:
  2728                           
  2729                           ; BSR set to: 0
  2730  001172  0E34               	movlw	52
  2731  001174  19D2               	xorwf	main@keyValue& (0+255),w,b
  2732  001176  A4D8               	btfss	status,2,c
  2733  001178  D019               	goto	l410
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 1171:                         currentLogState = '4';
  2737  00117A  0E34               	movlw	52
  2738  00117C                     L7:
  2739  00117C  6FD0               	movwf	main@currentLogState& (0+255),b
  2740                           
  2741                           ;main.c: 1172:                     } else {
  2742  00117E  D7DE               	goto	u10810
  2743  001180                     l9382:
  2744  001180  0100               	movlb	0	; () banked
  2745  001182  51D1               	movf	main@currentRobotState& (0+255),w,b
  2746  001184  6FC1               	movwf	??_main& (0+255),b
  2747  001186  6BC2               	clrf	(??_main+1)& (0+255),b
  2748                           
  2749                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2750                           ; Switch size 1, requested type "simple"
  2751                           ; Number of cases is 1, Range of values is 0 to 0
  2752                           ; switch strategies available:
  2753                           ; Name         Instructions Cycles
  2754                           ; simple_byte            4     3 (average)
  2755                           ;	Chosen strategy is simple_byte
  2756  001188  51C2               	movf	(??_main+1)& (0+255),w,b
  2757  00118A  0A00               	xorlw	0	; case 0
  2758  00118C  A4D8               	btfss	status,2,c
  2759  00118E  D00E               	goto	l410
  2760                           
  2761                           ; BSR set to: 0
  2762                           ; Switch size 1, requested type "simple"
  2763                           ; Number of cases is 5, Range of values is 0 to 4
  2764                           ; switch strategies available:
  2765                           ; Name         Instructions Cycles
  2766                           ; simple_byte           16     9 (average)
  2767                           ;	Chosen strategy is simple_byte
  2768  001190  51C1               	movf	??_main& (0+255),w,b
  2769  001192  0A00               	xorlw	0	; case 0
  2770  001194  B4D8               	btfsc	status,2,c
  2771  001196  D7C2               	goto	l9346
  2772  001198  0A01               	xorlw	1	; case 1
  2773  00119A  B4D8               	btfsc	status,2,c
  2774  00119C  D007               	goto	l410
  2775  00119E  0A03               	xorlw	3	; case 2
  2776  0011A0  B4D8               	btfsc	status,2,c
  2777  0011A2  D7C8               	goto	l9354
  2778  0011A4  0A01               	xorlw	1	; case 3
  2779  0011A6  B4D8               	btfsc	status,2,c
  2780  0011A8  D7D2               	goto	l9362
  2781  0011AA  0A07               	xorlw	7	; case 4
  2782  0011AC                     l410:
  2783                           
  2784                           ;main.c: 1192:         tick++;
  2785                           
  2786                           ; BSR set to: 0
  2787  0011AC  0E01               	movlw	1
  2788  0011AE  0100               	movlb	0	; () banked
  2789  0011B0  27CA               	addwf	main@tick& (0+255),f,b
  2790  0011B2  0E00               	movlw	0
  2791  0011B4  23CB               	addwfc	(main@tick+1)& (0+255),f,b
  2792  0011B6  23CC               	addwfc	(main@tick+2)& (0+255),f,b
  2793  0011B8  23CD               	addwfc	(main@tick+3)& (0+255),f,b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;main.c: 1193:         _delay((unsigned long)((1)*(10000000/4000.0)));
  2797  0011BA  0E04               	movlw	4
  2798  0011BC  0100               	movlb	0	; () banked
  2799  0011BE  6FC1               	movwf	??_main& (0+255),b
  2800  0011C0  0E3D               	movlw	61
  2801  0011C2                     u10967:
  2802  0011C2  2EE8               	decfsz	wreg,f,c
  2803  0011C4  D7FE               	bra	u10967
  2804  0011C6  2FC1               	decfsz	??_main& (0+255),f,b
  2805  0011C8  D7FC               	bra	u10967
  2806  0011CA  D000               	nop2	
  2807  0011CC  D606               	goto	l9226
  2808  0011CE                     __end_of_main:
  2809                           	opt callstack 0
  2810                           
  2811 ;; *************** function _robotInit *****************
  2812 ;; Defined at:
  2813 ;;		line 983 in file "main.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;		None
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, status,2, status,0, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;Total ram usage:        0 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    7
  2834 ;; This function calls:
  2835 ;;		_EncoderInit
  2836 ;;		_I2C_Master_Init
  2837 ;;		_initLCD
  2838 ;; This function is called by:
  2839 ;;		_main
  2840 ;;		_mainEEPROM
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text1
  2845  003E2C                     __ptext1:
  2846                           	opt callstack 0
  2847  003E2C                     _robotInit:
  2848                           	opt callstack 23
  2849                           
  2850                           ;main.c: 985:     EncoderInit();
  2851                           
  2852                           ;incstack = 0
  2853  003E2C  ECA6  F020         	call	_EncoderInit	;wreg free
  2854                           
  2855                           ;main.c: 989:     LATD = 0x00;
  2856  003E30  0E00               	movlw	0
  2857  003E32  6E8C               	movwf	3980,c	;volatile
  2858                           
  2859                           ;main.c: 990:     TRISD = 0x00;
  2860  003E34  0E00               	movlw	0
  2861  003E36  6E95               	movwf	3989,c	;volatile
  2862                           
  2863                           ;main.c: 993:     LATB = 0x00;
  2864  003E38  0E00               	movlw	0
  2865  003E3A  6E8A               	movwf	3978,c	;volatile
  2866                           
  2867                           ;main.c: 994:     TRISBbits.TRISB1 = 1;
  2868  003E3C  8293               	bsf	3987,1,c	;volatile
  2869                           
  2870                           ;main.c: 995:     TRISBbits.TRISB4 = 1;
  2871  003E3E  8893               	bsf	3987,4,c	;volatile
  2872                           
  2873                           ;main.c: 996:     TRISBbits.TRISB5 = 1;
  2874  003E40  8A93               	bsf	3987,5,c	;volatile
  2875                           
  2876                           ;main.c: 997:     TRISBbits.TRISB6 = 1;
  2877  003E42  8C93               	bsf	3987,6,c	;volatile
  2878                           
  2879                           ;main.c: 998:     TRISBbits.TRISB7 = 1;
  2880  003E44  8E93               	bsf	3987,7,c	;volatile
  2881                           
  2882                           ;main.c: 1001:     TRISAbits.TRISA4 = 0;
  2883  003E46  9892               	bcf	3986,4,c	;volatile
  2884                           
  2885                           ;main.c: 1002:     LATAbits.LATA4 = 0;
  2886  003E48  9889               	bcf	3977,4,c	;volatile
  2887                           
  2888                           ;main.c: 1005:     I2C_Master_Init(100000);
  2889  003E4A  0EA0               	movlw	160
  2890  003E4C  6E13               	movwf	I2C_Master_Init@clockFreq,c
  2891  003E4E  0E86               	movlw	134
  2892  003E50  6E14               	movwf	I2C_Master_Init@clockFreq+1,c
  2893  003E52  0E01               	movlw	1
  2894  003E54  6E15               	movwf	I2C_Master_Init@clockFreq+2,c
  2895  003E56  0E00               	movlw	0
  2896  003E58  6E16               	movwf	I2C_Master_Init@clockFreq+3,c
  2897  003E5A  EC9F  F01D         	call	_I2C_Master_Init	;wreg free
  2898                           
  2899                           ;main.c: 1012:     ADCON1 = 0b00001111;
  2900  003E5E  0E0F               	movlw	15
  2901  003E60  6EC1               	movwf	4033,c	;volatile
  2902                           
  2903                           ;main.c: 1015:     INT1IE = 1;
  2904  003E62  86F0               	bsf	4080,3,c	;volatile
  2905                           
  2906                           ;main.c: 1018:     initLCD();
  2907  003E64  EC05  F01D         	call	_initLCD	;wreg free
  2908                           
  2909                           ;main.c: 1021:     (INTCONbits.GIE = 1);
  2910  003E68  8EF2               	bsf	4082,7,c	;volatile
  2911  003E6A  0012               	return		;funcret
  2912  003E6C                     __end_of_robotInit:
  2913                           	opt callstack 0
  2914                           
  2915 ;; *************** function _initLCD *****************
  2916 ;; Defined at:
  2917 ;;		line 69 in file "lcd.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;		None
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;		None
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      void 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0, cstack
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;Total ram usage:        1 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    6
  2938 ;; This function calls:
  2939 ;;		_lcdInst
  2940 ;;		_send_byte
  2941 ;;		_send_nibble
  2942 ;; This function is called by:
  2943 ;;		_robotInit
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text2
  2948  003A0A                     __ptext2:
  2949                           	opt callstack 0
  2950  003A0A                     _initLCD:
  2951                           	opt callstack 23
  2952                           
  2953                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  2954                           
  2955                           ;incstack = 0
  2956  003A0A  0E31               	movlw	49
  2957  003A0C  6E0A               	movwf	??_initLCD& (0+255),c
  2958  003A0E  0EB2               	movlw	178
  2959  003A10                     u10977:
  2960  003A10  2EE8               	decfsz	wreg,f,c
  2961  003A12  D7FE               	bra	u10977
  2962  003A14  2E0A               	decfsz	??_initLCD& (0+255),f,c
  2963  003A16  D7FC               	bra	u10977
  2964  003A18  D000               	nop2	
  2965                           
  2966                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  2967  003A1A  948C               	bcf	3980,2,c	;volatile
  2968                           
  2969                           ;lcd.c: 74:     send_nibble(0b0011);
  2970  003A1C  0E03               	movlw	3
  2971  003A1E  ECB2  F020         	call	_send_nibble
  2972                           
  2973                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2974  003A22  0E11               	movlw	17
  2975  003A24  6E0A               	movwf	??_initLCD& (0+255),c
  2976  003A26  0E3A               	movlw	58
  2977  003A28                     u10987:
  2978  003A28  2EE8               	decfsz	wreg,f,c
  2979  003A2A  D7FE               	bra	u10987
  2980  003A2C  2E0A               	decfsz	??_initLCD& (0+255),f,c
  2981  003A2E  D7FC               	bra	u10987
  2982  003A30  D000               	nop2	
  2983                           
  2984                           ;lcd.c: 76:     send_nibble(0b0011);
  2985  003A32  0E03               	movlw	3
  2986  003A34  ECB2  F020         	call	_send_nibble
  2987                           
  2988                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  2989  003A38  0E7D               	movlw	125
  2990  003A3A                     u10997:
  2991  003A3A  2EE8               	decfsz	wreg,f,c
  2992  003A3C  D7FE               	bra	u10997
  2993                           
  2994                           ;lcd.c: 78:     send_byte(0b00110010);
  2995  003A3E  0E32               	movlw	50
  2996  003A40  ECC6  F020         	call	_send_byte
  2997                           
  2998                           ;lcd.c: 80:     send_byte(0b00101000);
  2999  003A44  0E28               	movlw	40
  3000  003A46  ECC6  F020         	call	_send_byte
  3001                           
  3002                           ;lcd.c: 81:     send_byte(0b00001000);
  3003  003A4A  0E08               	movlw	8
  3004  003A4C  ECC6  F020         	call	_send_byte
  3005                           
  3006                           ;lcd.c: 82:     send_byte(0b00000001);
  3007  003A50  0E01               	movlw	1
  3008  003A52  ECC6  F020         	call	_send_byte
  3009                           
  3010                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3011  003A56  0E11               	movlw	17
  3012  003A58  6E0A               	movwf	??_initLCD& (0+255),c
  3013  003A5A  0E3A               	movlw	58
  3014  003A5C                     u11007:
  3015  003A5C  2EE8               	decfsz	wreg,f,c
  3016  003A5E  D7FE               	bra	u11007
  3017  003A60  2E0A               	decfsz	??_initLCD& (0+255),f,c
  3018  003A62  D7FC               	bra	u11007
  3019  003A64  D000               	nop2	
  3020                           
  3021                           ;lcd.c: 84:     send_byte(0b00000110);
  3022  003A66  0E06               	movlw	6
  3023  003A68  ECC6  F020         	call	_send_byte
  3024                           
  3025                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  3026  003A6C  0E0C               	movlw	12
  3027  003A6E  ECD5  F020         	call	_lcdInst
  3028  003A72  0012               	return		;funcret
  3029  003A74                     __end_of_initLCD:
  3030                           	opt callstack 0
  3031                           
  3032 ;; *************** function _I2C_Master_Init *****************
  3033 ;; Defined at:
  3034 ;;		line 32 in file "I2C.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  clockFreq       4   18[COMRAM] const unsigned long 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, status,2, status,0, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3048 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;Total ram usage:        8 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    3
  3055 ;; This function calls:
  3056 ;;		___lldiv
  3057 ;; This function is called by:
  3058 ;;		_robotInit
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text3
  3063  003B3E                     __ptext3:
  3064                           	opt callstack 0
  3065  003B3E                     _I2C_Master_Init:
  3066                           	opt callstack 26
  3067                           
  3068                           ;I2C.c: 34:     SSPCON1bits.SSPEN = 0;
  3069                           
  3070                           ;incstack = 0
  3071  003B3E  9AC6               	bcf	4038,5,c	;volatile
  3072                           
  3073                           ;I2C.c: 37:     TRISCbits.TRISC3 = 1;
  3074  003B40  8694               	bsf	3988,3,c	;volatile
  3075                           
  3076                           ;I2C.c: 38:     TRISCbits.TRISC4 = 1;
  3077  003B42  8894               	bsf	3988,4,c	;volatile
  3078                           
  3079                           ;I2C.c: 43:     SSPADD = (10000000 / (4 * clockFreq)) - 1;
  3080  003B44  0E80               	movlw	128
  3081  003B46  6E06               	movwf	___lldiv@dividend,c
  3082  003B48  0E96               	movlw	150
  3083  003B4A  6E07               	movwf	___lldiv@dividend+1,c
  3084  003B4C  0E98               	movlw	152
  3085  003B4E  6E08               	movwf	___lldiv@dividend+2,c
  3086  003B50  0E00               	movlw	0
  3087  003B52  6E09               	movwf	___lldiv@dividend+3,c
  3088  003B54  C013  F017         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  3089  003B58  C014  F018         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  3090  003B5C  C015  F019         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  3091  003B60  C016  F01A         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  3092  003B64  0E02               	movlw	2
  3093  003B66                     u10335:
  3094  003B66  90D8               	bcf	status,0,c
  3095  003B68  3617               	rlcf	??_I2C_Master_Init,f,c
  3096  003B6A  3618               	rlcf	??_I2C_Master_Init+1,f,c
  3097  003B6C  3619               	rlcf	??_I2C_Master_Init+2,f,c
  3098  003B6E  361A               	rlcf	??_I2C_Master_Init+3,f,c
  3099  003B70  2EE8               	decfsz	wreg,f,c
  3100  003B72  D7F9               	goto	u10335
  3101  003B74  C017  F00A         	movff	??_I2C_Master_Init,___lldiv@divisor
  3102  003B78  C018  F00B         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3103  003B7C  C019  F00C         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3104  003B80  C01A  F00D         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3105  003B84  EC1C  F01C         	call	___lldiv	;wreg free
  3106  003B88  0406               	decf	?___lldiv,w,c
  3107  003B8A  6EC8               	movwf	4040,c	;volatile
  3108                           
  3109                           ;I2C.c: 46:     SSPSTAT = 0b10000000;
  3110  003B8C  0E80               	movlw	128
  3111  003B8E  6EC7               	movwf	4039,c	;volatile
  3112                           
  3113                           ;I2C.c: 49:     SSPCON1 = 0b00101000;
  3114  003B90  0E28               	movlw	40
  3115  003B92  6EC6               	movwf	4038,c	;volatile
  3116                           
  3117                           ;I2C.c: 52:     SSPCON2 = 0b00000000;
  3118  003B94  0E00               	movlw	0
  3119  003B96  6EC5               	movwf	4037,c	;volatile
  3120  003B98  0012               	return		;funcret
  3121  003B9A                     __end_of_I2C_Master_Init:
  3122                           	opt callstack 0
  3123                           
  3124 ;; *************** function ___lldiv *****************
  3125 ;; Defined at:
  3126 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  dividend        4    5[COMRAM] unsigned long 
  3129 ;;  divisor         4    9[COMRAM] unsigned long 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  quotient        4   13[COMRAM] unsigned long 
  3132 ;;  counter         1   17[COMRAM] unsigned char 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  4    5[COMRAM] unsigned long 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2, status,0
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3142 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;Total ram usage:       13 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    2
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_I2C_Master_Init
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text4
  3157  003838                     __ptext4:
  3158                           	opt callstack 0
  3159  003838                     ___lldiv:
  3160                           	opt callstack 26
  3161                           
  3162                           ;incstack = 0
  3163  003838  0E00               	movlw	0
  3164  00383A  6E0E               	movwf	___lldiv@quotient,c
  3165  00383C  0E00               	movlw	0
  3166  00383E  6E0F               	movwf	___lldiv@quotient+1,c
  3167  003840  0E00               	movlw	0
  3168  003842  6E10               	movwf	___lldiv@quotient+2,c
  3169  003844  0E00               	movlw	0
  3170  003846  6E11               	movwf	___lldiv@quotient+3,c
  3171  003848  500A               	movf	___lldiv@divisor,w,c
  3172  00384A  100B               	iorwf	___lldiv@divisor+1,w,c
  3173  00384C  100C               	iorwf	___lldiv@divisor+2,w,c
  3174  00384E  100D               	iorwf	___lldiv@divisor+3,w,c
  3175  003850  B4D8               	btfsc	status,2,c
  3176  003852  D02A               	goto	l755
  3177  003854  0E01               	movlw	1
  3178  003856  6E12               	movwf	___lldiv@counter,c
  3179  003858  D006               	goto	l8404
  3180  00385A                     l8402:
  3181  00385A  90D8               	bcf	status,0,c
  3182  00385C  360A               	rlcf	___lldiv@divisor,f,c
  3183  00385E  360B               	rlcf	___lldiv@divisor+1,f,c
  3184  003860  360C               	rlcf	___lldiv@divisor+2,f,c
  3185  003862  360D               	rlcf	___lldiv@divisor+3,f,c
  3186  003864  2A12               	incf	___lldiv@counter,f,c
  3187  003866                     l8404:
  3188  003866  AE0D               	btfss	___lldiv@divisor+3,7,c
  3189  003868  D7F8               	goto	l8402
  3190  00386A                     u10010:
  3191  00386A  90D8               	bcf	status,0,c
  3192  00386C  360E               	rlcf	___lldiv@quotient,f,c
  3193  00386E  360F               	rlcf	___lldiv@quotient+1,f,c
  3194  003870  3610               	rlcf	___lldiv@quotient+2,f,c
  3195  003872  3611               	rlcf	___lldiv@quotient+3,f,c
  3196  003874  500A               	movf	___lldiv@divisor,w,c
  3197  003876  5C06               	subwf	___lldiv@dividend,w,c
  3198  003878  500B               	movf	___lldiv@divisor+1,w,c
  3199  00387A  5807               	subwfb	___lldiv@dividend+1,w,c
  3200  00387C  500C               	movf	___lldiv@divisor+2,w,c
  3201  00387E  5808               	subwfb	___lldiv@dividend+2,w,c
  3202  003880  500D               	movf	___lldiv@divisor+3,w,c
  3203  003882  5809               	subwfb	___lldiv@dividend+3,w,c
  3204  003884  A0D8               	btfss	status,0,c
  3205  003886  D009               	goto	l8414
  3206  003888  500A               	movf	___lldiv@divisor,w,c
  3207  00388A  5E06               	subwf	___lldiv@dividend,f,c
  3208  00388C  500B               	movf	___lldiv@divisor+1,w,c
  3209  00388E  5A07               	subwfb	___lldiv@dividend+1,f,c
  3210  003890  500C               	movf	___lldiv@divisor+2,w,c
  3211  003892  5A08               	subwfb	___lldiv@dividend+2,f,c
  3212  003894  500D               	movf	___lldiv@divisor+3,w,c
  3213  003896  5A09               	subwfb	___lldiv@dividend+3,f,c
  3214  003898  800E               	bsf	___lldiv@quotient,0,c
  3215  00389A                     l8414:
  3216  00389A  90D8               	bcf	status,0,c
  3217  00389C  320D               	rrcf	___lldiv@divisor+3,f,c
  3218  00389E  320C               	rrcf	___lldiv@divisor+2,f,c
  3219  0038A0  320B               	rrcf	___lldiv@divisor+1,f,c
  3220  0038A2  320A               	rrcf	___lldiv@divisor,f,c
  3221  0038A4  2E12               	decfsz	___lldiv@counter,f,c
  3222  0038A6  D7E1               	goto	u10010
  3223  0038A8                     l755:
  3224  0038A8  C00E  F006         	movff	___lldiv@quotient,?___lldiv
  3225  0038AC  C00F  F007         	movff	___lldiv@quotient+1,?___lldiv+1
  3226  0038B0  C010  F008         	movff	___lldiv@quotient+2,?___lldiv+2
  3227  0038B4  C011  F009         	movff	___lldiv@quotient+3,?___lldiv+3
  3228  0038B8  0012               	return		;funcret
  3229  0038BA                     __end_of___lldiv:
  3230                           	opt callstack 0
  3231                           
  3232 ;; *************** function _EncoderInit *****************
  3233 ;; Defined at:
  3234 ;;		line 190 in file "main.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;		None
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;		None
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  1    wreg      void 
  3241 ;; Registers used:
  3242 ;;		wreg, status,2
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:        0 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    2
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_robotInit
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text5
  3263  00414C                     __ptext5:
  3264                           	opt callstack 0
  3265  00414C                     _EncoderInit:
  3266                           	opt callstack 27
  3267                           
  3268                           ;main.c: 191:   motorBDirection = 1;
  3269                           
  3270                           ;incstack = 0
  3271  00414C  0E01               	movlw	1
  3272  00414E  6E79               	movwf	_motorBDirection,c	;volatile
  3273                           
  3274                           ;main.c: 192:   motorADirection = 1;
  3275  004150  0E01               	movlw	1
  3276  004152  0101               	movlb	1	; () banked
  3277  004154  6F77               	movwf	_motorADirection& (0+255),b	;volatile
  3278                           
  3279                           ; BSR set to: 1
  3280                           ;main.c: 195:   TRISCbits.TRISC0 = 1;
  3281  004156  8094               	bsf	3988,0,c	;volatile
  3282                           
  3283                           ; BSR set to: 1
  3284                           ;main.c: 196:   TRISEbits.TRISE1 = 1;
  3285  004158  8296               	bsf	3990,1,c	;volatile
  3286                           
  3287                           ; BSR set to: 1
  3288                           ;main.c: 197:   TRISBbits.TRISB2 = 1;
  3289  00415A  8493               	bsf	3987,2,c	;volatile
  3290                           
  3291                           ; BSR set to: 1
  3292                           ;main.c: 198:   TRISBbits.TRISB0 = 1;
  3293  00415C  8093               	bsf	3987,0,c	;volatile
  3294                           
  3295                           ; BSR set to: 1
  3296                           ;main.c: 201:   INT2IE = 1;
  3297  00415E  88F0               	bsf	4080,4,c	;volatile
  3298                           
  3299                           ; BSR set to: 1
  3300                           ;main.c: 203:   INT0IE = 1;
  3301  004160  88F2               	bsf	4082,4,c	;volatile
  3302                           
  3303                           ; BSR set to: 1
  3304  004162  0012               	return		;funcret
  3305  004164                     __end_of_EncoderInit:
  3306                           	opt callstack 0
  3307                           
  3308 ;; *************** function _replaceOldLog *****************
  3309 ;; Defined at:
  3310 ;;		line 1029 in file "main.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  i               2    5[COMRAM] int 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:        2 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    2
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_main
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text6
  3339  003C3E                     __ptext6:
  3340                           	opt callstack 0
  3341  003C3E                     _replaceOldLog:
  3342                           	opt callstack 28
  3343                           
  3344                           ;main.c: 1030:     for (int i = 0; i< 48; i++){
  3345                           
  3346                           ; BSR set to: 1
  3347                           ;incstack = 0
  3348  003C3E  0E00               	movlw	0
  3349  003C40  6E07               	movwf	replaceOldLog@i+1,c
  3350  003C42  0E00               	movlw	0
  3351  003C44  6E06               	movwf	replaceOldLog@i,c
  3352  003C46                     l9146:
  3353                           
  3354                           ;main.c: 1031:         logs[4][i] = logs[0][i];
  3355  003C46  90D8               	bcf	status,0,c
  3356  003C48  3406               	rlcf	replaceOldLog@i,w,c
  3357  003C4A  6ED9               	movwf	fsr2l,c
  3358  003C4C  3407               	rlcf	replaceOldLog@i+1,w,c
  3359  003C4E  6EDA               	movwf	fsr2h,c
  3360  003C50  0E78               	movlw	low _logs
  3361  003C52  26D9               	addwf	fsr2l,f,c
  3362  003C54  0E01               	movlw	high _logs
  3363  003C56  22DA               	addwfc	fsr2h,f,c
  3364  003C58  90D8               	bcf	status,0,c
  3365  003C5A  3406               	rlcf	replaceOldLog@i,w,c
  3366  003C5C  6EE1               	movwf	fsr1l,c
  3367  003C5E  3407               	rlcf	replaceOldLog@i+1,w,c
  3368  003C60  6EE2               	movwf	fsr1h,c
  3369  003C62  0EF8               	movlw	low (_logs+384)
  3370  003C64  26E1               	addwf	fsr1l,f,c
  3371  003C66  0E02               	movlw	high (_logs+384)
  3372  003C68  22E2               	addwfc	fsr1h,f,c
  3373  003C6A  CFDE FFE6          	movff	postinc2,postinc1
  3374  003C6E  CFDD FFE5          	movff	postdec2,postdec1
  3375                           
  3376                           ;main.c: 1032:     }
  3377  003C72  4A06               	infsnz	replaceOldLog@i,f,c
  3378  003C74  2A07               	incf	replaceOldLog@i+1,f,c
  3379  003C76  BE07               	btfsc	replaceOldLog@i+1,7,c
  3380  003C78  D7E6               	goto	l9146
  3381  003C7A  5007               	movf	replaceOldLog@i+1,w,c
  3382  003C7C  E105               	bnz	u10660
  3383  003C7E  0E30               	movlw	48
  3384  003C80  5C06               	subwf	replaceOldLog@i,w,c
  3385  003C82  B0D8               	btfsc	status,0,c
  3386  003C84  0012               	return	
  3387  003C86  D7DF               	goto	l9146
  3388  003C88                     u10660:
  3389  003C88  0012               	return		;funcret
  3390  003C8A                     __end_of_replaceOldLog:
  3391                           	opt callstack 0
  3392                           
  3393 ;; *************** function _doOperation *****************
  3394 ;; Defined at:
  3395 ;;		line 615 in file "main.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;		None
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  i               2   58[BANK1 ] int 
  3400 ;;  startedDistB    2   22[BANK1 ] int 
  3401 ;;  startedDistA    2   20[BANK1 ] int 
  3402 ;;  timeInOperat    4   60[BANK1 ] unsigned long 
  3403 ;;  timeStart       4   35[BANK1 ] unsigned long 
  3404 ;;  PIDData         4    0[BANK1 ] int [2]
  3405 ;;  tiresOnPole     2   54[BANK1 ] int 
  3406 ;;  tiresDeploye    2   52[BANK1 ] int 
  3407 ;;  tiresToDrop     2   50[BANK1 ] int 
  3408 ;;  distanceToPo    2   48[BANK1 ] int 
  3409 ;;  counted         2   46[BANK1 ] int 
  3410 ;;  motorBStartD    2   44[BANK1 ] int 
  3411 ;;  motorAStartD    2   42[BANK1 ] int 
  3412 ;;  goalSpeed       2   39[BANK1 ] int 
  3413 ;;  distanceFrom    2   33[BANK1 ] int 
  3414 ;;  totalTiresSu    2   31[BANK1 ] int 
  3415 ;;  poleNumber      2   29[BANK1 ] int 
  3416 ;;  badCountBot     2   27[BANK1 ] int 
  3417 ;;  badCount        2   25[BANK1 ] int 
  3418 ;;  tiresOnPoleA    2   18[BANK1 ] int 
  3419 ;;  rightRangeFi    2    0        int 
  3420 ;;  leftRangeFin    2    0        int 
  3421 ;;  currentAngle    2    0        int 
  3422 ;;  error           2    0        int 
  3423 ;;  errorScaleFa    2    0        int 
  3424 ;;  motorBSpeed     2    0        int 
  3425 ;;  motorASpeed     2    0        int 
  3426 ;;  fourMetreEqu    2    0        int 
  3427 ;;  minimumSafeD    2    0        int 
  3428 ;;  topLaserStat    1   66[BANK1 ] _Bool 
  3429 ;;  bottomLaserS    1   65[BANK1 ] _Bool 
  3430 ;;  currentOpera    1   64[BANK1 ] enum E3355
  3431 ;;  bottomLaserS    1   57[BANK1 ] _Bool 
  3432 ;;  topLaserStat    1   56[BANK1 ] _Bool 
  3433 ;;  isDoneDrop      1   41[BANK1 ] _Bool 
  3434 ;;  send            1   24[BANK1 ] _Bool 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Locals:         0       0      67       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Totals:         0       4      67       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;Total ram usage:       71 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:   14
  3451 ;; This function calls:
  3452 ;;		_I2C_Master_Start
  3453 ;;		_I2C_Master_Stop
  3454 ;;		_I2C_Master_Write
  3455 ;;		_TIMER_INIT
  3456 ;;		___awmod
  3457 ;;		_errorCorrectedMove
  3458 ;;		_init_motor_PWM
  3459 ;;		_lcdInst
  3460 ;;		_opDelay
  3461 ;;		_opErrorCorrectionDegrees
  3462 ;;		_printf
  3463 ;;		_requestIsTireDropDone
  3464 ;;		_sendArduinoAbortOperationMessage
  3465 ;;		_sendArduinoTireDropRequest
  3466 ;;		_sendArduinoTireOperationStartMessage
  3467 ;;		_setMotorSpeeds
  3468 ;;		_tirePositioning
  3469 ;; This function is called by:
  3470 ;;		_main
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text7
  3475  000814                     __ptext7:
  3476                           	opt callstack 0
  3477  000814                     _doOperation:
  3478                           	opt callstack 16
  3479                           
  3480                           ;main.c: 621:     I2C_Master_Start();
  3481                           
  3482                           ;incstack = 0
  3483  000814  ECE8  F020         	call	_I2C_Master_Start	;wreg free
  3484                           
  3485                           ;main.c: 622:     I2C_Master_Write(0b00010000);
  3486  000818  0E00               	movlw	0
  3487  00081A  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  3488  00081C  0E10               	movlw	16
  3489  00081E  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  3490  000820  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  3491                           
  3492                           ;main.c: 623:     I2C_Master_Stop();
  3493  000824  ECE4  F020         	call	_I2C_Master_Stop	;wreg free
  3494                           
  3495                           ;main.c: 625:     sendArduinoTireOperationStartMessage();
  3496  000828  EC64  F020         	call	_sendArduinoTireOperationStartMessage	;wreg free
  3497                           
  3498                           ;main.c: 629:     TIMER_INIT();
  3499  00082C  EC97  F020         	call	_TIMER_INIT	;wreg free
  3500                           
  3501                           ;main.c: 630:     millisecondsMeasured = 30000ul;
  3502  000830  0E30               	movlw	48
  3503  000832  6E75               	movwf	_millisecondsMeasured,c	;volatile
  3504  000834  0E75               	movlw	117
  3505  000836  6E76               	movwf	_millisecondsMeasured+1,c	;volatile
  3506  000838  0E00               	movlw	0
  3507  00083A  6E77               	movwf	_millisecondsMeasured+2,c	;volatile
  3508  00083C  0E00               	movlw	0
  3509  00083E  6E78               	movwf	_millisecondsMeasured+3,c	;volatile
  3510                           
  3511                           ;main.c: 632:  int goalSpeed = 20;
  3512  000840  0E00               	movlw	0
  3513  000842  0101               	movlb	1	; () banked
  3514  000844  6F28               	movwf	(doOperation@goalSpeed+1)& (0+255),b
  3515  000846  0E14               	movlw	20
  3516  000848  6F27               	movwf	doOperation@goalSpeed& (0+255),b
  3517                           
  3518                           ; BSR set to: 1
  3519                           ;main.c: 639:  enum operationStates currentOperationState = moveForward;
  3520                           
  3521                           ; BSR set to: 1
  3522                           
  3523                           ; BSR set to: 1
  3524                           
  3525                           ; BSR set to: 1
  3526                           
  3527                           ; BSR set to: 1
  3528                           
  3529                           ; BSR set to: 1
  3530  00084A  0E00               	movlw	0
  3531  00084C  6F40               	movwf	doOperation@currentOperationState& (0+255),b
  3532                           
  3533                           ; BSR set to: 1
  3534                           ;main.c: 642:  int tiresToDrop = 0;
  3535                           
  3536                           ; BSR set to: 1
  3537                           
  3538                           ; BSR set to: 1
  3539  00084E  0E00               	movlw	0
  3540  000850  6F33               	movwf	(doOperation@tiresToDrop+1)& (0+255),b
  3541  000852  0E00               	movlw	0
  3542  000854  6F32               	movwf	doOperation@tiresToDrop& (0+255),b
  3543                           
  3544                           ; BSR set to: 1
  3545                           ;main.c: 643:     int minimumSafeDistanceToPole;;main.c: 644:     int fourMetreEquivalen
      +                          t;;main.c: 645:     unsigned long timeInOperation = 150000ul;
  3546  000856  0EF0               	movlw	240
  3547  000858  6F3C               	movwf	doOperation@timeInOperation& (0+255),b
  3548  00085A  0E49               	movlw	73
  3549  00085C  6F3D               	movwf	(doOperation@timeInOperation+1)& (0+255),b
  3550  00085E  0E02               	movlw	2
  3551  000860  6F3E               	movwf	(doOperation@timeInOperation+2)& (0+255),b
  3552  000862  0E00               	movlw	0
  3553  000864  6F3F               	movwf	(doOperation@timeInOperation+3)& (0+255),b
  3554                           
  3555                           ; BSR set to: 1
  3556                           ;main.c: 646:     int motorAStartDistance = motorADistance;
  3557  000866  C0D9  F12A         	movff	_motorADistance,doOperation@motorAStartDistance	;volatile
  3558  00086A  C0DA  F12B         	movff	_motorADistance+1,doOperation@motorAStartDistance+1	;volatile
  3559                           
  3560                           ; BSR set to: 1
  3561                           ;main.c: 647:     int motorBStartDistance = motorBDistance;
  3562  00086E  C0D7  F12C         	movff	_motorBDistance,doOperation@motorBStartDistance	;volatile
  3563  000872  C0D8  F12D         	movff	_motorBDistance+1,doOperation@motorBStartDistance+1	;volatile
  3564                           
  3565                           ; BSR set to: 1
  3566                           ;main.c: 649:     int PIDData[2] = {0,0};
  3567  000876  0E00               	movlw	0
  3568  000878  6F00               	movwf	doOperation@PIDData& (0+255),b
  3569  00087A  0E00               	movlw	0
  3570  00087C  6F01               	movwf	(doOperation@PIDData+1)& (0+255),b
  3571  00087E  0E00               	movlw	0
  3572  000880  6F02               	movwf	(doOperation@PIDData+2)& (0+255),b
  3573  000882  0E00               	movlw	0
  3574  000884  6F03               	movwf	(doOperation@PIDData+3)& (0+255),b
  3575                           
  3576                           ; BSR set to: 1
  3577                           ;main.c: 650:     _Bool topLaserState;;main.c: 651:     _Bool topLaserStatePrev;;main.c:
      +                           652:     _Bool bottomLaserState;;main.c: 653:     _Bool bottomLaserStatePrev;;main.c: 6
      +                          54:     _Bool isDoneDrop;;main.c: 655:     init_motor_PWM();
  3578  000886  EC17  F020         	call	_init_motor_PWM	;wreg free
  3579                           
  3580                           ;main.c: 656:     int counted = 0;
  3581  00088A  0E00               	movlw	0
  3582  00088C  0101               	movlb	1	; () banked
  3583  00088E  6F2F               	movwf	(doOperation@counted+1)& (0+255),b
  3584  000890  0E00               	movlw	0
  3585  000892  6F2E               	movwf	doOperation@counted& (0+255),b
  3586                           
  3587                           ; BSR set to: 1
  3588                           ;main.c: 657:     int badCount = 0;
  3589  000894  0E00               	movlw	0
  3590  000896  6F1A               	movwf	(doOperation@badCount+1)& (0+255),b
  3591  000898  0E00               	movlw	0
  3592  00089A  6F19               	movwf	doOperation@badCount& (0+255),b
  3593                           
  3594                           ; BSR set to: 1
  3595                           ;main.c: 658:     int badCountBot = 0;
  3596  00089C  0E00               	movlw	0
  3597  00089E  6F1C               	movwf	(doOperation@badCountBot+1)& (0+255),b
  3598  0008A0  0E00               	movlw	0
  3599  0008A2  6F1B               	movwf	doOperation@badCountBot& (0+255),b
  3600                           
  3601                           ; BSR set to: 1
  3602                           ;main.c: 661:     int poleNumber = 0;
  3603  0008A4  0E00               	movlw	0
  3604  0008A6  6F1E               	movwf	(doOperation@poleNumber+1)& (0+255),b
  3605  0008A8  0E00               	movlw	0
  3606  0008AA  6F1D               	movwf	doOperation@poleNumber& (0+255),b
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;main.c: 662:     int tiresDeployedOnPole = 0;
  3610  0008AC  0E00               	movlw	0
  3611  0008AE  6F35               	movwf	(doOperation@tiresDeployedOnPole+1)& (0+255),b
  3612  0008B0  0E00               	movlw	0
  3613  0008B2  6F34               	movwf	doOperation@tiresDeployedOnPole& (0+255),b
  3614                           
  3615                           ; BSR set to: 1
  3616                           ;main.c: 663:     int tiresOnPoleAfterOp = 0;
  3617  0008B4  0E00               	movlw	0
  3618  0008B6  6F13               	movwf	(doOperation@tiresOnPoleAfterOp+1)& (0+255),b
  3619  0008B8  0E00               	movlw	0
  3620  0008BA  6F12               	movwf	doOperation@tiresOnPoleAfterOp& (0+255),b
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;main.c: 664:     int tiresOnPole = 0;
  3624  0008BC  0E00               	movlw	0
  3625  0008BE  6F37               	movwf	(doOperation@tiresOnPole+1)& (0+255),b
  3626  0008C0  0E00               	movlw	0
  3627  0008C2  6F36               	movwf	doOperation@tiresOnPole& (0+255),b
  3628                           
  3629                           ; BSR set to: 1
  3630                           ;main.c: 666:     int totalTiresSupplied = 0;
  3631  0008C4  0E00               	movlw	0
  3632  0008C6  6F20               	movwf	(doOperation@totalTiresSupplied+1)& (0+255),b
  3633  0008C8  0E00               	movlw	0
  3634  0008CA  6F1F               	movwf	doOperation@totalTiresSupplied& (0+255),b
  3635                           
  3636                           ; BSR set to: 1
  3637                           ;main.c: 668:     int distanceToPole = 0;
  3638  0008CC  0E00               	movlw	0
  3639  0008CE  6F31               	movwf	(doOperation@distanceToPole+1)& (0+255),b
  3640  0008D0  0E00               	movlw	0
  3641  0008D2  6F30               	movwf	doOperation@distanceToPole& (0+255),b
  3642                           
  3643                           ; BSR set to: 1
  3644                           ;main.c: 669:     int distanceFromLastPole = 0;
  3645  0008D4  0E00               	movlw	0
  3646  0008D6  6F22               	movwf	(doOperation@distanceFromLastPole+1)& (0+255),b
  3647  0008D8  0E00               	movlw	0
  3648  0008DA  6F21               	movwf	doOperation@distanceFromLastPole& (0+255),b
  3649                           
  3650                           ; BSR set to: 1
  3651                           ;main.c: 676:     TRISAbits.TRISA0 = 0;
  3652  0008DC  9092               	bcf	3986,0,c	;volatile
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;main.c: 677:     TRISAbits.TRISA1 = 0;
  3656  0008DE  9292               	bcf	3986,1,c	;volatile
  3657                           
  3658                           ; BSR set to: 1
  3659                           ;main.c: 678:     TRISAbits.TRISA2 = 0;
  3660  0008E0  9492               	bcf	3986,2,c	;volatile
  3661                           
  3662                           ; BSR set to: 1
  3663                           ;main.c: 679:     TRISAbits.TRISA3 = 0;
  3664  0008E2  9692               	bcf	3986,3,c	;volatile
  3665                           
  3666                           ; BSR set to: 1
  3667                           ;main.c: 682:     TRISAbits.TRISA4 = 0;
  3668  0008E4  9892               	bcf	3986,4,c	;volatile
  3669                           
  3670                           ; BSR set to: 1
  3671                           ;main.c: 683:     LATAbits.LATA4 = 1;
  3672  0008E6  8889               	bsf	3977,4,c	;volatile
  3673                           
  3674                           ; BSR set to: 1
  3675                           ;main.c: 684:     unsigned long timeStart = millisecondsMeasured;
  3676  0008E8  C075  F123         	movff	_millisecondsMeasured,doOperation@timeStart	;volatile
  3677  0008EC  C076  F124         	movff	_millisecondsMeasured+1,doOperation@timeStart+1	;volatile
  3678  0008F0  C077  F125         	movff	_millisecondsMeasured+2,doOperation@timeStart+2	;volatile
  3679  0008F4  C078  F126         	movff	_millisecondsMeasured+3,doOperation@timeStart+3	;volatile
  3680  0008F8                     l8926:
  3681                           
  3682                           ;main.c: 685:     while(millisecondsMeasured < timeStart + 100){
  3683  0008F8  0E64               	movlw	100
  3684  0008FA  0101               	movlb	1	; () banked
  3685  0008FC  2523               	addwf	doOperation@timeStart& (0+255),w,b
  3686  0008FE  0100               	movlb	0	; () banked
  3687  000900  6FBD               	movwf	??_doOperation& (0+255),b
  3688  000902  0E00               	movlw	0
  3689  000904  0101               	movlb	1	; () banked
  3690  000906  2124               	addwfc	(doOperation@timeStart+1)& (0+255),w,b
  3691  000908  0100               	movlb	0	; () banked
  3692  00090A  6FBE               	movwf	(??_doOperation+1)& (0+255),b
  3693  00090C  0E00               	movlw	0
  3694  00090E  0101               	movlb	1	; () banked
  3695  000910  2125               	addwfc	(doOperation@timeStart+2)& (0+255),w,b
  3696  000912  0100               	movlb	0	; () banked
  3697  000914  6FBF               	movwf	(??_doOperation+2)& (0+255),b
  3698  000916  0E00               	movlw	0
  3699  000918  0101               	movlb	1	; () banked
  3700  00091A  2126               	addwfc	(doOperation@timeStart+3)& (0+255),w,b
  3701  00091C  0100               	movlb	0	; () banked
  3702  00091E  6FC0               	movwf	(??_doOperation+3)& (0+255),b
  3703  000920  51BD               	movf	??_doOperation& (0+255),w,b
  3704  000922  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  3705  000924  51BE               	movf	(??_doOperation+1)& (0+255),w,b
  3706  000926  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  3707  000928  51BF               	movf	(??_doOperation+2)& (0+255),w,b
  3708  00092A  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  3709  00092C  51C0               	movf	(??_doOperation+3)& (0+255),w,b
  3710  00092E  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  3711  000930  A0D8               	btfss	status,0,c
  3712  000932  D7E2               	goto	l8926
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;main.c: 689:     topLaserState = PORTBbits.RB4;
  3716  000934  A881               	btfss	3969,4,c	;volatile
  3717  000936  D002               	goto	u10490
  3718  000938  0E01               	movlw	1
  3719  00093A  D001               	goto	u10496
  3720  00093C                     u10490:
  3721  00093C  0E00               	movlw	0
  3722  00093E                     u10496:
  3723  00093E  0101               	movlb	1	; () banked
  3724  000940  6F42               	movwf	doOperation@topLaserState& (0+255),b
  3725                           
  3726                           ; BSR set to: 1
  3727                           ;main.c: 690:     topLaserStatePrev = topLaserState;
  3728  000942  C142  F138         	movff	doOperation@topLaserState,doOperation@topLaserStatePrev
  3729                           
  3730                           ;main.c: 691:     bottomLaserState = PORTBbits.RB5;
  3731  000946  AA81               	btfss	3969,5,c	;volatile
  3732  000948  D002               	goto	u10500
  3733  00094A  0E01               	movlw	1
  3734  00094C  D001               	goto	u10506
  3735  00094E                     u10500:
  3736  00094E  0E00               	movlw	0
  3737  000950                     u10506:
  3738  000950  6F41               	movwf	doOperation@bottomLaserState& (0+255),b
  3739                           
  3740                           ; BSR set to: 1
  3741                           ;main.c: 692:     bottomLaserStatePrev = bottomLaserState;
  3742  000952  C141  F139         	movff	doOperation@bottomLaserState,doOperation@bottomLaserStatePrev
  3743                           
  3744                           ;main.c: 700:     _Bool send = 1;
  3745  000956  0E01               	movlw	1
  3746  000958  6F18               	movwf	doOperation@send& (0+255),b
  3747  00095A                     l8934:
  3748                           
  3749                           ;main.c: 706:         counted ++;
  3750  00095A  0101               	movlb	1	; () banked
  3751  00095C  4B2E               	infsnz	doOperation@counted& (0+255),f,b
  3752  00095E  2B2F               	incf	(doOperation@counted+1)& (0+255),f,b
  3753                           
  3754                           ; BSR set to: 1
  3755                           ;main.c: 707:         topLaserStatePrev = topLaserState;
  3756  000960  C142  F138         	movff	doOperation@topLaserState,doOperation@topLaserStatePrev
  3757                           
  3758                           ; BSR set to: 1
  3759                           ;main.c: 708:         topLaserState = PORTBbits.RB4;
  3760  000964  A881               	btfss	3969,4,c	;volatile
  3761  000966  D002               	goto	u10510
  3762  000968  0E01               	movlw	1
  3763  00096A  D001               	goto	u10516
  3764  00096C                     u10510:
  3765  00096C  0E00               	movlw	0
  3766  00096E                     u10516:
  3767  00096E  6F42               	movwf	doOperation@topLaserState& (0+255),b
  3768                           
  3769                           ; BSR set to: 1
  3770                           ;main.c: 709:         bottomLaserStatePrev = bottomLaserState;
  3771  000970  C141  F139         	movff	doOperation@bottomLaserState,doOperation@bottomLaserStatePrev
  3772                           
  3773                           ; BSR set to: 1
  3774                           ;main.c: 710:         bottomLaserState = PORTBbits.RB5;
  3775  000974  AA81               	btfss	3969,5,c	;volatile
  3776  000976  D002               	goto	u10520
  3777  000978  0E01               	movlw	1
  3778  00097A  D001               	goto	u10526
  3779  00097C                     u10520:
  3780  00097C  0E00               	movlw	0
  3781  00097E                     u10526:
  3782  00097E  6F41               	movwf	doOperation@bottomLaserState& (0+255),b
  3783                           
  3784                           ;main.c: 713:         switch (currentOperationState){
  3785  000980  D1BC               	goto	l9074
  3786  000982                     l8944:
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;main.c: 715:                 if (counted%100 == 0){
  3790  000982  C12E  F006         	movff	doOperation@counted,___awmod@dividend
  3791  000986  C12F  F007         	movff	doOperation@counted+1,___awmod@dividend+1
  3792  00098A  0E00               	movlw	0
  3793  00098C  6E09               	movwf	___awmod@divisor+1,c
  3794  00098E  0E64               	movlw	100
  3795  000990  6E08               	movwf	___awmod@divisor,c
  3796  000992  EC97  F01C         	call	___awmod	;wreg free
  3797  000996  5006               	movf	?___awmod,w,c
  3798  000998  1007               	iorwf	?___awmod+1,w,c
  3799  00099A  A4D8               	btfss	status,2,c
  3800  00099C  D04F               	goto	l8966
  3801                           
  3802                           ;main.c: 716:                 { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000
      +                          .0)));};
  3803  00099E  0E01               	movlw	1
  3804  0009A0  ECD5  F020         	call	_lcdInst
  3805  0009A4  0E11               	movlw	17
  3806  0009A6  0100               	movlb	0	; () banked
  3807  0009A8  6FBD               	movwf	??_doOperation& (0+255),b
  3808  0009AA  0E3A               	movlw	58
  3809  0009AC                     u11017:
  3810  0009AC  2EE8               	decfsz	wreg,f,c
  3811  0009AE  D7FE               	bra	u11017
  3812  0009B0  2FBD               	decfsz	??_doOperation& (0+255),f,b
  3813  0009B2  D7FC               	bra	u11017
  3814  0009B4  F000               	nop	
  3815                           
  3816                           ;main.c: 717:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000
      +                          .0)));};
  3817  0009B6  0E80               	movlw	128
  3818  0009B8  ECD5  F020         	call	_lcdInst
  3819  0009BC  0E07               	movlw	7
  3820  0009BE  0100               	movlb	0	; () banked
  3821  0009C0  6FBD               	movwf	??_doOperation& (0+255),b
  3822  0009C2  0E7D               	movlw	125
  3823  0009C4                     u11027:
  3824  0009C4  2EE8               	decfsz	wreg,f,c
  3825  0009C6  D7FE               	bra	u11027
  3826  0009C8  2FBD               	decfsz	??_doOperation& (0+255),f,b
  3827  0009CA  D7FC               	bra	u11027
  3828                           
  3829                           ;main.c: 718:                 printf("%lu", millisecondsMeasured);
  3830  0009CC  0EEC               	movlw	low STR_20
  3831  0009CE  0100               	movlb	0	; () banked
  3832  0009D0  6F9D               	movwf	printf@fmt& (0+255),b
  3833  0009D2  0EFF               	movlw	high STR_20
  3834  0009D4  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  3835  0009D6  C075  F09F         	movff	_millisecondsMeasured,?_printf+2	;volatile
  3836  0009DA  C076  F0A0         	movff	_millisecondsMeasured+1,?_printf+3	;volatile
  3837  0009DE  C077  F0A1         	movff	_millisecondsMeasured+2,?_printf+4	;volatile
  3838  0009E2  C078  F0A2         	movff	_millisecondsMeasured+3,?_printf+5	;volatile
  3839  0009E6  EC2B  F020         	call	_printf	;wreg free
  3840  0009EA  0E90               	movlw	144
  3841  0009EC  ECD5  F020         	call	_lcdInst
  3842                           
  3843                           ;main.c: 720:                 printf("%d", topLaserState);
  3844  0009F0  0EE3               	movlw	low (STR_23+3)
  3845  0009F2  0100               	movlb	0	; () banked
  3846  0009F4  6F9D               	movwf	printf@fmt& (0+255),b
  3847  0009F6  0EFF               	movlw	high (STR_23+3)
  3848  0009F8  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  3849  0009FA  C142  F09F         	movff	doOperation@topLaserState,?_printf+2
  3850  0009FE  6BA0               	clrf	(?_printf+3)& (0+255),b
  3851  000A00  EC2B  F020         	call	_printf	;wreg free
  3852  000A04  0EC0               	movlw	192
  3853  000A06  ECD5  F020         	call	_lcdInst
  3854                           
  3855                           ;main.c: 722:                 printf("B: %d", motorBDistance);
  3856  000A0A  0EE6               	movlw	low STR_22
  3857  000A0C  0100               	movlb	0	; () banked
  3858  000A0E  6F9D               	movwf	printf@fmt& (0+255),b
  3859  000A10  0EFF               	movlw	high STR_22
  3860  000A12  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  3861  000A14  C0D7  F09F         	movff	_motorBDistance,?_printf+2	;volatile
  3862  000A18  C0D8  F0A0         	movff	_motorBDistance+1,?_printf+3	;volatile
  3863  000A1C  EC2B  F020         	call	_printf	;wreg free
  3864  000A20  0ED0               	movlw	208
  3865  000A22  ECD5  F020         	call	_lcdInst
  3866                           
  3867                           ;main.c: 724:                 printf("A: %d", motorADistance);
  3868  000A26  0EE0               	movlw	low STR_23
  3869  000A28  0100               	movlb	0	; () banked
  3870  000A2A  6F9D               	movwf	printf@fmt& (0+255),b
  3871  000A2C  0EFF               	movlw	high STR_23
  3872  000A2E  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  3873  000A30  C0D9  F09F         	movff	_motorADistance,?_printf+2	;volatile
  3874  000A34  C0DA  F0A0         	movff	_motorADistance+1,?_printf+3	;volatile
  3875  000A38  EC2B  F020         	call	_printf	;wreg free
  3876  000A3C                     l8966:
  3877                           
  3878                           ;main.c: 743:                 errorCorrectedMove(goalSpeed, 1, motorAStartDistance, moto
      +                          rBStartDistance, 0.1);
  3879  000A3C  C127  F088         	movff	doOperation@goalSpeed,errorCorrectedMove@goalSpeed
  3880  000A40  C128  F089         	movff	doOperation@goalSpeed+1,errorCorrectedMove@goalSpeed+1
  3881  000A44  0E00               	movlw	0
  3882  000A46  0100               	movlb	0	; () banked
  3883  000A48  6F8A               	movwf	errorCorrectedMove@turnRatio& (0+255),b
  3884  000A4A  0E00               	movlw	0
  3885  000A4C  6F8B               	movwf	(errorCorrectedMove@turnRatio+1)& (0+255),b
  3886  000A4E  0E80               	movlw	128
  3887  000A50  6F8C               	movwf	(errorCorrectedMove@turnRatio+2)& (0+255),b
  3888  000A52  0E3F               	movlw	63
  3889  000A54  6F8D               	movwf	(errorCorrectedMove@turnRatio+3)& (0+255),b
  3890  000A56  C12A  F08E         	movff	doOperation@motorAStartDistance,errorCorrectedMove@motorAStartDistance
  3891  000A5A  C12B  F08F         	movff	doOperation@motorAStartDistance+1,errorCorrectedMove@motorAStartDistance+1
  3892  000A5E  C12C  F090         	movff	doOperation@motorBStartDistance,errorCorrectedMove@motorBStartDistance
  3893  000A62  C12D  F091         	movff	doOperation@motorBStartDistance+1,errorCorrectedMove@motorBStartDistance+1
  3894  000A66  0ECD               	movlw	205
  3895  000A68  6F92               	movwf	errorCorrectedMove@correctionConstant& (0+255),b
  3896  000A6A  0ECC               	movlw	204
  3897  000A6C  6F93               	movwf	(errorCorrectedMove@correctionConstant+1)& (0+255),b
  3898  000A6E  0ECC               	movlw	204
  3899  000A70  6F94               	movwf	(errorCorrectedMove@correctionConstant+2)& (0+255),b
  3900  000A72  0E3D               	movlw	61
  3901  000A74  6F95               	movwf	(errorCorrectedMove@correctionConstant+3)& (0+255),b
  3902  000A76  ECAF  F010         	call	_errorCorrectedMove	;wreg free
  3903                           
  3904                           ;main.c: 745:                 break;
  3905  000A7A  D15D               	goto	l9076
  3906  000A7C                     l8968:
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;main.c: 748:                 distanceFromLastPole = motorADistance - distanceToPole;
  3910  000A7C  0101               	movlb	1	; () banked
  3911  000A7E  5130               	movf	doOperation@distanceToPole& (0+255),w,b
  3912  000A80  0100               	movlb	0	; () banked
  3913  000A82  5DD9               	subwf	_motorADistance& (0+255),w,b	;volatile
  3914  000A84  0101               	movlb	1	; () banked
  3915  000A86  6F21               	movwf	doOperation@distanceFromLastPole& (0+255),b
  3916  000A88  5131               	movf	(doOperation@distanceToPole+1)& (0+255),w,b
  3917  000A8A  0100               	movlb	0	; () banked
  3918  000A8C  59DA               	subwfb	(_motorADistance+1)& (0+255),w,b	;volatile
  3919  000A8E  0101               	movlb	1	; () banked
  3920  000A90  6F22               	movwf	(doOperation@distanceFromLastPole+1)& (0+255),b
  3921                           
  3922                           ; BSR set to: 1
  3923                           ;main.c: 749:                 distanceToPole = motorADistance;
  3924  000A92  C0D9  F130         	movff	_motorADistance,doOperation@distanceToPole	;volatile
  3925  000A96  C0DA  F131         	movff	_motorADistance+1,doOperation@distanceToPole+1	;volatile
  3926                           
  3927                           ; BSR set to: 1
  3928                           ;main.c: 751:                 poleNumber++;
  3929  000A9A  4B1D               	infsnz	doOperation@poleNumber& (0+255),f,b
  3930  000A9C  2B1E               	incf	(doOperation@poleNumber+1)& (0+255),f,b
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;main.c: 754:                 tiresOnPole = tirePositioning(timeInOperation);
  3934  000A9E  C13C  F0A7         	movff	doOperation@timeInOperation,tirePositioning@maxOperationTime
  3935  000AA2  C13D  F0A8         	movff	doOperation@timeInOperation+1,tirePositioning@maxOperationTime+1
  3936  000AA6  C13E  F0A9         	movff	doOperation@timeInOperation+2,tirePositioning@maxOperationTime+2
  3937  000AAA  C13F  F0AA         	movff	doOperation@timeInOperation+3,tirePositioning@maxOperationTime+3
  3938  000AAE  EC5E  F00C         	call	_tirePositioning	;wreg free
  3939  000AB2  C0A7  F136         	movff	?_tirePositioning,doOperation@tiresOnPole
  3940  000AB6  C0A8  F137         	movff	?_tirePositioning+1,doOperation@tiresOnPole+1
  3941                           
  3942                           ;main.c: 755:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  3943  000ABA  0E01               	movlw	1
  3944  000ABC  ECD5  F020         	call	_lcdInst
  3945  000AC0  0E11               	movlw	17
  3946  000AC2  0100               	movlb	0	; () banked
  3947  000AC4  6FBD               	movwf	??_doOperation& (0+255),b
  3948  000AC6  0E3A               	movlw	58
  3949  000AC8                     u11037:
  3950  000AC8  2EE8               	decfsz	wreg,f,c
  3951  000ACA  D7FE               	bra	u11037
  3952  000ACC  2FBD               	decfsz	??_doOperation& (0+255),f,b
  3953  000ACE  D7FC               	bra	u11037
  3954  000AD0  F000               	nop	
  3955                           
  3956                           ;main.c: 756:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000
      +                          .0)));};
  3957  000AD2  0E80               	movlw	128
  3958  000AD4  ECD5  F020         	call	_lcdInst
  3959  000AD8  0E07               	movlw	7
  3960  000ADA  0100               	movlb	0	; () banked
  3961  000ADC  6FBD               	movwf	??_doOperation& (0+255),b
  3962  000ADE  0E7D               	movlw	125
  3963  000AE0                     u11047:
  3964  000AE0  2EE8               	decfsz	wreg,f,c
  3965  000AE2  D7FE               	bra	u11047
  3966  000AE4  2FBD               	decfsz	??_doOperation& (0+255),f,b
  3967  000AE6  D7FC               	bra	u11047
  3968                           
  3969                           ;main.c: 757:                 printf("TIRE DROP");
  3970  000AE8  0E91               	movlw	low STR_24
  3971  000AEA  0100               	movlb	0	; () banked
  3972  000AEC  6F9D               	movwf	printf@fmt& (0+255),b
  3973  000AEE  0EFF               	movlw	high STR_24
  3974  000AF0  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  3975  000AF2  EC2B  F020         	call	_printf	;wreg free
  3976  000AF6  0EC0               	movlw	192
  3977  000AF8  ECD5  F020         	call	_lcdInst
  3978                           
  3979                           ;main.c: 759:                 printf("%d on pole", tiresOnPole);
  3980  000AFC  0E66               	movlw	low STR_25
  3981  000AFE  0100               	movlb	0	; () banked
  3982  000B00  6F9D               	movwf	printf@fmt& (0+255),b
  3983  000B02  0EFF               	movlw	high STR_25
  3984  000B04  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  3985  000B06  C136  F09F         	movff	doOperation@tiresOnPole,?_printf+2
  3986  000B0A  C137  F0A0         	movff	doOperation@tiresOnPole+1,?_printf+3
  3987  000B0E  EC2B  F020         	call	_printf	;wreg free
  3988                           
  3989                           ;main.c: 761:                 setMotorSpeeds(0, 1, 1, 0);
  3990  000B12  0E00               	movlw	0
  3991  000B14  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  3992  000B16  0E00               	movlw	0
  3993  000B18  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  3994  000B1A  0E01               	movlw	1
  3995  000B1C  6E6E               	movwf	setMotorSpeeds@Aforward,c
  3996  000B1E  0E01               	movlw	1
  3997  000B20  6E6F               	movwf	setMotorSpeeds@Bforward,c
  3998  000B22  0E00               	movlw	0
  3999  000B24  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4000  000B26  0E00               	movlw	0
  4001  000B28  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4002  000B2A  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4003                           
  4004                           ;main.c: 770:     sendArduinoTireDropRequest();
  4005  000B2E  EC75  F020         	call	_sendArduinoTireDropRequest	;wreg free
  4006                           
  4007                           ;main.c: 773:                 tiresToDrop = 1;
  4008  000B32  0E00               	movlw	0
  4009  000B34  0101               	movlb	1	; () banked
  4010  000B36  6F33               	movwf	(doOperation@tiresToDrop+1)& (0+255),b
  4011  000B38  0E01               	movlw	1
  4012  000B3A  6F32               	movwf	doOperation@tiresToDrop& (0+255),b
  4013                           
  4014                           ; BSR set to: 1
  4015                           ;main.c: 774:                 currentOperationState = tireDrop;
  4016  000B3C  0E02               	movlw	2
  4017  000B3E  D024               	goto	L8
  4018  000B40                     l8998:
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;main.c: 781:     isDoneDrop = requestIsTireDropDone();
  4022  000B40  ECEC  F01F         	call	_requestIsTireDropDone	;wreg free
  4023  000B44  0101               	movlb	1	; () banked
  4024  000B46  6F29               	movwf	doOperation@isDoneDrop& (0+255),b
  4025                           
  4026                           ; BSR set to: 1
  4027                           ;main.c: 783:     if (isDoneDrop){
  4028  000B48  5129               	movf	doOperation@isDoneDrop& (0+255),w,b
  4029  000B4A  B4D8               	btfsc	status,2,c
  4030  000B4C  D0F4               	goto	l9076
  4031                           
  4032                           ; BSR set to: 1
  4033                           ;main.c: 784:      tiresToDrop -- ;
  4034  000B4E  0732               	decf	doOperation@tiresToDrop& (0+255),f,b
  4035  000B50  A0D8               	btfss	status,0,c
  4036  000B52  0733               	decf	(doOperation@tiresToDrop+1)& (0+255),f,b
  4037                           
  4038                           ;main.c: 785:                     tiresDeployedOnPole++;
  4039  000B54  4B34               	infsnz	doOperation@tiresDeployedOnPole& (0+255),f,b
  4040  000B56  2B35               	incf	(doOperation@tiresDeployedOnPole+1)& (0+255),f,b
  4041                           
  4042                           ; BSR set to: 1
  4043                           ;main.c: 786:      if (tiresToDrop == 0){
  4044  000B58  5132               	movf	doOperation@tiresToDrop& (0+255),w,b
  4045  000B5A  1133               	iorwf	(doOperation@tiresToDrop+1)& (0+255),w,b
  4046  000B5C  A4D8               	btfss	status,2,c
  4047  000B5E  D00F               	goto	l9012
  4048                           
  4049                           ; BSR set to: 1
  4050                           ;main.c: 787:       currentOperationState = leavePole;
  4051  000B60  0E06               	movlw	6
  4052  000B62  6F40               	movwf	doOperation@currentOperationState& (0+255),b
  4053                           
  4054                           ;main.c: 789:                         tiresOnPole = 0;
  4055  000B64  0E00               	movlw	0
  4056  000B66  6F37               	movwf	(doOperation@tiresOnPole+1)& (0+255),b
  4057  000B68  0E00               	movlw	0
  4058  000B6A  6F36               	movwf	doOperation@tiresOnPole& (0+255),b
  4059                           
  4060                           ; BSR set to: 1
  4061                           ;main.c: 790:                         totalTiresSupplied += tiresDeployedOnPole;
  4062  000B6C  5134               	movf	doOperation@tiresDeployedOnPole& (0+255),w,b
  4063  000B6E  271F               	addwf	doOperation@totalTiresSupplied& (0+255),f,b
  4064  000B70  5135               	movf	(doOperation@tiresDeployedOnPole+1)& (0+255),w,b
  4065  000B72  2320               	addwfc	(doOperation@totalTiresSupplied+1)& (0+255),f,b
  4066                           
  4067                           ; BSR set to: 1
  4068                           ;main.c: 791:                         tiresDeployedOnPole = 0;
  4069  000B74  0E00               	movlw	0
  4070  000B76  6F35               	movwf	(doOperation@tiresDeployedOnPole+1)& (0+255),b
  4071  000B78  0E00               	movlw	0
  4072  000B7A  6F34               	movwf	doOperation@tiresDeployedOnPole& (0+255),b
  4073                           
  4074                           ;main.c: 792:      } else {
  4075  000B7C  D0DC               	goto	l9076
  4076  000B7E                     l9012:
  4077                           
  4078                           ; BSR set to: 1
  4079                           ;main.c: 794:       sendArduinoTireDropRequest();
  4080  000B7E  EC75  F020         	call	_sendArduinoTireDropRequest	;wreg free
  4081  000B82  D0D9               	goto	l9076
  4082  000B84                     l9014:
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;main.c: 803:                 currentOperationState = moveForward;
  4086  000B84  0E00               	movlw	0
  4087  000B86  D088               	goto	L9
  4088  000B88                     L8:
  4089  000B88  6F40               	movwf	doOperation@currentOperationState& (0+255),b
  4090                           
  4091                           ;main.c: 804:     break;
  4092  000B8A  D0D5               	goto	l9076
  4093  000B8C                     l9016:
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;main.c: 807:                 { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000
      +                          .0)));};
  4097  000B8C  0E01               	movlw	1
  4098  000B8E  ECD5  F020         	call	_lcdInst
  4099  000B92  0E11               	movlw	17
  4100  000B94  0100               	movlb	0	; () banked
  4101  000B96  6FBD               	movwf	??_doOperation& (0+255),b
  4102  000B98  0E3A               	movlw	58
  4103  000B9A                     u11057:
  4104  000B9A  2EE8               	decfsz	wreg,f,c
  4105  000B9C  D7FE               	bra	u11057
  4106  000B9E  2FBD               	decfsz	??_doOperation& (0+255),f,b
  4107  000BA0  D7FC               	bra	u11057
  4108  000BA2  F000               	nop	
  4109                           
  4110                           ;main.c: 808:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000
      +                          .0)));};
  4111  000BA4  0E80               	movlw	128
  4112  000BA6  ECD5  F020         	call	_lcdInst
  4113  000BAA  0E07               	movlw	7
  4114  000BAC  0100               	movlb	0	; () banked
  4115  000BAE  6FBD               	movwf	??_doOperation& (0+255),b
  4116  000BB0  0E7D               	movlw	125
  4117  000BB2                     u11067:
  4118  000BB2  2EE8               	decfsz	wreg,f,c
  4119  000BB4  D7FE               	bra	u11067
  4120  000BB6  2FBD               	decfsz	??_doOperation& (0+255),f,b
  4121  000BB8  D7FC               	bra	u11067
  4122                           
  4123                           ;main.c: 809:                 printf("Leaving Pole");
  4124  000BBA  0E41               	movlw	low STR_26
  4125  000BBC  0100               	movlb	0	; () banked
  4126  000BBE  6F9D               	movwf	printf@fmt& (0+255),b
  4127  000BC0  0EFF               	movlw	high STR_26
  4128  000BC2  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  4129  000BC4  EC2B  F020         	call	_printf	;wreg free
  4130                           
  4131                           ;main.c: 810:                 int startedDistA = motorADistance;
  4132  000BC8  C0D9  F114         	movff	_motorADistance,doOperation@startedDistA	;volatile
  4133  000BCC  C0DA  F115         	movff	_motorADistance+1,doOperation@startedDistA+1	;volatile
  4134                           
  4135                           ;main.c: 811:                 int startedDistB = motorBDistance;
  4136  000BD0  C0D7  F116         	movff	_motorBDistance,doOperation@startedDistB	;volatile
  4137  000BD4  C0D8  F117         	movff	_motorBDistance+1,doOperation@startedDistB+1	;volatile
  4138                           
  4139                           ;main.c: 815:                 opErrorCorrectionDegrees(30, 1, 0.1, 3000, timeInOperation
      +                          );
  4140  000BD8  0E00               	movlw	0
  4141  000BDA  0100               	movlb	0	; () banked
  4142  000BDC  6FA1               	movwf	(opErrorCorrectionDegrees@goalSpeed+1)& (0+255),b
  4143  000BDE  0E1E               	movlw	30
  4144  000BE0  6FA0               	movwf	opErrorCorrectionDegrees@goalSpeed& (0+255),b
  4145  000BE2  0E00               	movlw	0
  4146  000BE4  6FA3               	movwf	(opErrorCorrectionDegrees@turnRatio+1)& (0+255),b
  4147  000BE6  0E01               	movlw	1
  4148  000BE8  6FA2               	movwf	opErrorCorrectionDegrees@turnRatio& (0+255),b
  4149  000BEA  0ECD               	movlw	205
  4150  000BEC  6FA4               	movwf	opErrorCorrectionDegrees@correctionConstant& (0+255),b
  4151  000BEE  0ECC               	movlw	204
  4152  000BF0  6FA5               	movwf	(opErrorCorrectionDegrees@correctionConstant+1)& (0+255),b
  4153  000BF2  0ECC               	movlw	204
  4154  000BF4  6FA6               	movwf	(opErrorCorrectionDegrees@correctionConstant+2)& (0+255),b
  4155  000BF6  0E3D               	movlw	61
  4156  000BF8  6FA7               	movwf	(opErrorCorrectionDegrees@correctionConstant+3)& (0+255),b
  4157  000BFA  0E0B               	movlw	11
  4158  000BFC  6FA9               	movwf	(opErrorCorrectionDegrees@distanceDegrees+1)& (0+255),b
  4159  000BFE  0EB8               	movlw	184
  4160  000C00  6FA8               	movwf	opErrorCorrectionDegrees@distanceDegrees& (0+255),b
  4161  000C02  C13C  F0AA         	movff	doOperation@timeInOperation,opErrorCorrectionDegrees@maxOperationTime
  4162  000C06  C13D  F0AB         	movff	doOperation@timeInOperation+1,opErrorCorrectionDegrees@maxOperationTime+1
  4163  000C0A  C13E  F0AC         	movff	doOperation@timeInOperation+2,opErrorCorrectionDegrees@maxOperationTime+2
  4164  000C0E  C13F  F0AD         	movff	doOperation@timeInOperation+3,opErrorCorrectionDegrees@maxOperationTime+3
  4165  000C12  EC3C  F01A         	call	_opErrorCorrectionDegrees	;wreg free
  4166                           
  4167                           ;main.c: 816:                 setMotorSpeeds(0, 1, 1, 0);
  4168  000C16  0E00               	movlw	0
  4169  000C18  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  4170  000C1A  0E00               	movlw	0
  4171  000C1C  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  4172  000C1E  0E01               	movlw	1
  4173  000C20  6E6E               	movwf	setMotorSpeeds@Aforward,c
  4174  000C22  0E01               	movlw	1
  4175  000C24  6E6F               	movwf	setMotorSpeeds@Bforward,c
  4176  000C26  0E00               	movlw	0
  4177  000C28  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4178  000C2A  0E00               	movlw	0
  4179  000C2C  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4180  000C2E  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4181                           
  4182                           ;main.c: 817:                 opDelay(4000, timeInOperation);
  4183  000C32  0E0F               	movlw	15
  4184  000C34  6E07               	movwf	opDelay@millis+1,c
  4185  000C36  0EA0               	movlw	160
  4186  000C38  6E06               	movwf	opDelay@millis,c
  4187  000C3A  C13C  F008         	movff	doOperation@timeInOperation,opDelay@maxOperationTime
  4188  000C3E  C13D  F009         	movff	doOperation@timeInOperation+1,opDelay@maxOperationTime+1
  4189  000C42  C13E  F00A         	movff	doOperation@timeInOperation+2,opDelay@maxOperationTime+2
  4190  000C46  C13F  F00B         	movff	doOperation@timeInOperation+3,opDelay@maxOperationTime+3
  4191  000C4A  EC6D  F01D         	call	_opDelay	;wreg free
  4192                           
  4193                           ;main.c: 819:                 motorAStartDistance = 0;
  4194  000C4E  0E00               	movlw	0
  4195  000C50  0101               	movlb	1	; () banked
  4196  000C52  6F2B               	movwf	(doOperation@motorAStartDistance+1)& (0+255),b
  4197  000C54  0E00               	movlw	0
  4198  000C56  6F2A               	movwf	doOperation@motorAStartDistance& (0+255),b
  4199                           
  4200                           ; BSR set to: 1
  4201                           ;main.c: 820:                 motorBStartDistance = 0;
  4202  000C58  0E00               	movlw	0
  4203  000C5A  6F2D               	movwf	(doOperation@motorBStartDistance+1)& (0+255),b
  4204  000C5C  0E00               	movlw	0
  4205  000C5E  6F2C               	movwf	doOperation@motorBStartDistance& (0+255),b
  4206                           
  4207                           ; BSR set to: 1
  4208                           ;main.c: 821:                 currentOperationState = moveForward;
  4209  000C60  0E00               	movlw	0
  4210  000C62  6F40               	movwf	doOperation@currentOperationState& (0+255),b
  4211                           
  4212                           ; BSR set to: 1
  4213                           ;main.c: 824:                 topLaserState = PORTBbits.RB4;
  4214  000C64  A881               	btfss	3969,4,c	;volatile
  4215  000C66  D002               	goto	u10560
  4216  000C68  0E01               	movlw	1
  4217  000C6A  D001               	goto	u10566
  4218  000C6C                     u10560:
  4219  000C6C  0E00               	movlw	0
  4220  000C6E                     u10566:
  4221  000C6E  6F42               	movwf	doOperation@topLaserState& (0+255),b
  4222                           
  4223                           ; BSR set to: 1
  4224                           ;main.c: 825:                 topLaserStatePrev = PORTBbits.RB4;
  4225  000C70  A881               	btfss	3969,4,c	;volatile
  4226  000C72  D002               	goto	u10570
  4227  000C74  0E01               	movlw	1
  4228  000C76  D001               	goto	u10576
  4229  000C78                     u10570:
  4230  000C78  0E00               	movlw	0
  4231  000C7A                     u10576:
  4232  000C7A  6F38               	movwf	doOperation@topLaserStatePrev& (0+255),b
  4233                           
  4234                           ; BSR set to: 1
  4235                           ;main.c: 826:                 bottomLaserState = PORTBbits.RB5;
  4236  000C7C  AA81               	btfss	3969,5,c	;volatile
  4237  000C7E  D002               	goto	u10580
  4238  000C80  0E01               	movlw	1
  4239  000C82  D001               	goto	u10586
  4240  000C84                     u10580:
  4241  000C84  0E00               	movlw	0
  4242  000C86                     u10586:
  4243  000C86  6F41               	movwf	doOperation@bottomLaserState& (0+255),b
  4244                           
  4245                           ; BSR set to: 1
  4246                           ;main.c: 827:                 bottomLaserStatePrev = PORTBbits.RB5;
  4247  000C88  AA81               	btfss	3969,5,c	;volatile
  4248  000C8A  D002               	goto	u10590
  4249  000C8C  0E01               	movlw	1
  4250  000C8E  D001               	goto	u10596
  4251  000C90                     u10590:
  4252  000C90  0E00               	movlw	0
  4253  000C92                     u10596:
  4254  000C92  6F39               	movwf	doOperation@bottomLaserStatePrev& (0+255),b
  4255                           
  4256                           ;main.c: 829:                 break;
  4257  000C94  D050               	goto	l9076
  4258  000C96                     l9048:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;main.c: 832:     currentOperationState = complete;
  4262  000C96  0E05               	movlw	5
  4263  000C98                     L9:
  4264  000C98  0101               	movlb	1	; () banked
  4265  000C9A  D776               	goto	L8
  4266  000C9C                     l9050:
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;main.c: 836:                 sendArduinoAbortOperationMessage();
  4270  000C9C  EC86  F020         	call	_sendArduinoAbortOperationMessage	;wreg free
  4271                           
  4272                           ;main.c: 837:                 for (int i = 0; i < 48; i++){
  4273  000CA0  0E00               	movlw	0
  4274  000CA2  0101               	movlb	1	; () banked
  4275  000CA4  6F3B               	movwf	(doOperation@i+1)& (0+255),b
  4276  000CA6  0E00               	movlw	0
  4277  000CA8  6F3A               	movwf	doOperation@i& (0+255),b
  4278  000CAA                     l9054:
  4279                           
  4280                           ; BSR set to: 1
  4281  000CAA  BF3B               	btfsc	(doOperation@i+1)& (0+255),7,b
  4282  000CAC  D006               	goto	l9058
  4283  000CAE  513B               	movf	(doOperation@i+1)& (0+255),w,b
  4284  000CB0  E114               	bnz	l9064
  4285  000CB2  0E30               	movlw	48
  4286  000CB4  5D3A               	subwf	doOperation@i& (0+255),w,b
  4287  000CB6  B0D8               	btfsc	status,0,c
  4288  000CB8  D010               	goto	l9064
  4289  000CBA                     l9058:
  4290                           
  4291                           ; BSR set to: 1
  4292                           ;main.c: 838:                     logs[0][i] = 3;
  4293  000CBA  90D8               	bcf	status,0,c
  4294  000CBC  353A               	rlcf	doOperation@i& (0+255),w,b
  4295  000CBE  6ED9               	movwf	fsr2l,c
  4296  000CC0  353B               	rlcf	(doOperation@i+1)& (0+255),w,b
  4297  000CC2  6EDA               	movwf	fsr2h,c
  4298  000CC4  0E78               	movlw	low _logs
  4299  000CC6  26D9               	addwf	fsr2l,f,c
  4300  000CC8  0E01               	movlw	high _logs
  4301  000CCA  22DA               	addwfc	fsr2h,f,c
  4302  000CCC  0E03               	movlw	3
  4303  000CCE  6EDE               	movwf	postinc2,c
  4304  000CD0  0E00               	movlw	0
  4305  000CD2  6EDD               	movwf	postdec2,c
  4306                           
  4307                           ; BSR set to: 1
  4308                           ;main.c: 839:                 }
  4309  000CD4  4B3A               	infsnz	doOperation@i& (0+255),f,b
  4310  000CD6  2B3B               	incf	(doOperation@i+1)& (0+255),f,b
  4311  000CD8  D7E8               	goto	l9054
  4312  000CDA                     l9064:
  4313                           
  4314                           ; BSR set to: 1
  4315                           ;main.c: 840:     setMotorSpeeds(0, 1, 1, 0);
  4316  000CDA  0E00               	movlw	0
  4317  000CDC  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  4318  000CDE  0E00               	movlw	0
  4319  000CE0  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  4320  000CE2  0E01               	movlw	1
  4321  000CE4  6E6E               	movwf	setMotorSpeeds@Aforward,c
  4322  000CE6  0E01               	movlw	1
  4323  000CE8  6E6F               	movwf	setMotorSpeeds@Bforward,c
  4324  000CEA  0E00               	movlw	0
  4325  000CEC  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4326  000CEE  0E00               	movlw	0
  4327  000CF0  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4328  000CF2  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4329                           
  4330                           ;main.c: 841:                 LATAbits.LATA4 = 0;
  4331  000CF6  9889               	bcf	3977,4,c	;volatile
  4332  000CF8  0012               	return	
  4333  000CFA                     l9074:
  4334                           
  4335                           ; BSR set to: 1
  4336  000CFA  5140               	movf	doOperation@currentOperationState& (0+255),w,b
  4337  000CFC  0100               	movlb	0	; () banked
  4338  000CFE  6FBD               	movwf	??_doOperation& (0+255),b
  4339  000D00  6BBE               	clrf	(??_doOperation+1)& (0+255),b
  4340                           
  4341                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4342                           ; Switch size 1, requested type "simple"
  4343                           ; Number of cases is 1, Range of values is 0 to 0
  4344                           ; switch strategies available:
  4345                           ; Name         Instructions Cycles
  4346                           ; simple_byte            4     3 (average)
  4347                           ;	Chosen strategy is simple_byte
  4348  000D02  51BE               	movf	(??_doOperation+1)& (0+255),w,b
  4349  000D04  0A00               	xorlw	0	; case 0
  4350  000D06  A4D8               	btfss	status,2,c
  4351  000D08  D016               	goto	l9076
  4352                           
  4353                           ; BSR set to: 0
  4354                           ; Switch size 1, requested type "simple"
  4355                           ; Number of cases is 7, Range of values is 0 to 6
  4356                           ; switch strategies available:
  4357                           ; Name         Instructions Cycles
  4358                           ; simple_byte           22    12 (average)
  4359                           ;	Chosen strategy is simple_byte
  4360  000D0A  51BD               	movf	??_doOperation& (0+255),w,b
  4361  000D0C  0A00               	xorlw	0	; case 0
  4362  000D0E  B4D8               	btfsc	status,2,c
  4363  000D10  D638               	goto	l8944
  4364  000D12  0A01               	xorlw	1	; case 1
  4365  000D14  B4D8               	btfsc	status,2,c
  4366  000D16  D6B2               	goto	l8968
  4367  000D18  0A03               	xorlw	3	; case 2
  4368  000D1A  B4D8               	btfsc	status,2,c
  4369  000D1C  D711               	goto	l8998
  4370  000D1E  0A01               	xorlw	1	; case 3
  4371  000D20  B4D8               	btfsc	status,2,c
  4372  000D22  D730               	goto	l9014
  4373  000D24  0A07               	xorlw	7	; case 4
  4374  000D26  B4D8               	btfsc	status,2,c
  4375  000D28  D7B6               	goto	l9048
  4376  000D2A  0A01               	xorlw	1	; case 5
  4377  000D2C  B4D8               	btfsc	status,2,c
  4378  000D2E  D7B6               	goto	l9050
  4379  000D30  0A03               	xorlw	3	; case 6
  4380  000D32  B4D8               	btfsc	status,2,c
  4381  000D34  D72B               	goto	l9016
  4382  000D36                     l9076:
  4383                           
  4384                           ;main.c: 860:   if (millisecondsMeasured >= timeInOperation){
  4385  000D36  0101               	movlb	1	; () banked
  4386  000D38  513C               	movf	doOperation@timeInOperation& (0+255),w,b
  4387  000D3A  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  4388  000D3C  513D               	movf	(doOperation@timeInOperation+1)& (0+255),w,b
  4389  000D3E  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  4390  000D40  513E               	movf	(doOperation@timeInOperation+2)& (0+255),w,b
  4391  000D42  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  4392  000D44  513F               	movf	(doOperation@timeInOperation+3)& (0+255),w,b
  4393  000D46  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  4394  000D48  A0D8               	btfss	status,0,c
  4395  000D4A  D01B               	goto	l9096
  4396                           
  4397                           ; BSR set to: 1
  4398                           ;main.c: 861:    currentOperationState = complete;
  4399  000D4C  0E05               	movlw	5
  4400  000D4E  6F40               	movwf	doOperation@currentOperationState& (0+255),b
  4401  000D50  D018               	goto	l9096
  4402  000D52                     l9080:
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;main.c: 871:                 if (topLaserStatePrev != topLaserState || bottomLaserState
      +                          Prev != bottomLaserState){
  4406  000D52  0101               	movlb	1	; () banked
  4407  000D54  5142               	movf	doOperation@topLaserState& (0+255),w,b
  4408  000D56  1938               	xorwf	doOperation@topLaserStatePrev& (0+255),w,b
  4409  000D58  A4D8               	btfss	status,2,c
  4410  000D5A  D004               	goto	u10630
  4411                           
  4412                           ; BSR set to: 1
  4413  000D5C  5141               	movf	doOperation@bottomLaserState& (0+255),w,b
  4414  000D5E  1939               	xorwf	doOperation@bottomLaserStatePrev& (0+255),w,b
  4415  000D60  B4D8               	btfsc	status,2,c
  4416  000D62  D5FB               	goto	l8934
  4417  000D64                     u10630:
  4418                           
  4419                           ; BSR set to: 1
  4420                           ;main.c: 872:                     if (topLaserStatePrev != topLaserState){
  4421  000D64  5142               	movf	doOperation@topLaserState& (0+255),w,b
  4422  000D66  1938               	xorwf	doOperation@topLaserStatePrev& (0+255),w,b
  4423  000D68  B4D8               	btfsc	status,2,c
  4424  000D6A  D002               	goto	l9088
  4425                           
  4426                           ; BSR set to: 1
  4427                           ;main.c: 873:                         badCount++;
  4428  000D6C  4B19               	infsnz	doOperation@badCount& (0+255),f,b
  4429  000D6E  2B1A               	incf	(doOperation@badCount+1)& (0+255),f,b
  4430  000D70                     l9088:
  4431                           
  4432                           ; BSR set to: 1
  4433                           ;main.c: 875:                     if (bottomLaserStatePrev != bottomLaserState){
  4434  000D70  5141               	movf	doOperation@bottomLaserState& (0+255),w,b
  4435  000D72  1939               	xorwf	doOperation@bottomLaserStatePrev& (0+255),w,b
  4436  000D74  B4D8               	btfsc	status,2,c
  4437  000D76  D002               	goto	l9092
  4438                           
  4439                           ; BSR set to: 1
  4440                           ;main.c: 876:                         badCountBot++;
  4441  000D78  4B1B               	infsnz	doOperation@badCountBot& (0+255),f,b
  4442  000D7A  2B1C               	incf	(doOperation@badCountBot+1)& (0+255),f,b
  4443  000D7C                     l9092:
  4444                           
  4445                           ; BSR set to: 1
  4446                           ;main.c: 878:                     currentOperationState = poleFinding;
  4447  000D7C  0E01               	movlw	1
  4448  000D7E  6F40               	movwf	doOperation@currentOperationState& (0+255),b
  4449  000D80  D5EC               	goto	l8934
  4450  000D82                     l9096:
  4451                           
  4452                           ; BSR set to: 1
  4453  000D82  5140               	movf	doOperation@currentOperationState& (0+255),w,b
  4454  000D84  0100               	movlb	0	; () banked
  4455  000D86  6FBD               	movwf	??_doOperation& (0+255),b
  4456  000D88  6BBE               	clrf	(??_doOperation+1)& (0+255),b
  4457                           
  4458                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4459                           ; Switch size 1, requested type "simple"
  4460                           ; Number of cases is 1, Range of values is 0 to 0
  4461                           ; switch strategies available:
  4462                           ; Name         Instructions Cycles
  4463                           ; simple_byte            4     3 (average)
  4464                           ;	Chosen strategy is simple_byte
  4465  000D8A  51BE               	movf	(??_doOperation+1)& (0+255),w,b
  4466  000D8C  0A00               	xorlw	0	; case 0
  4467  000D8E  A4D8               	btfss	status,2,c
  4468  000D90  D5E4               	goto	l8934
  4469                           
  4470                           ; BSR set to: 0
  4471                           ; Switch size 1, requested type "simple"
  4472                           ; Number of cases is 7, Range of values is 0 to 6
  4473                           ; switch strategies available:
  4474                           ; Name         Instructions Cycles
  4475                           ; simple_byte           22    12 (average)
  4476                           ;	Chosen strategy is simple_byte
  4477  000D92  51BD               	movf	??_doOperation& (0+255),w,b
  4478  000D94  0A00               	xorlw	0	; case 0
  4479  000D96  B4D8               	btfsc	status,2,c
  4480  000D98  D7DC               	goto	l9080
  4481  000D9A  0A01               	xorlw	1	; case 1
  4482  000D9C  B4D8               	btfsc	status,2,c
  4483  000D9E  D5DD               	goto	l8934
  4484  000DA0  0A03               	xorlw	3	; case 2
  4485  000DA2  B4D8               	btfsc	status,2,c
  4486  000DA4  D5DA               	goto	l8934
  4487  000DA6  0A01               	xorlw	1	; case 3
  4488  000DA8  B4D8               	btfsc	status,2,c
  4489  000DAA  D5D7               	goto	l8934
  4490  000DAC  0A07               	xorlw	7	; case 4
  4491  000DAE  B4D8               	btfsc	status,2,c
  4492  000DB0  D5D4               	goto	l8934
  4493  000DB2  0A01               	xorlw	1	; case 5
  4494  000DB4  B4D8               	btfsc	status,2,c
  4495  000DB6  D5D1               	goto	l8934
  4496  000DB8  0A03               	xorlw	3	; case 6
  4497  000DBA  D5CF               	goto	l8934
  4498  000DBC                     __end_of_doOperation:
  4499                           	opt callstack 0
  4500                           
  4501 ;; *************** function _tirePositioning *****************
  4502 ;; Defined at:
  4503 ;;		line 360 in file "main.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;  maxOperation    4   39[BANK0 ] unsigned long 
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  startDistanc    2   47[BANK0 ] int 
  4508 ;;  bottomBreakb    2   59[BANK0 ] int 
  4509 ;;  topBreakbeam    2   57[BANK0 ] int 
  4510 ;;  distanceReco    2   55[BANK0 ] int 
  4511 ;;  distanceReco    2   53[BANK0 ] int 
  4512 ;;  bottomPrevio    2   51[BANK0 ] int 
  4513 ;;  topPreviousS    2   49[BANK0 ] int 
  4514 ;;  startDistanc    2   45[BANK0 ] int 
  4515 ;;  startDistanc    2   43[BANK0 ] int 
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  2   39[BANK0 ] int 
  4518 ;; Registers used:
  4519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4525 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Totals:         3      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;Total ram usage:       25 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:   13
  4532 ;; This function calls:
  4533 ;;		___awdiv
  4534 ;;		_abs
  4535 ;;		_lcdInst
  4536 ;;		_opDelay
  4537 ;;		_printf
  4538 ;;		_setMotorSpeeds
  4539 ;; This function is called by:
  4540 ;;		_doOperation
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text8
  4545  0018BC                     __ptext8:
  4546                           	opt callstack 0
  4547  0018BC                     _tirePositioning:
  4548                           	opt callstack 16
  4549                           
  4550                           ;main.c: 361:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  4551                           
  4552                           ;incstack = 0
  4553  0018BC  0E01               	movlw	1
  4554  0018BE  ECD5  F020         	call	_lcdInst
  4555  0018C2  0E11               	movlw	17
  4556  0018C4  6E72               	movwf	??_tirePositioning& (0+255),c
  4557  0018C6  0E3A               	movlw	58
  4558  0018C8                     u11077:
  4559  0018C8  2EE8               	decfsz	wreg,f,c
  4560  0018CA  D7FE               	bra	u11077
  4561  0018CC  2E72               	decfsz	??_tirePositioning& (0+255),f,c
  4562  0018CE  D7FC               	bra	u11077
  4563  0018D0  D000               	nop2	
  4564                           
  4565                           ;main.c: 362:     { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  4566  0018D2  0E80               	movlw	128
  4567  0018D4  ECD5  F020         	call	_lcdInst
  4568  0018D8  0E07               	movlw	7
  4569  0018DA  6E72               	movwf	??_tirePositioning& (0+255),c
  4570  0018DC  0E7D               	movlw	125
  4571  0018DE                     u11087:
  4572  0018DE  2EE8               	decfsz	wreg,f,c
  4573  0018E0  D7FE               	bra	u11087
  4574  0018E2  2E72               	decfsz	??_tirePositioning& (0+255),f,c
  4575  0018E4  D7FC               	bra	u11087
  4576  0018E6  F000               	nop	
  4577                           
  4578                           ;main.c: 363:     printf("TIRE POSITIONING");
  4579  0018E8  0E56               	movlw	low STR_19
  4580  0018EA  0100               	movlb	0	; () banked
  4581  0018EC  6F9D               	movwf	printf@fmt& (0+255),b
  4582  0018EE  0EFE               	movlw	high STR_19
  4583  0018F0  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  4584  0018F2  EC2B  F020         	call	_printf	;wreg free
  4585                           
  4586                           ;main.c: 364:     int topBreakbeam;;main.c: 365:     int bottomBreakbeam;;main.c: 366:  
      +                             int distanceRecordedTop;;main.c: 367:     int startDistanceTop;;main.c: 368:     int 
      +                          distanceRecordedBottom;;main.c: 369:     int startDistanceBottom;;main.c: 370:     int t
      +                          opPreviousState = 1;
  4587  0018F6  0E00               	movlw	0
  4588  0018F8  0100               	movlb	0	; () banked
  4589  0018FA  6FB2               	movwf	(tirePositioning@topPreviousState+1)& (0+255),b
  4590  0018FC  0E01               	movlw	1
  4591  0018FE  6FB1               	movwf	tirePositioning@topPreviousState& (0+255),b
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;main.c: 371:     int bottomPreviousState = 1;
  4595  001900  0E00               	movlw	0
  4596  001902  6FB4               	movwf	(tirePositioning@bottomPreviousState+1)& (0+255),b
  4597  001904  0E01               	movlw	1
  4598  001906  6FB3               	movwf	tirePositioning@bottomPreviousState& (0+255),b
  4599                           
  4600                           ;main.c: 374:     while(millisecondsMeasured < maxOperationTime){
  4601  001908  D05E               	goto	l8564
  4602  00190A                     l8536:
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;main.c: 375:         topBreakbeam = PORTBbits.RB4;
  4606  00190A  A881               	btfss	3969,4,c	;volatile
  4607  00190C  D003               	goto	u10090
  4608  00190E  6A72               	clrf	??_tirePositioning& (0+255),c
  4609  001910  2A72               	incf	??_tirePositioning& (0+255),f,c
  4610  001912  D001               	goto	u10098
  4611  001914                     u10090:
  4612  001914  6A72               	clrf	??_tirePositioning& (0+255),c
  4613  001916                     u10098:
  4614  001916  5072               	movf	??_tirePositioning,w,c
  4615  001918  0100               	movlb	0	; () banked
  4616  00191A  6FB9               	movwf	tirePositioning@topBreakbeam& (0+255),b
  4617  00191C  6BBA               	clrf	(tirePositioning@topBreakbeam+1)& (0+255),b
  4618                           
  4619                           ;main.c: 376:         bottomBreakbeam = PORTBbits.RB5;
  4620  00191E  AA81               	btfss	3969,5,c	;volatile
  4621  001920  D003               	goto	u10100
  4622  001922  6A72               	clrf	??_tirePositioning& (0+255),c
  4623  001924  2A72               	incf	??_tirePositioning& (0+255),f,c
  4624  001926  D001               	goto	u10108
  4625  001928                     u10100:
  4626  001928  6A72               	clrf	??_tirePositioning& (0+255),c
  4627  00192A                     u10108:
  4628  00192A  5072               	movf	??_tirePositioning,w,c
  4629  00192C  0100               	movlb	0	; () banked
  4630  00192E  6FBB               	movwf	tirePositioning@bottomBreakbeam& (0+255),b
  4631  001930  6BBC               	clrf	(tirePositioning@bottomBreakbeam+1)& (0+255),b
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;main.c: 377:         if (topBreakbeam == 0 && topPreviousState == 1){
  4635  001932  51B9               	movf	tirePositioning@topBreakbeam& (0+255),w,b
  4636  001934  11BA               	iorwf	(tirePositioning@topBreakbeam+1)& (0+255),w,b
  4637  001936  A4D8               	btfss	status,2,c
  4638  001938  D008               	goto	l8544
  4639                           
  4640                           ; BSR set to: 0
  4641  00193A  05B1               	decf	tirePositioning@topPreviousState& (0+255),w,b
  4642  00193C  11B2               	iorwf	(tirePositioning@topPreviousState+1)& (0+255),w,b
  4643  00193E  A4D8               	btfss	status,2,c
  4644  001940  D004               	goto	l8544
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;main.c: 378:             startDistanceTop = motorADistance;
  4648  001942  C0D9  F0AB         	movff	_motorADistance,tirePositioning@startDistanceTop	;volatile
  4649  001946  C0DA  F0AC         	movff	_motorADistance+1,tirePositioning@startDistanceTop+1	;volatile
  4650  00194A                     l8544:
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;main.c: 380:         if (bottomBreakbeam == 0 && bottomPreviousState == 1){
  4654  00194A  51BB               	movf	tirePositioning@bottomBreakbeam& (0+255),w,b
  4655  00194C  11BC               	iorwf	(tirePositioning@bottomBreakbeam+1)& (0+255),w,b
  4656  00194E  A4D8               	btfss	status,2,c
  4657  001950  D008               	goto	l8550
  4658                           
  4659                           ; BSR set to: 0
  4660  001952  05B3               	decf	tirePositioning@bottomPreviousState& (0+255),w,b
  4661  001954  11B4               	iorwf	(tirePositioning@bottomPreviousState+1)& (0+255),w,b
  4662  001956  A4D8               	btfss	status,2,c
  4663  001958  D004               	goto	l8550
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;main.c: 381:             startDistanceBottom = motorADistance;
  4667  00195A  C0D9  F0AD         	movff	_motorADistance,tirePositioning@startDistanceBottom	;volatile
  4668  00195E  C0DA  F0AE         	movff	_motorADistance+1,tirePositioning@startDistanceBottom+1	;volatile
  4669  001962                     l8550:
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;main.c: 383:         if(!topBreakbeam){
  4673  001962  51B9               	movf	tirePositioning@topBreakbeam& (0+255),w,b
  4674  001964  11BA               	iorwf	(tirePositioning@topBreakbeam+1)& (0+255),w,b
  4675  001966  A4D8               	btfss	status,2,c
  4676  001968  D00C               	goto	l8554
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;main.c: 384:             distanceRecordedTop = abs(motorADistance - startDistanceTop);
  4680  00196A  51AB               	movf	tirePositioning@startDistanceTop& (0+255),w,b
  4681  00196C  5DD9               	subwf	_motorADistance& (0+255),w,b	;volatile
  4682  00196E  6E18               	movwf	abs@a,c
  4683  001970  51AC               	movf	(tirePositioning@startDistanceTop+1)& (0+255),w,b
  4684  001972  59DA               	subwfb	(_motorADistance+1)& (0+255),w,b	;volatile
  4685  001974  6E19               	movwf	abs@a+1,c
  4686  001976  EC8B  F01F         	call	_abs	;wreg free
  4687  00197A  C018  F0B5         	movff	?_abs,tirePositioning@distanceRecordedTop
  4688  00197E  C019  F0B6         	movff	?_abs+1,tirePositioning@distanceRecordedTop+1
  4689  001982                     l8554:
  4690                           
  4691                           ;main.c: 386:         if(!bottomBreakbeam){
  4692  001982  0100               	movlb	0	; () banked
  4693  001984  51BB               	movf	tirePositioning@bottomBreakbeam& (0+255),w,b
  4694  001986  11BC               	iorwf	(tirePositioning@bottomBreakbeam+1)& (0+255),w,b
  4695  001988  A4D8               	btfss	status,2,c
  4696  00198A  D00C               	goto	l8558
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;main.c: 387:             distanceRecordedBottom = abs(motorADistance - startDistanceBot
      +                          tom);
  4700  00198C  51AD               	movf	tirePositioning@startDistanceBottom& (0+255),w,b
  4701  00198E  5DD9               	subwf	_motorADistance& (0+255),w,b	;volatile
  4702  001990  6E18               	movwf	abs@a,c
  4703  001992  51AE               	movf	(tirePositioning@startDistanceBottom+1)& (0+255),w,b
  4704  001994  59DA               	subwfb	(_motorADistance+1)& (0+255),w,b	;volatile
  4705  001996  6E19               	movwf	abs@a+1,c
  4706  001998  EC8B  F01F         	call	_abs	;wreg free
  4707  00199C  C018  F0B7         	movff	?_abs,tirePositioning@distanceRecordedBottom
  4708  0019A0  C019  F0B8         	movff	?_abs+1,tirePositioning@distanceRecordedBottom+1
  4709  0019A4                     l8558:
  4710                           
  4711                           ;main.c: 389:         if(topBreakbeam && bottomBreakbeam){
  4712  0019A4  0100               	movlb	0	; () banked
  4713  0019A6  51B9               	movf	tirePositioning@topBreakbeam& (0+255),w,b
  4714  0019A8  11BA               	iorwf	(tirePositioning@topBreakbeam+1)& (0+255),w,b
  4715  0019AA  B4D8               	btfsc	status,2,c
  4716  0019AC  D004               	goto	l265
  4717                           
  4718                           ; BSR set to: 0
  4719  0019AE  51BB               	movf	tirePositioning@bottomBreakbeam& (0+255),w,b
  4720  0019B0  11BC               	iorwf	(tirePositioning@bottomBreakbeam+1)& (0+255),w,b
  4721  0019B2  A4D8               	btfss	status,2,c
  4722  0019B4  D012               	goto	u10190
  4723  0019B6                     l265:
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;main.c: 392:         topPreviousState = topBreakbeam;
  4727  0019B6  C0B9  F0B1         	movff	tirePositioning@topBreakbeam,tirePositioning@topPreviousState
  4728  0019BA  C0BA  F0B2         	movff	tirePositioning@topBreakbeam+1,tirePositioning@topPreviousState+1
  4729                           
  4730                           ;main.c: 393:         bottomPreviousState = bottomBreakbeam;
  4731  0019BE  C0BB  F0B3         	movff	tirePositioning@bottomBreakbeam,tirePositioning@bottomPreviousState
  4732  0019C2  C0BC  F0B4         	movff	tirePositioning@bottomBreakbeam+1,tirePositioning@bottomPreviousState+1
  4733  0019C6                     l8564:
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;main.c: 374:     while(millisecondsMeasured < maxOperationTime){
  4737  0019C6  51A7               	movf	tirePositioning@maxOperationTime& (0+255),w,b
  4738  0019C8  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  4739  0019CA  51A8               	movf	(tirePositioning@maxOperationTime+1)& (0+255),w,b
  4740  0019CC  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  4741  0019CE  51A9               	movf	(tirePositioning@maxOperationTime+2)& (0+255),w,b
  4742  0019D0  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  4743  0019D2  51AA               	movf	(tirePositioning@maxOperationTime+3)& (0+255),w,b
  4744  0019D4  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  4745  0019D6  A0D8               	btfss	status,0,c
  4746  0019D8  D798               	goto	l8536
  4747  0019DA                     u10190:
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;main.c: 396:     if (distanceRecordedTop < 170){
  4751  0019DA  BFB6               	btfsc	(tirePositioning@distanceRecordedTop+1)& (0+255),7,b
  4752  0019DC  D006               	goto	u10200
  4753  0019DE  51B6               	movf	(tirePositioning@distanceRecordedTop+1)& (0+255),w,b
  4754  0019E0  E14B               	bnz	l8580
  4755  0019E2  0EAA               	movlw	170
  4756  0019E4  5DB5               	subwf	tirePositioning@distanceRecordedTop& (0+255),w,b
  4757  0019E6  B0D8               	btfsc	status,0,c
  4758  0019E8  D047               	goto	l8580
  4759  0019EA                     u10200:
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;main.c: 397:         setMotorSpeeds(0, 1, 1, 0);
  4763  0019EA  0E00               	movlw	0
  4764  0019EC  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  4765  0019EE  0E00               	movlw	0
  4766  0019F0  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  4767  0019F2  0E01               	movlw	1
  4768  0019F4  6E6E               	movwf	setMotorSpeeds@Aforward,c
  4769  0019F6  0E01               	movlw	1
  4770  0019F8  6E6F               	movwf	setMotorSpeeds@Bforward,c
  4771  0019FA  0E00               	movlw	0
  4772  0019FC  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4773  0019FE  0E00               	movlw	0
  4774  001A00  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4775  001A02  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4776                           
  4777                           ;main.c: 398:         opDelay(100, maxOperationTime);
  4778  001A06  0E00               	movlw	0
  4779  001A08  6E07               	movwf	opDelay@millis+1,c
  4780  001A0A  0E64               	movlw	100
  4781  001A0C  6E06               	movwf	opDelay@millis,c
  4782  001A0E  C0A7  F008         	movff	tirePositioning@maxOperationTime,opDelay@maxOperationTime
  4783  001A12  C0A8  F009         	movff	tirePositioning@maxOperationTime+1,opDelay@maxOperationTime+1
  4784  001A16  C0A9  F00A         	movff	tirePositioning@maxOperationTime+2,opDelay@maxOperationTime+2
  4785  001A1A  C0AA  F00B         	movff	tirePositioning@maxOperationTime+3,opDelay@maxOperationTime+3
  4786  001A1E  EC6D  F01D         	call	_opDelay	;wreg free
  4787                           
  4788                           ;main.c: 399:         while(millisecondsMeasured < maxOperationTime && PORTBbits.RB4 == 
      +                          1){
  4789  001A22  D00E               	goto	l8574
  4790  001A24                     l8572:
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;main.c: 400:             setMotorSpeeds(30, 0, 0, 30);
  4794  001A24  0E00               	movlw	0
  4795  001A26  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  4796  001A28  0E1E               	movlw	30
  4797  001A2A  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  4798  001A2C  0E00               	movlw	0
  4799  001A2E  6E6E               	movwf	setMotorSpeeds@Aforward,c
  4800  001A30  0E00               	movlw	0
  4801  001A32  6E6F               	movwf	setMotorSpeeds@Bforward,c
  4802  001A34  0E00               	movlw	0
  4803  001A36  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4804  001A38  0E1E               	movlw	30
  4805  001A3A  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4806  001A3C  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4807  001A40                     l8574:
  4808                           
  4809                           ;main.c: 399:         while(millisecondsMeasured < maxOperationTime && PORTBbits.RB4 == 
      +                          1){
  4810  001A40  0100               	movlb	0	; () banked
  4811  001A42  51A7               	movf	tirePositioning@maxOperationTime& (0+255),w,b
  4812  001A44  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  4813  001A46  51A8               	movf	(tirePositioning@maxOperationTime+1)& (0+255),w,b
  4814  001A48  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  4815  001A4A  51A9               	movf	(tirePositioning@maxOperationTime+2)& (0+255),w,b
  4816  001A4C  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  4817  001A4E  51AA               	movf	(tirePositioning@maxOperationTime+3)& (0+255),w,b
  4818  001A50  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  4819  001A52  B0D8               	btfsc	status,0,c
  4820  001A54  D002               	goto	u10220
  4821                           
  4822                           ; BSR set to: 0
  4823  001A56  B881               	btfsc	3969,4,c	;volatile
  4824  001A58  D7E5               	goto	l8572
  4825  001A5A                     u10220:
  4826                           
  4827                           ;main.c: 402:         setMotorSpeeds(0, 1, 1, 0);
  4828  001A5A  0E00               	movlw	0
  4829  001A5C  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  4830  001A5E  0E00               	movlw	0
  4831  001A60  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  4832  001A62  0E01               	movlw	1
  4833  001A64  6E6E               	movwf	setMotorSpeeds@Aforward,c
  4834  001A66  0E01               	movlw	1
  4835  001A68  6E6F               	movwf	setMotorSpeeds@Bforward,c
  4836  001A6A  0E00               	movlw	0
  4837  001A6C  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4838  001A6E  0E00               	movlw	0
  4839  001A70  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4840  001A72  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4841                           
  4842                           ;main.c: 403:     } else {
  4843  001A76  D077               	goto	l8598
  4844  001A78                     l8580:
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;main.c: 404:         setMotorSpeeds(0, 1, 1, 0);
  4848  001A78  0E00               	movlw	0
  4849  001A7A  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  4850  001A7C  0E00               	movlw	0
  4851  001A7E  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  4852  001A80  0E01               	movlw	1
  4853  001A82  6E6E               	movwf	setMotorSpeeds@Aforward,c
  4854  001A84  0E01               	movlw	1
  4855  001A86  6E6F               	movwf	setMotorSpeeds@Bforward,c
  4856  001A88  0E00               	movlw	0
  4857  001A8A  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4858  001A8C  0E00               	movlw	0
  4859  001A8E  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4860  001A90  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4861                           
  4862                           ;main.c: 405:         opDelay(100, maxOperationTime);
  4863  001A94  0E00               	movlw	0
  4864  001A96  6E07               	movwf	opDelay@millis+1,c
  4865  001A98  0E64               	movlw	100
  4866  001A9A  6E06               	movwf	opDelay@millis,c
  4867  001A9C  C0A7  F008         	movff	tirePositioning@maxOperationTime,opDelay@maxOperationTime
  4868  001AA0  C0A8  F009         	movff	tirePositioning@maxOperationTime+1,opDelay@maxOperationTime+1
  4869  001AA4  C0A9  F00A         	movff	tirePositioning@maxOperationTime+2,opDelay@maxOperationTime+2
  4870  001AA8  C0AA  F00B         	movff	tirePositioning@maxOperationTime+3,opDelay@maxOperationTime+3
  4871  001AAC  EC6D  F01D         	call	_opDelay	;wreg free
  4872                           
  4873                           ;main.c: 406:         while(millisecondsMeasured < maxOperationTime && PORTBbits.RB4 == 
      +                          1){
  4874  001AB0  D00E               	goto	l8586
  4875  001AB2                     l8584:
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;main.c: 407:             setMotorSpeeds(30, 0, 0, 30);
  4879  001AB2  0E00               	movlw	0
  4880  001AB4  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  4881  001AB6  0E1E               	movlw	30
  4882  001AB8  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  4883  001ABA  0E00               	movlw	0
  4884  001ABC  6E6E               	movwf	setMotorSpeeds@Aforward,c
  4885  001ABE  0E00               	movlw	0
  4886  001AC0  6E6F               	movwf	setMotorSpeeds@Bforward,c
  4887  001AC2  0E00               	movlw	0
  4888  001AC4  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4889  001AC6  0E1E               	movlw	30
  4890  001AC8  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4891  001ACA  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4892  001ACE                     l8586:
  4893                           
  4894                           ;main.c: 406:         while(millisecondsMeasured < maxOperationTime && PORTBbits.RB4 == 
      +                          1){
  4895  001ACE  0100               	movlb	0	; () banked
  4896  001AD0  51A7               	movf	tirePositioning@maxOperationTime& (0+255),w,b
  4897  001AD2  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  4898  001AD4  51A8               	movf	(tirePositioning@maxOperationTime+1)& (0+255),w,b
  4899  001AD6  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  4900  001AD8  51A9               	movf	(tirePositioning@maxOperationTime+2)& (0+255),w,b
  4901  001ADA  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  4902  001ADC  51AA               	movf	(tirePositioning@maxOperationTime+3)& (0+255),w,b
  4903  001ADE  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  4904  001AE0  B0D8               	btfsc	status,0,c
  4905  001AE2  D002               	goto	u10240
  4906                           
  4907                           ; BSR set to: 0
  4908  001AE4  B881               	btfsc	3969,4,c	;volatile
  4909  001AE6  D7E5               	goto	l8584
  4910  001AE8                     u10240:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;main.c: 409:         int startDistance = motorADistance;
  4914  001AE8  C0D9  F0AF         	movff	_motorADistance,tirePositioning@startDistance	;volatile
  4915  001AEC  C0DA  F0B0         	movff	_motorADistance+1,tirePositioning@startDistance+1	;volatile
  4916                           
  4917                           ;main.c: 410:         while(millisecondsMeasured < maxOperationTime && abs(startDistance
      +                           - motorADistance) < distanceRecordedBottom/2){
  4918  001AF0  D00E               	goto	l8592
  4919  001AF2                     l8590:
  4920                           
  4921                           ;main.c: 411:             setMotorSpeeds(30, 0, 0, 30);
  4922  001AF2  0E00               	movlw	0
  4923  001AF4  6E6D               	movwf	setMotorSpeeds@motorASpeed+1,c
  4924  001AF6  0E1E               	movlw	30
  4925  001AF8  6E6C               	movwf	setMotorSpeeds@motorASpeed,c
  4926  001AFA  0E00               	movlw	0
  4927  001AFC  6E6E               	movwf	setMotorSpeeds@Aforward,c
  4928  001AFE  0E00               	movlw	0
  4929  001B00  6E6F               	movwf	setMotorSpeeds@Bforward,c
  4930  001B02  0E00               	movlw	0
  4931  001B04  6E71               	movwf	setMotorSpeeds@motorBSpeed+1,c
  4932  001B06  0E1E               	movlw	30
  4933  001B08  6E70               	movwf	setMotorSpeeds@motorBSpeed,c
  4934  001B0A  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  4935  001B0E                     l8592:
  4936                           
  4937                           ;main.c: 410:         while(millisecondsMeasured < maxOperationTime && abs(startDistance
      +                           - motorADistance) < distanceRecordedBottom/2){
  4938  001B0E  0100               	movlb	0	; () banked
  4939  001B10  51A7               	movf	tirePositioning@maxOperationTime& (0+255),w,b
  4940  001B12  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  4941  001B14  51A8               	movf	(tirePositioning@maxOperationTime+1)& (0+255),w,b
  4942  001B16  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  4943  001B18  51A9               	movf	(tirePositioning@maxOperationTime+2)& (0+255),w,b
  4944  001B1A  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  4945  001B1C  51AA               	movf	(tirePositioning@maxOperationTime+3)& (0+255),w,b
  4946  001B1E  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  4947  001B20  B0D8               	btfsc	status,0,c
  4948  001B22  D79B               	goto	u10220
  4949                           
  4950                           ; BSR set to: 0
  4951  001B24  51D9               	movf	_motorADistance& (0+255),w,b	;volatile
  4952  001B26  5DAF               	subwf	tirePositioning@startDistance& (0+255),w,b
  4953  001B28  6E18               	movwf	abs@a,c
  4954  001B2A  51DA               	movf	(_motorADistance+1)& (0+255),w,b	;volatile
  4955  001B2C  59B0               	subwfb	(tirePositioning@startDistance+1)& (0+255),w,b
  4956  001B2E  6E19               	movwf	abs@a+1,c
  4957  001B30  EC8B  F01F         	call	_abs	;wreg free
  4958  001B34  C018  F072         	movff	?_abs,??_tirePositioning
  4959  001B38  C019  F073         	movff	?_abs+1,??_tirePositioning+1
  4960  001B3C  C0B7  F006         	movff	tirePositioning@distanceRecordedBottom,___awdiv@dividend
  4961  001B40  C0B8  F007         	movff	tirePositioning@distanceRecordedBottom+1,___awdiv@dividend+1
  4962  001B44  0E00               	movlw	0
  4963  001B46  6E09               	movwf	___awdiv@divisor+1,c
  4964  001B48  0E02               	movlw	2
  4965  001B4A  6E08               	movwf	___awdiv@divisor,c
  4966  001B4C  ECDA  F01B         	call	___awdiv	;wreg free
  4967  001B50  5006               	movf	?___awdiv,w,c
  4968  001B52  5C72               	subwf	??_tirePositioning,w,c
  4969  001B54  5073               	movf	??_tirePositioning+1,w,c
  4970  001B56  0A80               	xorlw	128
  4971  001B58  6E74               	movwf	(??_tirePositioning+2)& (0+255),c
  4972  001B5A  5007               	movf	?___awdiv+1,w,c
  4973  001B5C  0A80               	xorlw	128
  4974  001B5E  5874               	subwfb	(??_tirePositioning+2)& (0+255),w,c
  4975  001B60  B0D8               	btfsc	status,0,c
  4976  001B62  D77B               	goto	u10220
  4977  001B64  D7C6               	goto	l8590
  4978  001B66                     l8598:
  4979                           
  4980                           ;main.c: 417:     if (distanceRecordedTop < 170 && distanceRecordedBottom < 170){
  4981  001B66  0100               	movlb	0	; () banked
  4982  001B68  BFB6               	btfsc	(tirePositioning@distanceRecordedTop+1)& (0+255),7,b
  4983  001B6A  D006               	goto	u10270
  4984  001B6C  51B6               	movf	(tirePositioning@distanceRecordedTop+1)& (0+255),w,b
  4985  001B6E  E111               	bnz	l8608
  4986  001B70  0EAA               	movlw	170
  4987  001B72  5DB5               	subwf	tirePositioning@distanceRecordedTop& (0+255),w,b
  4988  001B74  B0D8               	btfsc	status,0,c
  4989  001B76  D00D               	goto	l8608
  4990  001B78                     u10270:
  4991                           
  4992                           ; BSR set to: 0
  4993  001B78  BFB8               	btfsc	(tirePositioning@distanceRecordedBottom+1)& (0+255),7,b
  4994  001B7A  D006               	goto	u10280
  4995  001B7C  51B8               	movf	(tirePositioning@distanceRecordedBottom+1)& (0+255),w,b
  4996  001B7E  E109               	bnz	l8608
  4997  001B80  0EAA               	movlw	170
  4998  001B82  5DB7               	subwf	tirePositioning@distanceRecordedBottom& (0+255),w,b
  4999  001B84  B0D8               	btfsc	status,0,c
  5000  001B86  D005               	goto	l8608
  5001  001B88                     u10280:
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;main.c: 418:         return 0;
  5005  001B88  0E00               	movlw	0
  5006  001B8A  6FA8               	movwf	(?_tirePositioning+1)& (0+255),b
  5007  001B8C  0E00               	movlw	0
  5008  001B8E  6FA7               	movwf	?_tirePositioning& (0+255),b
  5009  001B90  0012               	return	
  5010  001B92                     l8608:
  5011                           
  5012                           ; BSR set to: 0
  5013  001B92  51B7               	movf	tirePositioning@distanceRecordedBottom& (0+255),w,b
  5014  001B94  5DB5               	subwf	tirePositioning@distanceRecordedTop& (0+255),w,b
  5015  001B96  6E18               	movwf	abs@a,c
  5016  001B98  51B8               	movf	(tirePositioning@distanceRecordedBottom+1)& (0+255),w,b
  5017  001B9A  59B6               	subwfb	(tirePositioning@distanceRecordedTop+1)& (0+255),w,b
  5018  001B9C  6E19               	movwf	abs@a+1,c
  5019  001B9E  EC8B  F01F         	call	_abs	;wreg free
  5020  001BA2  BE19               	btfsc	?_abs+1,7,c
  5021  001BA4  D00C               	goto	l8616
  5022  001BA6  5019               	movf	?_abs+1,w,c
  5023  001BA8  E104               	bnz	u10290
  5024  001BAA  0EB5               	movlw	181
  5025  001BAC  5C18               	subwf	?_abs,w,c
  5026  001BAE  A0D8               	btfss	status,0,c
  5027  001BB0  D006               	goto	l8616
  5028  001BB2                     u10290:
  5029                           
  5030                           ;main.c: 420:         return 1;
  5031  001BB2  0E00               	movlw	0
  5032  001BB4  0100               	movlb	0	; () banked
  5033  001BB6  6FA8               	movwf	(?_tirePositioning+1)& (0+255),b
  5034  001BB8  0E01               	movlw	1
  5035  001BBA  6FA7               	movwf	?_tirePositioning& (0+255),b
  5036  001BBC  0012               	return	
  5037  001BBE                     l8616:
  5038                           
  5039                           ;main.c: 422:         return 2;
  5040  001BBE  0E00               	movlw	0
  5041  001BC0  0100               	movlb	0	; () banked
  5042  001BC2  6FA8               	movwf	(?_tirePositioning+1)& (0+255),b
  5043  001BC4  0E02               	movlw	2
  5044  001BC6  6FA7               	movwf	?_tirePositioning& (0+255),b
  5045                           
  5046                           ; BSR set to: 0
  5047  001BC8  0012               	return		;funcret
  5048  001BCA                     __end_of_tirePositioning:
  5049                           	opt callstack 0
  5050                           
  5051 ;; *************** function _opDelay *****************
  5052 ;; Defined at:
  5053 ;;		line 120 in file "main.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;  millis          2    5[COMRAM] int 
  5056 ;;  maxOperation    4    7[COMRAM] unsigned long 
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  startTime       4   19[COMRAM] unsigned long 
  5059 ;; Return value:  Size  Location     Type
  5060 ;;                  1    wreg      void 
  5061 ;; Registers used:
  5062 ;;		wreg, status,2, status,0
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5068 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;Total ram usage:       18 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; Hardware stack levels required when called:    2
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		_tirePositioning
  5079 ;;		_doOperation
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text9
  5084  003ADA                     __ptext9:
  5085                           	opt callstack 0
  5086  003ADA                     _opDelay:
  5087                           	opt callstack 26
  5088                           
  5089                           ;main.c: 121:     unsigned long startTime = millisecondsMeasured;
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;incstack = 0
  5093  003ADA  C075  F014         	movff	_millisecondsMeasured,opDelay@startTime	;volatile
  5094  003ADE  C076  F015         	movff	_millisecondsMeasured+1,opDelay@startTime+1	;volatile
  5095  003AE2  C077  F016         	movff	_millisecondsMeasured+2,opDelay@startTime+2	;volatile
  5096  003AE6  C078  F017         	movff	_millisecondsMeasured+3,opDelay@startTime+3	;volatile
  5097  003AEA                     l8340:
  5098                           
  5099                           ;main.c: 122:     while (millisecondsMeasured < maxOperationTime && (millisecondsMeasure
      +                          d - startTime) < millis){
  5100  003AEA  5008               	movf	opDelay@maxOperationTime,w,c
  5101  003AEC  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  5102  003AEE  5009               	movf	opDelay@maxOperationTime+1,w,c
  5103  003AF0  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  5104  003AF2  500A               	movf	opDelay@maxOperationTime+2,w,c
  5105  003AF4  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  5106  003AF6  500B               	movf	opDelay@maxOperationTime+3,w,c
  5107  003AF8  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  5108  003AFA  B0D8               	btfsc	status,0,c
  5109  003AFC  0012               	return	
  5110  003AFE  C006  F00C         	movff	opDelay@millis,??_opDelay
  5111  003B02  C007  F00D         	movff	opDelay@millis+1,??_opDelay+1
  5112  003B06  0E00               	movlw	0
  5113  003B08  BE0D               	btfsc	(??_opDelay+1)& (0+255),7,c
  5114  003B0A  0EFF               	movlw	255
  5115  003B0C  6E0E               	movwf	(??_opDelay+2)& (0+255),c
  5116  003B0E  6E0F               	movwf	(??_opDelay+3)& (0+255),c
  5117  003B10  5014               	movf	opDelay@startTime,w,c
  5118  003B12  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  5119  003B14  6E10               	movwf	(??_opDelay+4)& (0+255),c
  5120  003B16  5015               	movf	opDelay@startTime+1,w,c
  5121  003B18  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  5122  003B1A  6E11               	movwf	(??_opDelay+5)& (0+255),c
  5123  003B1C  5016               	movf	opDelay@startTime+2,w,c
  5124  003B1E  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  5125  003B20  6E12               	movwf	(??_opDelay+6)& (0+255),c
  5126  003B22  5017               	movf	opDelay@startTime+3,w,c
  5127  003B24  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  5128  003B26  6E13               	movwf	(??_opDelay+7)& (0+255),c
  5129  003B28  500C               	movf	??_opDelay,w,c
  5130  003B2A  5C10               	subwf	??_opDelay+4,w,c
  5131  003B2C  500D               	movf	??_opDelay+1,w,c
  5132  003B2E  5811               	subwfb	??_opDelay+5,w,c
  5133  003B30  500E               	movf	??_opDelay+2,w,c
  5134  003B32  5812               	subwfb	??_opDelay+6,w,c
  5135  003B34  500F               	movf	??_opDelay+3,w,c
  5136  003B36  5813               	subwfb	??_opDelay+7,w,c
  5137  003B38  B0D8               	btfsc	status,0,c
  5138  003B3A  0012               	return	
  5139  003B3C  D7D6               	goto	l8340
  5140  003B3E                     __end_of_opDelay:
  5141                           	opt callstack 0
  5142                           
  5143 ;; *************** function ___awdiv *****************
  5144 ;; Defined at:
  5145 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;  dividend        2    5[COMRAM] int 
  5148 ;;  divisor         2    7[COMRAM] int 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  quotient        2   11[COMRAM] int 
  5151 ;;  sign            1   10[COMRAM] unsigned char 
  5152 ;;  counter         1    9[COMRAM] unsigned char 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  2    5[COMRAM] int 
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;Total ram usage:        8 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    2
  5169 ;; This function calls:
  5170 ;;		Nothing
  5171 ;; This function is called by:
  5172 ;;		_tirePositioning
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text10
  5177  0037B4                     __ptext10:
  5178                           	opt callstack 0
  5179  0037B4                     ___awdiv:
  5180                           	opt callstack 26
  5181                           
  5182                           ;incstack = 0
  5183  0037B4  0E00               	movlw	0
  5184  0037B6  6E0B               	movwf	___awdiv@sign,c
  5185  0037B8  AE09               	btfss	___awdiv@divisor+1,7,c
  5186  0037BA  D006               	goto	l8426
  5187  0037BC  6C08               	negf	___awdiv@divisor,c
  5188  0037BE  1E09               	comf	___awdiv@divisor+1,f,c
  5189  0037C0  B0D8               	btfsc	status,0,c
  5190  0037C2  2A09               	incf	___awdiv@divisor+1,f,c
  5191  0037C4  0E01               	movlw	1
  5192  0037C6  6E0B               	movwf	___awdiv@sign,c
  5193  0037C8                     l8426:
  5194  0037C8  AE07               	btfss	___awdiv@dividend+1,7,c
  5195  0037CA  D006               	goto	l8432
  5196  0037CC  6C06               	negf	___awdiv@dividend,c
  5197  0037CE  1E07               	comf	___awdiv@dividend+1,f,c
  5198  0037D0  B0D8               	btfsc	status,0,c
  5199  0037D2  2A07               	incf	___awdiv@dividend+1,f,c
  5200  0037D4  0E01               	movlw	1
  5201  0037D6  1A0B               	xorwf	___awdiv@sign,f,c
  5202  0037D8                     l8432:
  5203  0037D8  0E00               	movlw	0
  5204  0037DA  6E0D               	movwf	___awdiv@quotient+1,c
  5205  0037DC  0E00               	movlw	0
  5206  0037DE  6E0C               	movwf	___awdiv@quotient,c
  5207  0037E0  5008               	movf	___awdiv@divisor,w,c
  5208  0037E2  1009               	iorwf	___awdiv@divisor+1,w,c
  5209  0037E4  B4D8               	btfsc	status,2,c
  5210  0037E6  D01C               	goto	l8454
  5211  0037E8  0E01               	movlw	1
  5212  0037EA  6E0A               	movwf	___awdiv@counter,c
  5213  0037EC  D004               	goto	l8440
  5214  0037EE                     l8438:
  5215  0037EE  90D8               	bcf	status,0,c
  5216  0037F0  3608               	rlcf	___awdiv@divisor,f,c
  5217  0037F2  3609               	rlcf	___awdiv@divisor+1,f,c
  5218  0037F4  2A0A               	incf	___awdiv@counter,f,c
  5219  0037F6                     l8440:
  5220  0037F6  AE09               	btfss	___awdiv@divisor+1,7,c
  5221  0037F8  D7FA               	goto	l8438
  5222  0037FA                     u10060:
  5223  0037FA  90D8               	bcf	status,0,c
  5224  0037FC  360C               	rlcf	___awdiv@quotient,f,c
  5225  0037FE  360D               	rlcf	___awdiv@quotient+1,f,c
  5226  003800  5008               	movf	___awdiv@divisor,w,c
  5227  003802  5C06               	subwf	___awdiv@dividend,w,c
  5228  003804  5009               	movf	___awdiv@divisor+1,w,c
  5229  003806  5807               	subwfb	___awdiv@dividend+1,w,c
  5230  003808  A0D8               	btfss	status,0,c
  5231  00380A  D005               	goto	l8450
  5232  00380C  5008               	movf	___awdiv@divisor,w,c
  5233  00380E  5E06               	subwf	___awdiv@dividend,f,c
  5234  003810  5009               	movf	___awdiv@divisor+1,w,c
  5235  003812  5A07               	subwfb	___awdiv@dividend+1,f,c
  5236  003814  800C               	bsf	___awdiv@quotient,0,c
  5237  003816                     l8450:
  5238  003816  90D8               	bcf	status,0,c
  5239  003818  3209               	rrcf	___awdiv@divisor+1,f,c
  5240  00381A  3208               	rrcf	___awdiv@divisor,f,c
  5241  00381C  2E0A               	decfsz	___awdiv@counter,f,c
  5242  00381E  D7ED               	goto	u10060
  5243  003820                     l8454:
  5244  003820  500B               	movf	___awdiv@sign,w,c
  5245  003822  B4D8               	btfsc	status,2,c
  5246  003824  D004               	goto	l8458
  5247  003826  6C0C               	negf	___awdiv@quotient,c
  5248  003828  1E0D               	comf	___awdiv@quotient+1,f,c
  5249  00382A  B0D8               	btfsc	status,0,c
  5250  00382C  2A0D               	incf	___awdiv@quotient+1,f,c
  5251  00382E                     l8458:
  5252  00382E  C00C  F006         	movff	___awdiv@quotient,?___awdiv
  5253  003832  C00D  F007         	movff	___awdiv@quotient+1,?___awdiv+1
  5254  003836  0012               	return		;funcret
  5255  003838                     __end_of___awdiv:
  5256                           	opt callstack 0
  5257                           
  5258 ;; *************** function _sendArduinoTireOperationStartMessage *****************
  5259 ;; Defined at:
  5260 ;;		line 489 in file "main.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;		None
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  data            1    0        unsigned char 
  5265 ;; Return value:  Size  Location     Type
  5266 ;;                  1    wreg      void 
  5267 ;; Registers used:
  5268 ;;		wreg, status,2, status,0, cstack
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;Total ram usage:        1 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    4
  5281 ;; This function calls:
  5282 ;;		_I2C_Master_Start
  5283 ;;		_I2C_Master_Stop
  5284 ;;		_I2C_Master_Write
  5285 ;; This function is called by:
  5286 ;;		_doOperation
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text11
  5291  0040C8                     __ptext11:
  5292                           	opt callstack 0
  5293  0040C8                     _sendArduinoTireOperationStartMessage:
  5294                           	opt callstack 25
  5295                           
  5296                           ;main.c: 496:     I2C_Master_Start();
  5297                           
  5298                           ;incstack = 0
  5299  0040C8  ECE8  F020         	call	_I2C_Master_Start	;wreg free
  5300                           
  5301                           ;main.c: 497:     I2C_Master_Write(0b00010000);
  5302  0040CC  0E00               	movlw	0
  5303  0040CE  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  5304  0040D0  0E10               	movlw	16
  5305  0040D2  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  5306  0040D4  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  5307                           
  5308                           ;main.c: 498:     I2C_Master_Write(data);
  5309  0040D8  0E00               	movlw	0
  5310  0040DA  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  5311  0040DC  0E32               	movlw	50
  5312  0040DE  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  5313  0040E0  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  5314                           
  5315                           ;main.c: 499:     I2C_Master_Stop();
  5316  0040E4  ECE4  F020         	call	_I2C_Master_Stop	;wreg free
  5317  0040E8  0012               	return		;funcret
  5318  0040EA                     __end_of_sendArduinoTireOperationStartMessage:
  5319                           	opt callstack 0
  5320                           
  5321 ;; *************** function _sendArduinoTireDropRequest *****************
  5322 ;; Defined at:
  5323 ;;		line 430 in file "main.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;		None
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  data            1    0        unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  1    wreg      void 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0, cstack
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;Total ram usage:        1 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    4
  5344 ;; This function calls:
  5345 ;;		_I2C_Master_Start
  5346 ;;		_I2C_Master_Stop
  5347 ;;		_I2C_Master_Write
  5348 ;; This function is called by:
  5349 ;;		_doOperation
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text12
  5354  0040EA                     __ptext12:
  5355                           	opt callstack 0
  5356  0040EA                     _sendArduinoTireDropRequest:
  5357                           	opt callstack 25
  5358                           
  5359                           ;main.c: 437:     I2C_Master_Start();
  5360                           
  5361                           ;incstack = 0
  5362  0040EA  ECE8  F020         	call	_I2C_Master_Start	;wreg free
  5363                           
  5364                           ;main.c: 438:     I2C_Master_Write(0b00010000);
  5365  0040EE  0E00               	movlw	0
  5366  0040F0  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  5367  0040F2  0E10               	movlw	16
  5368  0040F4  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  5369  0040F6  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  5370                           
  5371                           ;main.c: 439:     I2C_Master_Write(data);
  5372  0040FA  0E00               	movlw	0
  5373  0040FC  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  5374  0040FE  0E31               	movlw	49
  5375  004100  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  5376  004102  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  5377                           
  5378                           ;main.c: 440:     I2C_Master_Stop();
  5379  004106  ECE4  F020         	call	_I2C_Master_Stop	;wreg free
  5380  00410A  0012               	return		;funcret
  5381  00410C                     __end_of_sendArduinoTireDropRequest:
  5382                           	opt callstack 0
  5383                           
  5384 ;; *************** function _sendArduinoAbortOperationMessage *****************
  5385 ;; Defined at:
  5386 ;;		line 503 in file "main.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;  data            1    0        unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, status,2, status,0, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;Total ram usage:        1 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    4
  5407 ;; This function calls:
  5408 ;;		_I2C_Master_Start
  5409 ;;		_I2C_Master_Stop
  5410 ;;		_I2C_Master_Write
  5411 ;; This function is called by:
  5412 ;;		_doOperation
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text13
  5417  00410C                     __ptext13:
  5418                           	opt callstack 0
  5419  00410C                     _sendArduinoAbortOperationMessage:
  5420                           	opt callstack 25
  5421                           
  5422                           ;main.c: 510:     I2C_Master_Start();
  5423                           
  5424                           ;incstack = 0
  5425  00410C  ECE8  F020         	call	_I2C_Master_Start	;wreg free
  5426                           
  5427                           ;main.c: 511:     I2C_Master_Write(0b00010000);
  5428  004110  0E00               	movlw	0
  5429  004112  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  5430  004114  0E10               	movlw	16
  5431  004116  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  5432  004118  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  5433                           
  5434                           ;main.c: 512:     I2C_Master_Write(data);
  5435  00411C  0E00               	movlw	0
  5436  00411E  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  5437  004120  0E33               	movlw	51
  5438  004122  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  5439  004124  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  5440                           
  5441                           ;main.c: 513:     I2C_Master_Stop();
  5442  004128  ECE4  F020         	call	_I2C_Master_Stop	;wreg free
  5443  00412C  0012               	return		;funcret
  5444  00412E                     __end_of_sendArduinoAbortOperationMessage:
  5445                           	opt callstack 0
  5446                           
  5447 ;; *************** function _requestIsTireDropDone *****************
  5448 ;; Defined at:
  5449 ;;		line 518 in file "main.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  data            1    8[COMRAM] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      _Bool 
  5456 ;; Registers used:
  5457 ;;		wreg, status,2, status,0, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;Total ram usage:        1 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    4
  5470 ;; This function calls:
  5471 ;;		_I2C_Master_Read
  5472 ;;		_I2C_Master_Start
  5473 ;;		_I2C_Master_Stop
  5474 ;;		_I2C_Master_Write
  5475 ;; This function is called by:
  5476 ;;		_doOperation
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text14
  5481  003FD8                     __ptext14:
  5482                           	opt callstack 0
  5483  003FD8                     _requestIsTireDropDone:
  5484                           	opt callstack 25
  5485                           
  5486                           ;main.c: 519:     I2C_Master_Start();
  5487                           
  5488                           ;incstack = 0
  5489  003FD8  ECE8  F020         	call	_I2C_Master_Start	;wreg free
  5490                           
  5491                           ;main.c: 520:     I2C_Master_Write(0b00010001);
  5492  003FDC  0E00               	movlw	0
  5493  003FDE  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  5494  003FE0  0E11               	movlw	17
  5495  003FE2  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  5496  003FE4  ECDB  F020         	call	_I2C_Master_Write	;wreg free
  5497                           
  5498                           ;main.c: 521:     unsigned char data = I2C_Master_Read(1);
  5499  003FE8  0E01               	movlw	1
  5500  003FEA  EC52  F020         	call	_I2C_Master_Read
  5501  003FEE  6E09               	movwf	requestIsTireDropDone@data,c
  5502                           
  5503                           ;main.c: 522:     I2C_Master_Stop();
  5504  003FF0  ECE4  F020         	call	_I2C_Master_Stop	;wreg free
  5505                           
  5506                           ;main.c: 523:     if(data == '1'){
  5507  003FF4  0E31               	movlw	49
  5508  003FF6  1809               	xorwf	requestIsTireDropDone@data,w,c
  5509  003FF8  A4D8               	btfss	status,2,c
  5510  003FFA  D002               	goto	l8664
  5511                           
  5512                           ;main.c: 524:         return 1;
  5513  003FFC  0E01               	movlw	1
  5514  003FFE  0012               	return	
  5515  004000                     l8664:
  5516                           
  5517                           ;main.c: 526:     return 0;
  5518  004000  0E00               	movlw	0
  5519  004002  0012               	return		;funcret
  5520  004004                     __end_of_requestIsTireDropDone:
  5521                           	opt callstack 0
  5522                           
  5523 ;; *************** function _I2C_Master_Write *****************
  5524 ;; Defined at:
  5525 ;;		line 70 in file "I2C.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;  byteToWrite     2    6[COMRAM] unsigned int 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;		None
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  1    wreg      void 
  5532 ;; Registers used:
  5533 ;;		wreg, status,2, status,0, cstack
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5539 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;Total ram usage:        2 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    3
  5546 ;; This function calls:
  5547 ;;		_I2C_Master_Wait
  5548 ;; This function is called by:
  5549 ;;		_sendArduinoTireDropRequest
  5550 ;;		_sendArduinoTireOperationStartMessage
  5551 ;;		_sendArduinoAbortOperationMessage
  5552 ;;		_requestIsTireDropDone
  5553 ;;		_doOperation
  5554 ;;		_main
  5555 ;;		_rtc_set_time
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text15
  5560  0041B6                     __ptext15:
  5561                           	opt callstack 0
  5562  0041B6                     _I2C_Master_Write:
  5563                           	opt callstack 25
  5564                           
  5565                           ;I2C.c: 71:     I2C_Master_Wait();
  5566                           
  5567                           ;incstack = 0
  5568  0041B6  ECBD  F020         	call	_I2C_Master_Wait	;wreg free
  5569                           
  5570                           ;I2C.c: 74:     SSPBUF = byteToWrite;
  5571  0041BA  C007  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  5572  0041BE  0012               	return		;funcret
  5573  0041C0                     __end_of_I2C_Master_Write:
  5574                           	opt callstack 0
  5575                           
  5576 ;; *************** function _I2C_Master_Stop *****************
  5577 ;; Defined at:
  5578 ;;		line 65 in file "I2C.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;		None
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;Total ram usage:        0 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    3
  5599 ;; This function calls:
  5600 ;;		_I2C_Master_Wait
  5601 ;; This function is called by:
  5602 ;;		_sendArduinoTireDropRequest
  5603 ;;		_sendArduinoTireOperationStartMessage
  5604 ;;		_sendArduinoAbortOperationMessage
  5605 ;;		_requestIsTireDropDone
  5606 ;;		_doOperation
  5607 ;;		_main
  5608 ;;		_rtc_set_time
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text16
  5613  0041C8                     __ptext16:
  5614                           	opt callstack 0
  5615  0041C8                     _I2C_Master_Stop:
  5616                           	opt callstack 25
  5617                           
  5618                           ;I2C.c: 66:     I2C_Master_Wait();
  5619                           
  5620                           ;incstack = 0
  5621  0041C8  ECBD  F020         	call	_I2C_Master_Wait	;wreg free
  5622                           
  5623                           ;I2C.c: 67:     SSPCON2bits.PEN = 1;
  5624  0041CC  84C5               	bsf	4037,2,c	;volatile
  5625  0041CE  0012               	return		;funcret
  5626  0041D0                     __end_of_I2C_Master_Stop:
  5627                           	opt callstack 0
  5628                           
  5629 ;; *************** function _I2C_Master_Start *****************
  5630 ;; Defined at:
  5631 ;;		line 55 in file "I2C.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      void 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;Total ram usage:        0 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    3
  5652 ;; This function calls:
  5653 ;;		_I2C_Master_Wait
  5654 ;; This function is called by:
  5655 ;;		_sendArduinoTireDropRequest
  5656 ;;		_sendArduinoTireOperationStartMessage
  5657 ;;		_sendArduinoAbortOperationMessage
  5658 ;;		_requestIsTireDropDone
  5659 ;;		_doOperation
  5660 ;;		_main
  5661 ;;		_rtc_set_time
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           	psect	text17
  5666  0041D0                     __ptext17:
  5667                           	opt callstack 0
  5668  0041D0                     _I2C_Master_Start:
  5669                           	opt callstack 25
  5670                           
  5671                           ;I2C.c: 56:     I2C_Master_Wait();
  5672                           
  5673                           ;incstack = 0
  5674  0041D0  ECBD  F020         	call	_I2C_Master_Wait	;wreg free
  5675                           
  5676                           ;I2C.c: 57:     SSPCON2bits.SEN = 1;
  5677  0041D4  80C5               	bsf	4037,0,c	;volatile
  5678  0041D6  0012               	return		;funcret
  5679  0041D8                     __end_of_I2C_Master_Start:
  5680                           	opt callstack 0
  5681                           
  5682 ;; *************** function _I2C_Master_Read *****************
  5683 ;; Defined at:
  5684 ;;		line 77 in file "I2C.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  ackBit          1    wreg     unsigned char 
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;  ackBit          1    6[COMRAM] unsigned char 
  5689 ;;  receivedByte    1    7[COMRAM] unsigned char 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      unsigned char 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;Total ram usage:        2 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    3
  5706 ;; This function calls:
  5707 ;;		_I2C_Master_Wait
  5708 ;; This function is called by:
  5709 ;;		_requestIsTireDropDone
  5710 ;;		_main
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text18
  5715  0040A4                     __ptext18:
  5716                           	opt callstack 0
  5717  0040A4                     _I2C_Master_Read:
  5718                           	opt callstack 25
  5719                           
  5720                           ;incstack = 0
  5721                           ;I2C_Master_Read@ackBit stored from wreg
  5722  0040A4  6E07               	movwf	I2C_Master_Read@ackBit,c
  5723                           
  5724                           ;I2C.c: 78:     I2C_Master_Wait();
  5725  0040A6  ECBD  F020         	call	_I2C_Master_Wait	;wreg free
  5726                           
  5727                           ;I2C.c: 79:     SSPCON2bits.RCEN = 1;
  5728  0040AA  86C5               	bsf	4037,3,c	;volatile
  5729                           
  5730                           ;I2C.c: 81:     I2C_Master_Wait();
  5731  0040AC  ECBD  F020         	call	_I2C_Master_Wait	;wreg free
  5732                           
  5733                           ;I2C.c: 84:     unsigned char receivedByte = SSPBUF;
  5734  0040B0  CFC9 F008          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  5735                           
  5736                           ;I2C.c: 86:     I2C_Master_Wait();
  5737  0040B4  ECBD  F020         	call	_I2C_Master_Wait	;wreg free
  5738                           
  5739                           ;I2C.c: 87:     SSPCON2bits.ACKDT = ackBit;
  5740  0040B8  B007               	btfsc	I2C_Master_Read@ackBit,0,c
  5741  0040BA  D002               	bra	u9955
  5742  0040BC  9AC5               	bcf	4037,5,c	;volatile
  5743  0040BE  D001               	bra	u9956
  5744  0040C0                     u9955:
  5745  0040C0  8AC5               	bsf	4037,5,c	;volatile
  5746  0040C2                     u9956:
  5747                           
  5748                           ;I2C.c: 88:     SSPCON2bits.ACKEN = 1;
  5749  0040C2  88C5               	bsf	4037,4,c	;volatile
  5750                           
  5751                           ;I2C.c: 90:     return receivedByte;
  5752  0040C4  5008               	movf	I2C_Master_Read@receivedByte,w,c
  5753  0040C6  0012               	return		;funcret
  5754  0040C8                     __end_of_I2C_Master_Read:
  5755                           	opt callstack 0
  5756                           
  5757 ;; *************** function _I2C_Master_Wait *****************
  5758 ;; Defined at:
  5759 ;;		line 21 in file "I2C.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;		None
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;Total ram usage:        1 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    2
  5780 ;; This function calls:
  5781 ;;		Nothing
  5782 ;; This function is called by:
  5783 ;;		_I2C_Master_Start
  5784 ;;		_I2C_Master_Stop
  5785 ;;		_I2C_Master_Write
  5786 ;;		_I2C_Master_Read
  5787 ;;		_I2C_Master_RepeatedStart
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text19
  5792  00417A                     __ptext19:
  5793                           	opt callstack 0
  5794  00417A                     _I2C_Master_Wait:
  5795                           	opt callstack 25
  5796                           
  5797                           ;I2C.c: 26:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F)){
  5798                           
  5799                           ;I2C.c: 28:     }
  5800                           
  5801                           ;incstack = 0
  5802  00417A  B4C7               	btfsc	4039,2,c	;volatile
  5803  00417C  D7FE               	goto	_I2C_Master_Wait
  5804  00417E  CFC5 F006          	movff	4037,??_I2C_Master_Wait	;volatile
  5805  004182  0E1F               	movlw	31
  5806  004184  1606               	andwf	??_I2C_Master_Wait,f,c
  5807  004186  B4D8               	btfsc	status,2,c
  5808  004188  0012               	return	
  5809  00418A  D7F7               	goto	_I2C_Master_Wait
  5810  00418C                     __end_of_I2C_Master_Wait:
  5811                           	opt callstack 0
  5812                           
  5813 ;; *************** function _opErrorCorrectionDegrees *****************
  5814 ;; Defined at:
  5815 ;;		line 602 in file "main.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  goalSpeed       2   32[BANK0 ] int 
  5818 ;;  turnRatio       2   34[BANK0 ] int 
  5819 ;;  correctionCo    4   36[BANK0 ] float 
  5820 ;;  distanceDegr    2   40[BANK0 ] int 
  5821 ;;  maxOperation    4   42[BANK0 ] unsigned long 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  motorAStartD    2   52[BANK0 ] int 
  5824 ;;  motorBStartD    2   50[BANK0 ] int 
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5834 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Totals:         1      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;Total ram usage:       23 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    6
  5841 ;; This function calls:
  5842 ;;		___xxtofl
  5843 ;;		_abs
  5844 ;;		_errorCorrectedMove
  5845 ;; This function is called by:
  5846 ;;		_doOperation
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text20
  5851  003478                     __ptext20:
  5852                           	opt callstack 0
  5853  003478                     _opErrorCorrectionDegrees:
  5854                           	opt callstack 23
  5855                           
  5856                           ;main.c: 603:     int motorAStartDistance = motorADistance;
  5857                           
  5858                           ;incstack = 0
  5859  003478  C0D9  F0B4         	movff	_motorADistance,opErrorCorrectionDegrees@motorAStartDistance	;volatile
  5860  00347C  C0DA  F0B5         	movff	_motorADistance+1,opErrorCorrectionDegrees@motorAStartDistance+1	;volatile
  5861                           
  5862                           ;main.c: 604:     int motorBStartDistance = motorBDistance;
  5863  003480  C0D7  F0B2         	movff	_motorBDistance,opErrorCorrectionDegrees@motorBStartDistance	;volatile
  5864  003484  C0D8  F0B3         	movff	_motorBDistance+1,opErrorCorrectionDegrees@motorBStartDistance+1	;volatile
  5865                           
  5866                           ;main.c: 608:     while (millisecondsMeasured < maxOperationTime && abs(motorADistance -
      +                           motorAStartDistance) < distanceDegrees){
  5867  003488  D032               	goto	l8674
  5868  00348A                     l8670:
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;main.c: 609:         errorCorrectedMove(goalSpeed, turnRatio, motorAStartDistance, moto
      +                          rBStartDistance, correctionConstant);
  5872  00348A  C0A2  F006         	movff	opErrorCorrectionDegrees@turnRatio,___xxtofl@val
  5873  00348E  C0A3  F007         	movff	opErrorCorrectionDegrees@turnRatio+1,___xxtofl@val+1
  5874  003492  0E00               	movlw	0
  5875  003494  BE07               	btfsc	___xxtofl@val+1,7,c
  5876  003496  0EFF               	movlw	-1
  5877  003498  6E08               	movwf	___xxtofl@val+2,c
  5878  00349A  6E09               	movwf	___xxtofl@val+3,c
  5879  00349C  0E01               	movlw	1
  5880  00349E  EC3E  F017         	call	___xxtofl
  5881  0034A2  C006  F0AE         	movff	?___xxtofl,_opErrorCorrectionDegrees$2275
  5882  0034A6  C007  F0AF         	movff	?___xxtofl+1,_opErrorCorrectionDegrees$2275+1
  5883  0034AA  C008  F0B0         	movff	?___xxtofl+2,_opErrorCorrectionDegrees$2275+2
  5884  0034AE  C009  F0B1         	movff	?___xxtofl+3,_opErrorCorrectionDegrees$2275+3
  5885                           
  5886                           ;main.c: 609:         errorCorrectedMove(goalSpeed, turnRatio, motorAStartDistance, moto
      +                          rBStartDistance, correctionConstant);
  5887  0034B2  C0A0  F088         	movff	opErrorCorrectionDegrees@goalSpeed,errorCorrectedMove@goalSpeed
  5888  0034B6  C0A1  F089         	movff	opErrorCorrectionDegrees@goalSpeed+1,errorCorrectedMove@goalSpeed+1
  5889  0034BA  C0AE  F08A         	movff	_opErrorCorrectionDegrees$2275,errorCorrectedMove@turnRatio
  5890  0034BE  C0AF  F08B         	movff	_opErrorCorrectionDegrees$2275+1,errorCorrectedMove@turnRatio+1
  5891  0034C2  C0B0  F08C         	movff	_opErrorCorrectionDegrees$2275+2,errorCorrectedMove@turnRatio+2
  5892  0034C6  C0B1  F08D         	movff	_opErrorCorrectionDegrees$2275+3,errorCorrectedMove@turnRatio+3
  5893  0034CA  C0B4  F08E         	movff	opErrorCorrectionDegrees@motorAStartDistance,errorCorrectedMove@motorAStartDistan
      +                          ce
  5894  0034CE  C0B5  F08F         	movff	opErrorCorrectionDegrees@motorAStartDistance+1,errorCorrectedMove@motorAStartDist
      +                          ance+1
  5895  0034D2  C0B2  F090         	movff	opErrorCorrectionDegrees@motorBStartDistance,errorCorrectedMove@motorBStartDistan
      +                          ce
  5896  0034D6  C0B3  F091         	movff	opErrorCorrectionDegrees@motorBStartDistance+1,errorCorrectedMove@motorBStartDist
      +                          ance+1
  5897  0034DA  C0A4  F092         	movff	opErrorCorrectionDegrees@correctionConstant,errorCorrectedMove@correctionConstant
  5898  0034DE  C0A5  F093         	movff	opErrorCorrectionDegrees@correctionConstant+1,errorCorrectedMove@correctionConsta
      +                          nt+1
  5899  0034E2  C0A6  F094         	movff	opErrorCorrectionDegrees@correctionConstant+2,errorCorrectedMove@correctionConsta
      +                          nt+2
  5900  0034E6  C0A7  F095         	movff	opErrorCorrectionDegrees@correctionConstant+3,errorCorrectedMove@correctionConsta
      +                          nt+3
  5901  0034EA  ECAF  F010         	call	_errorCorrectedMove	;wreg free
  5902  0034EE                     l8674:
  5903                           
  5904                           ;main.c: 608:     while (millisecondsMeasured < maxOperationTime && abs(motorADistance -
      +                           motorAStartDistance) < distanceDegrees){
  5905  0034EE  0100               	movlb	0	; () banked
  5906  0034F0  51AA               	movf	opErrorCorrectionDegrees@maxOperationTime& (0+255),w,b
  5907  0034F2  5C75               	subwf	_millisecondsMeasured,w,c	;volatile
  5908  0034F4  51AB               	movf	(opErrorCorrectionDegrees@maxOperationTime+1)& (0+255),w,b
  5909  0034F6  5876               	subwfb	_millisecondsMeasured+1,w,c	;volatile
  5910  0034F8  51AC               	movf	(opErrorCorrectionDegrees@maxOperationTime+2)& (0+255),w,b
  5911  0034FA  5877               	subwfb	_millisecondsMeasured+2,w,c	;volatile
  5912  0034FC  51AD               	movf	(opErrorCorrectionDegrees@maxOperationTime+3)& (0+255),w,b
  5913  0034FE  5878               	subwfb	_millisecondsMeasured+3,w,c	;volatile
  5914  003500  B0D8               	btfsc	status,0,c
  5915  003502  0012               	return	
  5916                           
  5917                           ; BSR set to: 0
  5918  003504  51B4               	movf	opErrorCorrectionDegrees@motorAStartDistance& (0+255),w,b
  5919  003506  5DD9               	subwf	_motorADistance& (0+255),w,b	;volatile
  5920  003508  6E18               	movwf	abs@a,c
  5921  00350A  51B5               	movf	(opErrorCorrectionDegrees@motorAStartDistance+1)& (0+255),w,b
  5922  00350C  59DA               	subwfb	(_motorADistance+1)& (0+255),w,b	;volatile
  5923  00350E  6E19               	movwf	abs@a+1,c
  5924  003510  EC8B  F01F         	call	_abs	;wreg free
  5925  003514  0100               	movlb	0	; () banked
  5926  003516  51A8               	movf	opErrorCorrectionDegrees@distanceDegrees& (0+255),w,b
  5927  003518  5C18               	subwf	?_abs,w,c
  5928  00351A  5019               	movf	?_abs+1,w,c
  5929  00351C  0A80               	xorlw	128
  5930  00351E  6E72               	movwf	??_opErrorCorrectionDegrees& (0+255),c
  5931  003520  51A9               	movf	(opErrorCorrectionDegrees@distanceDegrees+1)& (0+255),w,b
  5932  003522  0A80               	xorlw	128
  5933  003524  5872               	subwfb	??_opErrorCorrectionDegrees& (0+255),w,c
  5934  003526  B0D8               	btfsc	status,0,c
  5935  003528  0012               	return	
  5936  00352A  D7AF               	goto	l8670
  5937  00352C                     __end_of_opErrorCorrectionDegrees:
  5938                           	opt callstack 0
  5939                           
  5940 ;; *************** function _errorCorrectedMove *****************
  5941 ;; Defined at:
  5942 ;;		line 575 in file "main.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;  goalSpeed       2    8[BANK0 ] int 
  5945 ;;  turnRatio       4   10[BANK0 ] float 
  5946 ;;  motorAStartD    2   14[BANK0 ] int 
  5947 ;;  motorBStartD    2   16[BANK0 ] int 
  5948 ;;  correctionCo    4   18[BANK0 ] float 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  BSpeed          2   30[BANK0 ] int 
  5951 ;;  ASpeed          2   28[BANK0 ] int 
  5952 ;;  error           2   26[BANK0 ] int 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5962 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;Total ram usage:       24 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    5
  5969 ;; This function calls:
  5970 ;;		___fladd
  5971 ;;		___fldiv
  5972 ;;		___flmul
  5973 ;;		___flsub
  5974 ;;		___fltol
  5975 ;;		___xxtofl
  5976 ;;		_setMotorSpeeds
  5977 ;; This function is called by:
  5978 ;;		_opErrorCorrectionDegrees
  5979 ;;		_doOperation
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text21
  5984  00215E                     __ptext21:
  5985                           	opt callstack 0
  5986  00215E                     _errorCorrectedMove:
  5987                           	opt callstack 23
  5988                           
  5989                           ;main.c: 576:     int error = (int)((motorADistance - motorAStartDistance)-(motorBDistan
      +                          ce - motorBStartDistance)/turnRatio);
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;incstack = 0
  5993  00215E  C08A  F031         	movff	errorCorrectedMove@turnRatio,___fldiv@a
  5994  002162  C08B  F032         	movff	errorCorrectedMove@turnRatio+1,___fldiv@a+1
  5995  002166  C08C  F033         	movff	errorCorrectedMove@turnRatio+2,___fldiv@a+2
  5996  00216A  C08D  F034         	movff	errorCorrectedMove@turnRatio+3,___fldiv@a+3
  5997  00216E  0100               	movlb	0	; () banked
  5998  002170  5190               	movf	errorCorrectedMove@motorBStartDistance& (0+255),w,b
  5999  002172  5DD7               	subwf	_motorBDistance& (0+255),w,b	;volatile
  6000  002174  6F96               	movwf	??_errorCorrectedMove& (0+255),b
  6001  002176  5191               	movf	(errorCorrectedMove@motorBStartDistance+1)& (0+255),w,b
  6002  002178  59D8               	subwfb	(_motorBDistance+1)& (0+255),w,b	;volatile
  6003  00217A  6F97               	movwf	(??_errorCorrectedMove+1)& (0+255),b
  6004  00217C  C096  F006         	movff	??_errorCorrectedMove,___xxtofl@val
  6005  002180  C097  F007         	movff	??_errorCorrectedMove+1,___xxtofl@val+1
  6006  002184  0E00               	movlw	0
  6007  002186  BE07               	btfsc	___xxtofl@val+1,7,c
  6008  002188  0EFF               	movlw	-1
  6009  00218A  6E08               	movwf	___xxtofl@val+2,c
  6010  00218C  6E09               	movwf	___xxtofl@val+3,c
  6011  00218E  0E01               	movlw	1
  6012  002190  EC3E  F017         	call	___xxtofl
  6013  002194  C006  F02D         	movff	?___xxtofl,___fldiv@b
  6014  002198  C007  F02E         	movff	?___xxtofl+1,___fldiv@b+1
  6015  00219C  C008  F02F         	movff	?___xxtofl+2,___fldiv@b+2
  6016  0021A0  C009  F030         	movff	?___xxtofl+3,___fldiv@b+3
  6017  0021A4  EC6B  F00F         	call	___fldiv	;wreg free
  6018  0021A8  C02D  F04A         	movff	?___fldiv,___flsub@a
  6019  0021AC  C02E  F04B         	movff	?___fldiv+1,___flsub@a+1
  6020  0021B0  C02F  F04C         	movff	?___fldiv+2,___flsub@a+2
  6021  0021B4  C030  F04D         	movff	?___fldiv+3,___flsub@a+3
  6022  0021B8  0100               	movlb	0	; () banked
  6023  0021BA  518E               	movf	errorCorrectedMove@motorAStartDistance& (0+255),w,b
  6024  0021BC  5DD9               	subwf	_motorADistance& (0+255),w,b	;volatile
  6025  0021BE  6F98               	movwf	(??_errorCorrectedMove+2)& (0+255),b
  6026  0021C0  518F               	movf	(errorCorrectedMove@motorAStartDistance+1)& (0+255),w,b
  6027  0021C2  59DA               	subwfb	(_motorADistance+1)& (0+255),w,b	;volatile
  6028  0021C4  6F99               	movwf	(??_errorCorrectedMove+3)& (0+255),b
  6029  0021C6  C098  F006         	movff	??_errorCorrectedMove+2,___xxtofl@val
  6030  0021CA  C099  F007         	movff	??_errorCorrectedMove+3,___xxtofl@val+1
  6031  0021CE  0E00               	movlw	0
  6032  0021D0  BE07               	btfsc	___xxtofl@val+1,7,c
  6033  0021D2  0EFF               	movlw	-1
  6034  0021D4  6E08               	movwf	___xxtofl@val+2,c
  6035  0021D6  6E09               	movwf	___xxtofl@val+3,c
  6036  0021D8  0E01               	movlw	1
  6037  0021DA  EC3E  F017         	call	___xxtofl
  6038  0021DE  C006  F046         	movff	?___xxtofl,___flsub@b
  6039  0021E2  C007  F047         	movff	?___xxtofl+1,___flsub@b+1
  6040  0021E6  C008  F048         	movff	?___xxtofl+2,___flsub@b+2
  6041  0021EA  C009  F049         	movff	?___xxtofl+3,___flsub@b+3
  6042  0021EE  EC6A  F01E         	call	___flsub	;wreg free
  6043  0021F2  C046  F04E         	movff	?___flsub,___fltol@f1
  6044  0021F6  C047  F04F         	movff	?___flsub+1,___fltol@f1+1
  6045  0021FA  C048  F050         	movff	?___flsub+2,___fltol@f1+2
  6046  0021FE  C049  F051         	movff	?___flsub+3,___fltol@f1+3
  6047  002202  ECDF  F019         	call	___fltol	;wreg free
  6048  002206  C04E  F09A         	movff	?___fltol,errorCorrectedMove@error
  6049  00220A  C04F  F09B         	movff	?___fltol+1,errorCorrectedMove@error+1
  6050                           
  6051                           ;main.c: 577:     int ASpeed = (int)(goalSpeed - error*correctionConstant);
  6052  00220E  C092  F018         	movff	errorCorrectedMove@correctionConstant,___flmul@a
  6053  002212  C093  F019         	movff	errorCorrectedMove@correctionConstant+1,___flmul@a+1
  6054  002216  C094  F01A         	movff	errorCorrectedMove@correctionConstant+2,___flmul@a+2
  6055  00221A  C095  F01B         	movff	errorCorrectedMove@correctionConstant+3,___flmul@a+3
  6056  00221E  C09A  F006         	movff	errorCorrectedMove@error,___xxtofl@val
  6057  002222  C09B  F007         	movff	errorCorrectedMove@error+1,___xxtofl@val+1
  6058  002226  0E00               	movlw	0
  6059  002228  BE07               	btfsc	___xxtofl@val+1,7,c
  6060  00222A  0EFF               	movlw	-1
  6061  00222C  6E08               	movwf	___xxtofl@val+2,c
  6062  00222E  6E09               	movwf	___xxtofl@val+3,c
  6063  002230  0E01               	movlw	1
  6064  002232  EC3E  F017         	call	___xxtofl
  6065  002236  C006  F014         	movff	?___xxtofl,___flmul@b
  6066  00223A  C007  F015         	movff	?___xxtofl+1,___flmul@b+1
  6067  00223E  C008  F016         	movff	?___xxtofl+2,___flmul@b+2
  6068  002242  C009  F017         	movff	?___xxtofl+3,___flmul@b+3
  6069  002246  ECB5  F00A         	call	___flmul	;wreg free
  6070  00224A  C014  F04A         	movff	?___flmul,___flsub@a
  6071  00224E  C015  F04B         	movff	?___flmul+1,___flsub@a+1
  6072  002252  C016  F04C         	movff	?___flmul+2,___flsub@a+2
  6073  002256  C017  F04D         	movff	?___flmul+3,___flsub@a+3
  6074  00225A  C088  F006         	movff	errorCorrectedMove@goalSpeed,___xxtofl@val
  6075  00225E  C089  F007         	movff	errorCorrectedMove@goalSpeed+1,___xxtofl@val+1
  6076  002262  0E00               	movlw	0
  6077  002264  BE07               	btfsc	___xxtofl@val+1,7,c
  6078  002266  0EFF               	movlw	-1
  6079  002268  6E08               	movwf	___xxtofl@val+2,c
  6080  00226A  6E09               	movwf	___xxtofl@val+3,c
  6081  00226C  0E01               	movlw	1
  6082  00226E  EC3E  F017         	call	___xxtofl
  6083  002272  C006  F046         	movff	?___xxtofl,___flsub@b
  6084  002276  C007  F047         	movff	?___xxtofl+1,___flsub@b+1
  6085  00227A  C008  F048         	movff	?___xxtofl+2,___flsub@b+2
  6086  00227E  C009  F049         	movff	?___xxtofl+3,___flsub@b+3
  6087  002282  EC6A  F01E         	call	___flsub	;wreg free
  6088  002286  C046  F04E         	movff	?___flsub,___fltol@f1
  6089  00228A  C047  F04F         	movff	?___flsub+1,___fltol@f1+1
  6090  00228E  C048  F050         	movff	?___flsub+2,___fltol@f1+2
  6091  002292  C049  F051         	movff	?___flsub+3,___fltol@f1+3
  6092  002296  ECDF  F019         	call	___fltol	;wreg free
  6093  00229A  C04E  F09C         	movff	?___fltol,errorCorrectedMove@ASpeed
  6094  00229E  C04F  F09D         	movff	?___fltol+1,errorCorrectedMove@ASpeed+1
  6095                           
  6096                           ;main.c: 578:     int BSpeed = (int)((goalSpeed*turnRatio + error*correctionConstant));
  6097  0022A2  C092  F018         	movff	errorCorrectedMove@correctionConstant,___flmul@a
  6098  0022A6  C093  F019         	movff	errorCorrectedMove@correctionConstant+1,___flmul@a+1
  6099  0022AA  C094  F01A         	movff	errorCorrectedMove@correctionConstant+2,___flmul@a+2
  6100  0022AE  C095  F01B         	movff	errorCorrectedMove@correctionConstant+3,___flmul@a+3
  6101  0022B2  C09A  F006         	movff	errorCorrectedMove@error,___xxtofl@val
  6102  0022B6  C09B  F007         	movff	errorCorrectedMove@error+1,___xxtofl@val+1
  6103  0022BA  0E00               	movlw	0
  6104  0022BC  BE07               	btfsc	___xxtofl@val+1,7,c
  6105  0022BE  0EFF               	movlw	-1
  6106  0022C0  6E08               	movwf	___xxtofl@val+2,c
  6107  0022C2  6E09               	movwf	___xxtofl@val+3,c
  6108  0022C4  0E01               	movlw	1
  6109  0022C6  EC3E  F017         	call	___xxtofl
  6110  0022CA  C006  F014         	movff	?___xxtofl,___flmul@b
  6111  0022CE  C007  F015         	movff	?___xxtofl+1,___flmul@b+1
  6112  0022D2  C008  F016         	movff	?___xxtofl+2,___flmul@b+2
  6113  0022D6  C009  F017         	movff	?___xxtofl+3,___flmul@b+3
  6114  0022DA  ECB5  F00A         	call	___flmul	;wreg free
  6115  0022DE  C014  F031         	movff	?___flmul,___fladd@a
  6116  0022E2  C015  F032         	movff	?___flmul+1,___fladd@a+1
  6117  0022E6  C016  F033         	movff	?___flmul+2,___fladd@a+2
  6118  0022EA  C017  F034         	movff	?___flmul+3,___fladd@a+3
  6119  0022EE  C08A  F018         	movff	errorCorrectedMove@turnRatio,___flmul@a
  6120  0022F2  C08B  F019         	movff	errorCorrectedMove@turnRatio+1,___flmul@a+1
  6121  0022F6  C08C  F01A         	movff	errorCorrectedMove@turnRatio+2,___flmul@a+2
  6122  0022FA  C08D  F01B         	movff	errorCorrectedMove@turnRatio+3,___flmul@a+3
  6123  0022FE  C088  F006         	movff	errorCorrectedMove@goalSpeed,___xxtofl@val
  6124  002302  C089  F007         	movff	errorCorrectedMove@goalSpeed+1,___xxtofl@val+1
  6125  002306  0E00               	movlw	0
  6126  002308  BE07               	btfsc	___xxtofl@val+1,7,c
  6127  00230A  0EFF               	movlw	-1
  6128  00230C  6E08               	movwf	___xxtofl@val+2,c
  6129  00230E  6E09               	movwf	___xxtofl@val+3,c
  6130  002310  0E01               	movlw	1
  6131  002312  EC3E  F017         	call	___xxtofl
  6132  002316  C006  F014         	movff	?___xxtofl,___flmul@b
  6133  00231A  C007  F015         	movff	?___xxtofl+1,___flmul@b+1
  6134  00231E  C008  F016         	movff	?___xxtofl+2,___flmul@b+2
  6135  002322  C009  F017         	movff	?___xxtofl+3,___flmul@b+3
  6136  002326  ECB5  F00A         	call	___flmul	;wreg free
  6137  00232A  C014  F02D         	movff	?___flmul,___fladd@b
  6138  00232E  C015  F02E         	movff	?___flmul+1,___fladd@b+1
  6139  002332  C016  F02F         	movff	?___flmul+2,___fladd@b+2
  6140  002336  C017  F030         	movff	?___flmul+3,___fladd@b+3
  6141  00233A  ECE5  F00D         	call	___fladd	;wreg free
  6142  00233E  C02D  F04E         	movff	?___fladd,___fltol@f1
  6143  002342  C02E  F04F         	movff	?___fladd+1,___fltol@f1+1
  6144  002346  C02F  F050         	movff	?___fladd+2,___fltol@f1+2
  6145  00234A  C030  F051         	movff	?___fladd+3,___fltol@f1+3
  6146  00234E  ECDF  F019         	call	___fltol	;wreg free
  6147  002352  C04E  F09E         	movff	?___fltol,errorCorrectedMove@BSpeed
  6148  002356  C04F  F09F         	movff	?___fltol+1,errorCorrectedMove@BSpeed+1
  6149                           
  6150                           ;main.c: 580:     if (ASpeed > 100){
  6151  00235A  0100               	movlb	0	; () banked
  6152  00235C  BF9D               	btfsc	(errorCorrectedMove@ASpeed+1)& (0+255),7,b
  6153  00235E  D00A               	goto	l8380
  6154  002360  519D               	movf	(errorCorrectedMove@ASpeed+1)& (0+255),w,b
  6155  002362  E104               	bnz	u9960
  6156  002364  0E65               	movlw	101
  6157  002366  5D9C               	subwf	errorCorrectedMove@ASpeed& (0+255),w,b
  6158  002368  A0D8               	btfss	status,0,c
  6159  00236A  D004               	goto	l8380
  6160  00236C                     u9960:
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;main.c: 581:         ASpeed = 100;
  6164  00236C  0E00               	movlw	0
  6165  00236E  6F9D               	movwf	(errorCorrectedMove@ASpeed+1)& (0+255),b
  6166  002370  0E64               	movlw	100
  6167  002372  6F9C               	movwf	errorCorrectedMove@ASpeed& (0+255),b
  6168  002374                     l8380:
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;main.c: 583:     if (ASpeed < 0){
  6172  002374  AF9D               	btfss	(errorCorrectedMove@ASpeed+1)& (0+255),7,b
  6173  002376  D004               	goto	l8384
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;main.c: 584:         ASpeed = 0;
  6177  002378  0E00               	movlw	0
  6178  00237A  6F9D               	movwf	(errorCorrectedMove@ASpeed+1)& (0+255),b
  6179  00237C  0E00               	movlw	0
  6180  00237E  6F9C               	movwf	errorCorrectedMove@ASpeed& (0+255),b
  6181  002380                     l8384:
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;main.c: 586:     if (BSpeed > 100){
  6185  002380  BF9F               	btfsc	(errorCorrectedMove@BSpeed+1)& (0+255),7,b
  6186  002382  D00A               	goto	l8388
  6187  002384  519F               	movf	(errorCorrectedMove@BSpeed+1)& (0+255),w,b
  6188  002386  E104               	bnz	u9980
  6189  002388  0E65               	movlw	101
  6190  00238A  5D9E               	subwf	errorCorrectedMove@BSpeed& (0+255),w,b
  6191  00238C  A0D8               	btfss	status,0,c
  6192  00238E  D004               	goto	l8388
  6193  002390                     u9980:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;main.c: 587:         BSpeed = 100;
  6197  002390  0E00               	movlw	0
  6198  002392  6F9F               	movwf	(errorCorrectedMove@BSpeed+1)& (0+255),b
  6199  002394  0E64               	movlw	100
  6200  002396  6F9E               	movwf	errorCorrectedMove@BSpeed& (0+255),b
  6201  002398                     l8388:
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;main.c: 589:     if (BSpeed < 0){
  6205  002398  AF9F               	btfss	(errorCorrectedMove@BSpeed+1)& (0+255),7,b
  6206  00239A  D004               	goto	l8392
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;main.c: 590:         BSpeed = 0;
  6210  00239C  0E00               	movlw	0
  6211  00239E  6F9F               	movwf	(errorCorrectedMove@BSpeed+1)& (0+255),b
  6212  0023A0  0E00               	movlw	0
  6213  0023A2  6F9E               	movwf	errorCorrectedMove@BSpeed& (0+255),b
  6214  0023A4                     l8392:
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;main.c: 593:     setMotorSpeeds(ASpeed , 1, 1, BSpeed);
  6218  0023A4  C09C  F06C         	movff	errorCorrectedMove@ASpeed,setMotorSpeeds@motorASpeed
  6219  0023A8  C09D  F06D         	movff	errorCorrectedMove@ASpeed+1,setMotorSpeeds@motorASpeed+1
  6220  0023AC  0E01               	movlw	1
  6221  0023AE  6E6E               	movwf	setMotorSpeeds@Aforward,c
  6222  0023B0  0E01               	movlw	1
  6223  0023B2  6E6F               	movwf	setMotorSpeeds@Bforward,c
  6224  0023B4  C09E  F070         	movff	errorCorrectedMove@BSpeed,setMotorSpeeds@motorBSpeed
  6225  0023B8  C09F  F071         	movff	errorCorrectedMove@BSpeed+1,setMotorSpeeds@motorBSpeed+1
  6226  0023BC  EC8F  F01B         	call	_setMotorSpeeds	;wreg free
  6227  0023C0  0012               	return		;funcret
  6228  0023C2                     __end_of_errorCorrectedMove:
  6229                           	opt callstack 0
  6230                           
  6231 ;; *************** function _setMotorSpeeds *****************
  6232 ;; Defined at:
  6233 ;;		line 338 in file "main.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;  motorASpeed     2  107[COMRAM] int 
  6236 ;;  Aforward        1  109[COMRAM] _Bool 
  6237 ;;  Bforward        1  110[COMRAM] _Bool 
  6238 ;;  motorBSpeed     2  111[COMRAM] int 
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      void 
  6243 ;; Registers used:
  6244 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6250 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;Total ram usage:       14 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    4
  6257 ;; This function calls:
  6258 ;;		___xxtofl
  6259 ;;		_set_pwm_duty_cycle
  6260 ;; This function is called by:
  6261 ;;		_tirePositioning
  6262 ;;		_errorCorrectedMove
  6263 ;;		_doOperation
  6264 ;;		_PIDCorrectedMove
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           	psect	text22
  6269  00371E                     __ptext22:
  6270                           	opt callstack 0
  6271  00371E                     _setMotorSpeeds:
  6272                           	opt callstack 24
  6273                           
  6274                           ;main.c: 339:     if (Aforward){
  6275                           
  6276                           ;incstack = 0
  6277  00371E  506E               	movf	setMotorSpeeds@Aforward,w,c
  6278  003720  B4D8               	btfsc	status,2,c
  6279  003722  D003               	goto	l252
  6280                           
  6281                           ;main.c: 340:         LATAbits.LATA0 = 1;
  6282  003724  8089               	bsf	3977,0,c	;volatile
  6283                           
  6284                           ;main.c: 341:         LATAbits.LATA1 = 0;
  6285  003726  9289               	bcf	3977,1,c	;volatile
  6286                           
  6287                           ;main.c: 342:     } else {
  6288  003728  D002               	goto	l8300
  6289  00372A                     l252:
  6290                           
  6291                           ;main.c: 343:         LATAbits.LATA0 = 0;
  6292  00372A  9089               	bcf	3977,0,c	;volatile
  6293                           
  6294                           ;main.c: 344:         LATAbits.LATA1 = 1;
  6295  00372C  8289               	bsf	3977,1,c	;volatile
  6296  00372E                     l8300:
  6297                           
  6298                           ;main.c: 346:     if (Bforward){
  6299  00372E  506F               	movf	setMotorSpeeds@Bforward,w,c
  6300  003730  B4D8               	btfsc	status,2,c
  6301  003732  D003               	goto	l254
  6302                           
  6303                           ;main.c: 347:         LATAbits.LATA2 = 1;
  6304  003734  8489               	bsf	3977,2,c	;volatile
  6305                           
  6306                           ;main.c: 348:         LATAbits.LATA3 = 0;
  6307  003736  9689               	bcf	3977,3,c	;volatile
  6308                           
  6309                           ;main.c: 349:     } else {
  6310  003738  D002               	goto	l8304
  6311  00373A                     l254:
  6312                           
  6313                           ;main.c: 350:         LATAbits.LATA2 = 0;
  6314  00373A  9489               	bcf	3977,2,c	;volatile
  6315                           
  6316                           ;main.c: 351:         LATAbits.LATA3 = 1;
  6317  00373C  8689               	bsf	3977,3,c	;volatile
  6318  00373E                     l8304:
  6319                           
  6320                           ;main.c: 354:     set_pwm_duty_cycle((float) motorASpeed, (float) motorBSpeed);
  6321  00373E  C06C  F006         	movff	setMotorSpeeds@motorASpeed,___xxtofl@val
  6322  003742  C06D  F007         	movff	setMotorSpeeds@motorASpeed+1,___xxtofl@val+1
  6323  003746  0E00               	movlw	0
  6324  003748  BE07               	btfsc	___xxtofl@val+1,7,c
  6325  00374A  0EFF               	movlw	-1
  6326  00374C  6E08               	movwf	___xxtofl@val+2,c
  6327  00374E  6E09               	movwf	___xxtofl@val+3,c
  6328  003750  0E01               	movlw	1
  6329  003752  EC3E  F017         	call	___xxtofl
  6330  003756  C006  F080         	movff	?___xxtofl,_setMotorSpeeds$2272
  6331  00375A  C007  F081         	movff	?___xxtofl+1,_setMotorSpeeds$2272+1
  6332  00375E  C008  F082         	movff	?___xxtofl+2,_setMotorSpeeds$2272+2
  6333  003762  C009  F083         	movff	?___xxtofl+3,_setMotorSpeeds$2272+3
  6334                           
  6335                           ;main.c: 354:     set_pwm_duty_cycle((float) motorASpeed, (float) motorBSpeed);
  6336  003766  C070  F006         	movff	setMotorSpeeds@motorBSpeed,___xxtofl@val
  6337  00376A  C071  F007         	movff	setMotorSpeeds@motorBSpeed+1,___xxtofl@val+1
  6338  00376E  0E00               	movlw	0
  6339  003770  BE07               	btfsc	___xxtofl@val+1,7,c
  6340  003772  0EFF               	movlw	-1
  6341  003774  6E08               	movwf	___xxtofl@val+2,c
  6342  003776  6E09               	movwf	___xxtofl@val+3,c
  6343  003778  0E01               	movlw	1
  6344  00377A  EC3E  F017         	call	___xxtofl
  6345  00377E  C006  F084         	movff	?___xxtofl,_setMotorSpeeds$2273
  6346  003782  C007  F085         	movff	?___xxtofl+1,_setMotorSpeeds$2273+1
  6347  003786  C008  F086         	movff	?___xxtofl+2,_setMotorSpeeds$2273+2
  6348  00378A  C009  F087         	movff	?___xxtofl+3,_setMotorSpeeds$2273+3
  6349                           
  6350                           ;main.c: 354:     set_pwm_duty_cycle((float) motorASpeed, (float) motorBSpeed);
  6351  00378E  C080  F058         	movff	_setMotorSpeeds$2272,set_pwm_duty_cycle@dutyA
  6352  003792  C081  F059         	movff	_setMotorSpeeds$2272+1,set_pwm_duty_cycle@dutyA+1
  6353  003796  C082  F05A         	movff	_setMotorSpeeds$2272+2,set_pwm_duty_cycle@dutyA+2
  6354  00379A  C083  F05B         	movff	_setMotorSpeeds$2272+3,set_pwm_duty_cycle@dutyA+3
  6355  00379E  C084  F05C         	movff	_setMotorSpeeds$2273,set_pwm_duty_cycle@dutyB
  6356  0037A2  C085  F05D         	movff	_setMotorSpeeds$2273+1,set_pwm_duty_cycle@dutyB+1
  6357  0037A6  C086  F05E         	movff	_setMotorSpeeds$2273+2,set_pwm_duty_cycle@dutyB+2
  6358  0037AA  C087  F05F         	movff	_setMotorSpeeds$2273+3,set_pwm_duty_cycle@dutyB+3
  6359  0037AE  EC1E  F014         	call	_set_pwm_duty_cycle	;wreg free
  6360  0037B2  0012               	return		;funcret
  6361  0037B4                     __end_of_setMotorSpeeds:
  6362                           	opt callstack 0
  6363                           
  6364 ;; *************** function _set_pwm_duty_cycle *****************
  6365 ;; Defined at:
  6366 ;;		line 308 in file "main.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;  dutyA           4   87[COMRAM] float 
  6369 ;;  dutyB           4   91[COMRAM] float 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  duty_valB       2  101[COMRAM] unsigned short 
  6372 ;;  duty_valA       2   99[COMRAM] unsigned short 
  6373 ;;  max_duty_val    2   97[COMRAM] unsigned short 
  6374 ;; Return value:  Size  Location     Type
  6375 ;;                  1    wreg      void 
  6376 ;; Registers used:
  6377 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6378 ;; Tracked objects:
  6379 ;;		On entry : 0/0
  6380 ;;		On exit  : 0/0
  6381 ;;		Unchanged: 0/0
  6382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6383 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6385 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6386 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;Total ram usage:       20 bytes
  6388 ;; Hardware stack levels used:    1
  6389 ;; Hardware stack levels required when called:    3
  6390 ;; This function calls:
  6391 ;;		___fldiv
  6392 ;;		___flge
  6393 ;;		___flmul
  6394 ;;		___fltol
  6395 ;;		___xxtofl
  6396 ;; This function is called by:
  6397 ;;		_setMotorSpeeds
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text23
  6402  00283C                     __ptext23:
  6403                           	opt callstack 0
  6404  00283C                     _set_pwm_duty_cycle:
  6405                           	opt callstack 24
  6406                           
  6407                           ;main.c: 309:     if((dutyA >= 0) && (dutyA <= 100.0) && (dutyB >= 0) && (dutyB <= 100.0
      +                          )){
  6408                           
  6409                           ;incstack = 0
  6410  00283C  BE5B               	btfsc	set_pwm_duty_cycle@dutyA+3,7,c
  6411  00283E  0012               	return	
  6412  002840  0E00               	movlw	0
  6413  002842  6E06               	movwf	___flge@ff1,c
  6414  002844  0E00               	movlw	0
  6415  002846  6E07               	movwf	___flge@ff1+1,c
  6416  002848  0EC8               	movlw	200
  6417  00284A  6E08               	movwf	___flge@ff1+2,c
  6418  00284C  0E42               	movlw	66
  6419  00284E  6E09               	movwf	___flge@ff1+3,c
  6420  002850  C058  F00A         	movff	set_pwm_duty_cycle@dutyA,___flge@ff2
  6421  002854  C059  F00B         	movff	set_pwm_duty_cycle@dutyA+1,___flge@ff2+1
  6422  002858  C05A  F00C         	movff	set_pwm_duty_cycle@dutyA+2,___flge@ff2+2
  6423  00285C  C05B  F00D         	movff	set_pwm_duty_cycle@dutyA+3,___flge@ff2+3
  6424  002860  EC10  F019         	call	___flge	;wreg free
  6425  002864  A0D8               	btfss	status,0,c
  6426  002866  0012               	return	
  6427  002868  BE5F               	btfsc	set_pwm_duty_cycle@dutyB+3,7,c
  6428  00286A  0012               	return	
  6429  00286C  0E00               	movlw	0
  6430  00286E  6E06               	movwf	___flge@ff1,c
  6431  002870  0E00               	movlw	0
  6432  002872  6E07               	movwf	___flge@ff1+1,c
  6433  002874  0EC8               	movlw	200
  6434  002876  6E08               	movwf	___flge@ff1+2,c
  6435  002878  0E42               	movlw	66
  6436  00287A  6E09               	movwf	___flge@ff1+3,c
  6437  00287C  C05C  F00A         	movff	set_pwm_duty_cycle@dutyB,___flge@ff2
  6438  002880  C05D  F00B         	movff	set_pwm_duty_cycle@dutyB+1,___flge@ff2+1
  6439  002884  C05E  F00C         	movff	set_pwm_duty_cycle@dutyB+2,___flge@ff2+2
  6440  002888  C05F  F00D         	movff	set_pwm_duty_cycle@dutyB+3,___flge@ff2+3
  6441  00288C  EC10  F019         	call	___flge	;wreg free
  6442  002890  A0D8               	btfss	status,0,c
  6443  002892  0012               	return	
  6444                           
  6445                           ;main.c: 314:         unsigned short max_duty_val = PR2 + 1;
  6446  002894  0E01               	movlw	1
  6447  002896  24CB               	addwf	4043,w,c	;volatile
  6448  002898  6E62               	movwf	set_pwm_duty_cycle@max_duty_val,c
  6449  00289A  6A63               	clrf	set_pwm_duty_cycle@max_duty_val+1,c
  6450  00289C  0E00               	movlw	0
  6451  00289E  2263               	addwfc	set_pwm_duty_cycle@max_duty_val+1,f,c
  6452                           
  6453                           ;main.c: 320:         unsigned short duty_valA = (unsigned short)((dutyA *4 / 100.0) * (
      +                          float)max_duty_val);
  6454  0028A0  0E00               	movlw	0
  6455  0028A2  6E31               	movwf	___fldiv@a,c
  6456  0028A4  0E00               	movlw	0
  6457  0028A6  6E32               	movwf	___fldiv@a+1,c
  6458  0028A8  0EC8               	movlw	200
  6459  0028AA  6E33               	movwf	___fldiv@a+2,c
  6460  0028AC  0E42               	movlw	66
  6461  0028AE  6E34               	movwf	___fldiv@a+3,c
  6462  0028B0  0E00               	movlw	0
  6463  0028B2  6E18               	movwf	___flmul@a,c
  6464  0028B4  0E00               	movlw	0
  6465  0028B6  6E19               	movwf	___flmul@a+1,c
  6466  0028B8  0E80               	movlw	128
  6467  0028BA  6E1A               	movwf	___flmul@a+2,c
  6468  0028BC  0E40               	movlw	64
  6469  0028BE  6E1B               	movwf	___flmul@a+3,c
  6470  0028C0  C058  F014         	movff	set_pwm_duty_cycle@dutyA,___flmul@b
  6471  0028C4  C059  F015         	movff	set_pwm_duty_cycle@dutyA+1,___flmul@b+1
  6472  0028C8  C05A  F016         	movff	set_pwm_duty_cycle@dutyA+2,___flmul@b+2
  6473  0028CC  C05B  F017         	movff	set_pwm_duty_cycle@dutyA+3,___flmul@b+3
  6474  0028D0  ECB5  F00A         	call	___flmul	;wreg free
  6475  0028D4  C014  F02D         	movff	?___flmul,___fldiv@b
  6476  0028D8  C015  F02E         	movff	?___flmul+1,___fldiv@b+1
  6477  0028DC  C016  F02F         	movff	?___flmul+2,___fldiv@b+2
  6478  0028E0  C017  F030         	movff	?___flmul+3,___fldiv@b+3
  6479  0028E4  EC6B  F00F         	call	___fldiv	;wreg free
  6480  0028E8  C02D  F068         	movff	?___fldiv,_set_pwm_duty_cycle$2271
  6481  0028EC  C02E  F069         	movff	?___fldiv+1,_set_pwm_duty_cycle$2271+1
  6482  0028F0  C02F  F06A         	movff	?___fldiv+2,_set_pwm_duty_cycle$2271+2
  6483  0028F4  C030  F06B         	movff	?___fldiv+3,_set_pwm_duty_cycle$2271+3
  6484                           
  6485                           ;main.c: 320:         unsigned short duty_valA = (unsigned short)((dutyA *4 / 100.0) * (
      +                          float)max_duty_val);
  6486  0028F8  C062  F006         	movff	set_pwm_duty_cycle@max_duty_val,___xxtofl@val
  6487  0028FC  C063  F007         	movff	set_pwm_duty_cycle@max_duty_val+1,___xxtofl@val+1
  6488  002900  6A08               	clrf	___xxtofl@val+2,c
  6489  002902  6A09               	clrf	___xxtofl@val+3,c
  6490  002904  0E00               	movlw	0
  6491  002906  EC3E  F017         	call	___xxtofl
  6492  00290A  C006  F018         	movff	?___xxtofl,___flmul@a
  6493  00290E  C007  F019         	movff	?___xxtofl+1,___flmul@a+1
  6494  002912  C008  F01A         	movff	?___xxtofl+2,___flmul@a+2
  6495  002916  C009  F01B         	movff	?___xxtofl+3,___flmul@a+3
  6496  00291A  C068  F014         	movff	_set_pwm_duty_cycle$2271,___flmul@b
  6497  00291E  C069  F015         	movff	_set_pwm_duty_cycle$2271+1,___flmul@b+1
  6498  002922  C06A  F016         	movff	_set_pwm_duty_cycle$2271+2,___flmul@b+2
  6499  002926  C06B  F017         	movff	_set_pwm_duty_cycle$2271+3,___flmul@b+3
  6500  00292A  ECB5  F00A         	call	___flmul	;wreg free
  6501  00292E  C014  F04E         	movff	?___flmul,___fltol@f1
  6502  002932  C015  F04F         	movff	?___flmul+1,___fltol@f1+1
  6503  002936  C016  F050         	movff	?___flmul+2,___fltol@f1+2
  6504  00293A  C017  F051         	movff	?___flmul+3,___fltol@f1+3
  6505  00293E  ECDF  F019         	call	___fltol	;wreg free
  6506  002942  C04E  F064         	movff	?___fltol,set_pwm_duty_cycle@duty_valA
  6507  002946  C04F  F065         	movff	?___fltol+1,set_pwm_duty_cycle@duty_valA+1
  6508                           
  6509                           ;main.c: 321:         unsigned short duty_valB = (unsigned short)((dutyB *4/ 100.0) * (f
      +                          loat)max_duty_val);
  6510  00294A  0E00               	movlw	0
  6511  00294C  6E31               	movwf	___fldiv@a,c
  6512  00294E  0E00               	movlw	0
  6513  002950  6E32               	movwf	___fldiv@a+1,c
  6514  002952  0EC8               	movlw	200
  6515  002954  6E33               	movwf	___fldiv@a+2,c
  6516  002956  0E42               	movlw	66
  6517  002958  6E34               	movwf	___fldiv@a+3,c
  6518  00295A  0E00               	movlw	0
  6519  00295C  6E18               	movwf	___flmul@a,c
  6520  00295E  0E00               	movlw	0
  6521  002960  6E19               	movwf	___flmul@a+1,c
  6522  002962  0E80               	movlw	128
  6523  002964  6E1A               	movwf	___flmul@a+2,c
  6524  002966  0E40               	movlw	64
  6525  002968  6E1B               	movwf	___flmul@a+3,c
  6526  00296A  C05C  F014         	movff	set_pwm_duty_cycle@dutyB,___flmul@b
  6527  00296E  C05D  F015         	movff	set_pwm_duty_cycle@dutyB+1,___flmul@b+1
  6528  002972  C05E  F016         	movff	set_pwm_duty_cycle@dutyB+2,___flmul@b+2
  6529  002976  C05F  F017         	movff	set_pwm_duty_cycle@dutyB+3,___flmul@b+3
  6530  00297A  ECB5  F00A         	call	___flmul	;wreg free
  6531  00297E  C014  F02D         	movff	?___flmul,___fldiv@b
  6532  002982  C015  F02E         	movff	?___flmul+1,___fldiv@b+1
  6533  002986  C016  F02F         	movff	?___flmul+2,___fldiv@b+2
  6534  00298A  C017  F030         	movff	?___flmul+3,___fldiv@b+3
  6535  00298E  EC6B  F00F         	call	___fldiv	;wreg free
  6536  002992  C02D  F068         	movff	?___fldiv,_set_pwm_duty_cycle$2271
  6537  002996  C02E  F069         	movff	?___fldiv+1,_set_pwm_duty_cycle$2271+1
  6538  00299A  C02F  F06A         	movff	?___fldiv+2,_set_pwm_duty_cycle$2271+2
  6539  00299E  C030  F06B         	movff	?___fldiv+3,_set_pwm_duty_cycle$2271+3
  6540                           
  6541                           ;main.c: 321:         unsigned short duty_valB = (unsigned short)((dutyB *4/ 100.0) * (f
      +                          loat)max_duty_val);
  6542  0029A2  C062  F006         	movff	set_pwm_duty_cycle@max_duty_val,___xxtofl@val
  6543  0029A6  C063  F007         	movff	set_pwm_duty_cycle@max_duty_val+1,___xxtofl@val+1
  6544  0029AA  6A08               	clrf	___xxtofl@val+2,c
  6545  0029AC  6A09               	clrf	___xxtofl@val+3,c
  6546  0029AE  0E00               	movlw	0
  6547  0029B0  EC3E  F017         	call	___xxtofl
  6548  0029B4  C006  F018         	movff	?___xxtofl,___flmul@a
  6549  0029B8  C007  F019         	movff	?___xxtofl+1,___flmul@a+1
  6550  0029BC  C008  F01A         	movff	?___xxtofl+2,___flmul@a+2
  6551  0029C0  C009  F01B         	movff	?___xxtofl+3,___flmul@a+3
  6552  0029C4  C068  F014         	movff	_set_pwm_duty_cycle$2271,___flmul@b
  6553  0029C8  C069  F015         	movff	_set_pwm_duty_cycle$2271+1,___flmul@b+1
  6554  0029CC  C06A  F016         	movff	_set_pwm_duty_cycle$2271+2,___flmul@b+2
  6555  0029D0  C06B  F017         	movff	_set_pwm_duty_cycle$2271+3,___flmul@b+3
  6556  0029D4  ECB5  F00A         	call	___flmul	;wreg free
  6557  0029D8  C014  F04E         	movff	?___flmul,___fltol@f1
  6558  0029DC  C015  F04F         	movff	?___flmul+1,___fltol@f1+1
  6559  0029E0  C016  F050         	movff	?___flmul+2,___fltol@f1+2
  6560  0029E4  C017  F051         	movff	?___flmul+3,___fltol@f1+3
  6561  0029E8  ECDF  F019         	call	___fltol	;wreg free
  6562  0029EC  C04E  F066         	movff	?___fltol,set_pwm_duty_cycle@duty_valB
  6563  0029F0  C04F  F067         	movff	?___fltol+1,set_pwm_duty_cycle@duty_valB+1
  6564                           
  6565                           ;main.c: 325:         CCP1X = duty_valA & 2;
  6566  0029F4  9ABD               	bcf	4029,5,c	;volatile
  6567                           
  6568                           ;main.c: 326:         CCP1Y = duty_valA & 1;
  6569  0029F6  A064               	btfss	set_pwm_duty_cycle@duty_valA,0,c
  6570  0029F8  D002               	goto	u9240
  6571  0029FA  88BD               	bsf	4029,4,c	;volatile
  6572  0029FC  D001               	goto	u9255
  6573  0029FE                     u9240:
  6574  0029FE  98BD               	bcf	4029,4,c	;volatile
  6575  002A00                     u9255:
  6576                           
  6577                           ;main.c: 327:         CCPR1L = duty_valA >> 2;
  6578  002A00  C064  F060         	movff	set_pwm_duty_cycle@duty_valA,??_set_pwm_duty_cycle
  6579  002A04  C065  F061         	movff	set_pwm_duty_cycle@duty_valA+1,??_set_pwm_duty_cycle+1
  6580  002A08  90D8               	bcf	status,0,c
  6581  002A0A  3261               	rrcf	??_set_pwm_duty_cycle+1,f,c
  6582  002A0C  3260               	rrcf	??_set_pwm_duty_cycle,f,c
  6583  002A0E  90D8               	bcf	status,0,c
  6584  002A10  3261               	rrcf	??_set_pwm_duty_cycle+1,f,c
  6585  002A12  3260               	rrcf	??_set_pwm_duty_cycle,f,c
  6586  002A14  5060               	movf	??_set_pwm_duty_cycle,w,c
  6587  002A16  6EBE               	movwf	4030,c	;volatile
  6588                           
  6589                           ;main.c: 331:         CCP2X = duty_valB & 2;
  6590  002A18  9ABA               	bcf	4026,5,c	;volatile
  6591                           
  6592                           ;main.c: 332:         CCP2Y = duty_valB & 1;
  6593  002A1A  A066               	btfss	set_pwm_duty_cycle@duty_valB,0,c
  6594  002A1C  D002               	goto	u9260
  6595  002A1E  88BA               	bsf	4026,4,c	;volatile
  6596  002A20  D001               	goto	u9275
  6597  002A22                     u9260:
  6598  002A22  98BA               	bcf	4026,4,c	;volatile
  6599  002A24                     u9275:
  6600                           
  6601                           ;main.c: 333:         CCPR2L = duty_valB >> 2;
  6602  002A24  C066  F060         	movff	set_pwm_duty_cycle@duty_valB,??_set_pwm_duty_cycle
  6603  002A28  C067  F061         	movff	set_pwm_duty_cycle@duty_valB+1,??_set_pwm_duty_cycle+1
  6604  002A2C  90D8               	bcf	status,0,c
  6605  002A2E  3261               	rrcf	??_set_pwm_duty_cycle+1,f,c
  6606  002A30  3260               	rrcf	??_set_pwm_duty_cycle,f,c
  6607  002A32  90D8               	bcf	status,0,c
  6608  002A34  3261               	rrcf	??_set_pwm_duty_cycle+1,f,c
  6609  002A36  3260               	rrcf	??_set_pwm_duty_cycle,f,c
  6610  002A38  5060               	movf	??_set_pwm_duty_cycle,w,c
  6611  002A3A  6EBB               	movwf	4027,c	;volatile
  6612  002A3C  0012               	return		;funcret
  6613  002A3E                     __end_of_set_pwm_duty_cycle:
  6614                           	opt callstack 0
  6615                           
  6616 ;; *************** function ___xxtofl *****************
  6617 ;; Defined at:
  6618 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\xxtofl.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  sign            1    wreg     unsigned char 
  6621 ;;  val             4    5[COMRAM] long 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  sign            1   13[COMRAM] unsigned char 
  6624 ;;  arg             4   15[COMRAM] unsigned long 
  6625 ;;  exp             1   14[COMRAM] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  4    5[COMRAM] unsigned char 
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6637 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;Total ram usage:       14 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    2
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_set_pwm_duty_cycle
  6646 ;;		_setMotorSpeeds
  6647 ;;		_errorCorrectedMove
  6648 ;;		_opErrorCorrectionDegrees
  6649 ;;		_PIDCorrectedMove
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text24
  6654  002E7C                     __ptext24:
  6655                           	opt callstack 0
  6656  002E7C                     ___xxtofl:
  6657                           	opt callstack 24
  6658                           
  6659                           ;incstack = 0
  6660                           ;___xxtofl@sign stored from wreg
  6661  002E7C  6E0E               	movwf	___xxtofl@sign,c
  6662  002E7E  500E               	movf	___xxtofl@sign,w,c
  6663  002E80  A4D8               	btfss	status,2,c
  6664  002E82  AE09               	btfss	___xxtofl@val+3,7,c
  6665  002E84  D01A               	goto	l1383
  6666  002E86  C006  F00A         	movff	___xxtofl@val,??___xxtofl
  6667  002E8A  C007  F00B         	movff	___xxtofl@val+1,??___xxtofl+1
  6668  002E8E  C008  F00C         	movff	___xxtofl@val+2,??___xxtofl+2
  6669  002E92  C009  F00D         	movff	___xxtofl@val+3,??___xxtofl+3
  6670  002E96  1E0A               	comf	??___xxtofl,f,c
  6671  002E98  1E0B               	comf	??___xxtofl+1,f,c
  6672  002E9A  1E0C               	comf	??___xxtofl+2,f,c
  6673  002E9C  1E0D               	comf	??___xxtofl+3,f,c
  6674  002E9E  2A0A               	incf	??___xxtofl,f,c
  6675  002EA0  0E00               	movlw	0
  6676  002EA2  220B               	addwfc	??___xxtofl+1,f,c
  6677  002EA4  220C               	addwfc	??___xxtofl+2,f,c
  6678  002EA6  220D               	addwfc	??___xxtofl+3,f,c
  6679  002EA8  C00A  F010         	movff	??___xxtofl,___xxtofl@arg
  6680  002EAC  C00B  F011         	movff	??___xxtofl+1,___xxtofl@arg+1
  6681  002EB0  C00C  F012         	movff	??___xxtofl+2,___xxtofl@arg+2
  6682  002EB4  C00D  F013         	movff	??___xxtofl+3,___xxtofl@arg+3
  6683  002EB8  D008               	goto	l7860
  6684  002EBA                     l1383:
  6685  002EBA  C006  F010         	movff	___xxtofl@val,___xxtofl@arg
  6686  002EBE  C007  F011         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6687  002EC2  C008  F012         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6688  002EC6  C009  F013         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6689  002ECA                     l7860:
  6690  002ECA  5006               	movf	___xxtofl@val,w,c
  6691  002ECC  1007               	iorwf	___xxtofl@val+1,w,c
  6692  002ECE  1008               	iorwf	___xxtofl@val+2,w,c
  6693  002ED0  1009               	iorwf	___xxtofl@val+3,w,c
  6694  002ED2  A4D8               	btfss	status,2,c
  6695  002ED4  D009               	goto	l7866
  6696  002ED6  0E00               	movlw	0
  6697  002ED8  6E06               	movwf	?___xxtofl,c
  6698  002EDA  0E00               	movlw	0
  6699  002EDC  6E07               	movwf	?___xxtofl+1,c
  6700  002EDE  0E00               	movlw	0
  6701  002EE0  6E08               	movwf	?___xxtofl+2,c
  6702  002EE2  0E00               	movlw	0
  6703  002EE4  6E09               	movwf	?___xxtofl+3,c
  6704  002EE6  0012               	return	
  6705  002EE8                     l7866:
  6706  002EE8  0E96               	movlw	150
  6707  002EEA  6E0F               	movwf	___xxtofl@exp,c
  6708  002EEC  D006               	goto	l7870
  6709  002EEE                     l7868:
  6710  002EEE  2A0F               	incf	___xxtofl@exp,f,c
  6711  002EF0  90D8               	bcf	status,0,c
  6712  002EF2  3213               	rrcf	___xxtofl@arg+3,f,c
  6713  002EF4  3212               	rrcf	___xxtofl@arg+2,f,c
  6714  002EF6  3211               	rrcf	___xxtofl@arg+1,f,c
  6715  002EF8  3210               	rrcf	___xxtofl@arg,f,c
  6716  002EFA                     l7870:
  6717  002EFA  0E00               	movlw	0
  6718  002EFC  1410               	andwf	___xxtofl@arg,w,c
  6719  002EFE  6E0A               	movwf	??___xxtofl& (0+255),c
  6720  002F00  0E00               	movlw	0
  6721  002F02  1411               	andwf	___xxtofl@arg+1,w,c
  6722  002F04  6E0B               	movwf	(??___xxtofl+1)& (0+255),c
  6723  002F06  0E00               	movlw	0
  6724  002F08  1412               	andwf	___xxtofl@arg+2,w,c
  6725  002F0A  6E0C               	movwf	(??___xxtofl+2)& (0+255),c
  6726  002F0C  0EFE               	movlw	254
  6727  002F0E  1413               	andwf	___xxtofl@arg+3,w,c
  6728  002F10  6E0D               	movwf	(??___xxtofl+3)& (0+255),c
  6729  002F12  500A               	movf	??___xxtofl,w,c
  6730  002F14  100B               	iorwf	??___xxtofl+1,w,c
  6731  002F16  100C               	iorwf	??___xxtofl+2,w,c
  6732  002F18  100D               	iorwf	??___xxtofl+3,w,c
  6733  002F1A  B4D8               	btfsc	status,2,c
  6734  002F1C  D00D               	goto	l1390
  6735  002F1E  D7E7               	goto	l7868
  6736  002F20                     l7872:
  6737  002F20  2A0F               	incf	___xxtofl@exp,f,c
  6738  002F22  0E01               	movlw	1
  6739  002F24  2610               	addwf	___xxtofl@arg,f,c
  6740  002F26  0E00               	movlw	0
  6741  002F28  2211               	addwfc	___xxtofl@arg+1,f,c
  6742  002F2A  2212               	addwfc	___xxtofl@arg+2,f,c
  6743  002F2C  2213               	addwfc	___xxtofl@arg+3,f,c
  6744  002F2E  90D8               	bcf	status,0,c
  6745  002F30  3213               	rrcf	___xxtofl@arg+3,f,c
  6746  002F32  3212               	rrcf	___xxtofl@arg+2,f,c
  6747  002F34  3211               	rrcf	___xxtofl@arg+1,f,c
  6748  002F36  3210               	rrcf	___xxtofl@arg,f,c
  6749  002F38                     l1390:
  6750  002F38  0E00               	movlw	0
  6751  002F3A  1410               	andwf	___xxtofl@arg,w,c
  6752  002F3C  6E0A               	movwf	??___xxtofl& (0+255),c
  6753  002F3E  0E00               	movlw	0
  6754  002F40  1411               	andwf	___xxtofl@arg+1,w,c
  6755  002F42  6E0B               	movwf	(??___xxtofl+1)& (0+255),c
  6756  002F44  0E00               	movlw	0
  6757  002F46  1412               	andwf	___xxtofl@arg+2,w,c
  6758  002F48  6E0C               	movwf	(??___xxtofl+2)& (0+255),c
  6759  002F4A  0EFF               	movlw	255
  6760  002F4C  1413               	andwf	___xxtofl@arg+3,w,c
  6761  002F4E  6E0D               	movwf	(??___xxtofl+3)& (0+255),c
  6762  002F50  500A               	movf	??___xxtofl,w,c
  6763  002F52  100B               	iorwf	??___xxtofl+1,w,c
  6764  002F54  100C               	iorwf	??___xxtofl+2,w,c
  6765  002F56  100D               	iorwf	??___xxtofl+3,w,c
  6766  002F58  B4D8               	btfsc	status,2,c
  6767  002F5A  D007               	goto	l7880
  6768  002F5C  D7E1               	goto	l7872
  6769  002F5E                     l7878:
  6770  002F5E  060F               	decf	___xxtofl@exp,f,c
  6771  002F60  90D8               	bcf	status,0,c
  6772  002F62  3610               	rlcf	___xxtofl@arg,f,c
  6773  002F64  3611               	rlcf	___xxtofl@arg+1,f,c
  6774  002F66  3612               	rlcf	___xxtofl@arg+2,f,c
  6775  002F68  3613               	rlcf	___xxtofl@arg+3,f,c
  6776  002F6A                     l7880:
  6777  002F6A  BE12               	btfsc	___xxtofl@arg+2,7,c
  6778  002F6C  D003               	goto	u9160
  6779  002F6E  0E02               	movlw	2
  6780  002F70  600F               	cpfslt	___xxtofl@exp,c
  6781  002F72  D7F5               	goto	l7878
  6782  002F74                     u9160:
  6783  002F74  A00F               	btfss	___xxtofl@exp,0,c
  6784  002F76  9E12               	bcf	___xxtofl@arg+2,7,c
  6785  002F78  90D8               	bcf	status,0,c
  6786  002F7A  320F               	rrcf	___xxtofl@exp,f,c
  6787  002F7C  C00F  F00A         	movff	___xxtofl@exp,??___xxtofl
  6788  002F80  6A0B               	clrf	(??___xxtofl+1)& (0+255),c
  6789  002F82  6A0C               	clrf	(??___xxtofl+2)& (0+255),c
  6790  002F84  6A0D               	clrf	(??___xxtofl+3)& (0+255),c
  6791  002F86  C00A  F00D         	movff	??___xxtofl,??___xxtofl+3
  6792  002F8A  6A0C               	clrf	??___xxtofl+2,c
  6793  002F8C  6A0B               	clrf	??___xxtofl+1,c
  6794  002F8E  6A0A               	clrf	??___xxtofl,c
  6795  002F90  500A               	movf	??___xxtofl,w,c
  6796  002F92  1210               	iorwf	___xxtofl@arg,f,c
  6797  002F94  500B               	movf	??___xxtofl+1,w,c
  6798  002F96  1211               	iorwf	___xxtofl@arg+1,f,c
  6799  002F98  500C               	movf	??___xxtofl+2,w,c
  6800  002F9A  1212               	iorwf	___xxtofl@arg+2,f,c
  6801  002F9C  500D               	movf	??___xxtofl+3,w,c
  6802  002F9E  1213               	iorwf	___xxtofl@arg+3,f,c
  6803  002FA0  500E               	movf	___xxtofl@sign,w,c
  6804  002FA2  A4D8               	btfss	status,2,c
  6805  002FA4  AE09               	btfss	___xxtofl@val+3,7,c
  6806  002FA6  D001               	goto	l7896
  6807  002FA8  8E13               	bsf	___xxtofl@arg+3,7,c
  6808  002FAA                     l7896:
  6809  002FAA  C010  F006         	movff	___xxtofl@arg,?___xxtofl
  6810  002FAE  C011  F007         	movff	___xxtofl@arg+1,?___xxtofl+1
  6811  002FB2  C012  F008         	movff	___xxtofl@arg+2,?___xxtofl+2
  6812  002FB6  C013  F009         	movff	___xxtofl@arg+3,?___xxtofl+3
  6813  002FBA  0012               	return		;funcret
  6814  002FBC                     __end_of___xxtofl:
  6815                           	opt callstack 0
  6816                           
  6817 ;; *************** function ___fltol *****************
  6818 ;; Defined at:
  6819 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\fltol.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  f1              4   77[COMRAM] unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  exp1            1   86[COMRAM] unsigned char 
  6824 ;;  sign1           1   85[COMRAM] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  4   77[COMRAM] long 
  6827 ;; Registers used:
  6828 ;;		wreg, status,2, status,0
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;Total ram usage:       10 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    2
  6841 ;; This function calls:
  6842 ;;		Nothing
  6843 ;; This function is called by:
  6844 ;;		_set_pwm_duty_cycle
  6845 ;;		_errorCorrectedMove
  6846 ;;		_PIDCorrectedMove
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text25
  6851  0033BE                     __ptext25:
  6852                           	opt callstack 0
  6853  0033BE                     ___fltol:
  6854                           	opt callstack 24
  6855                           
  6856                           ;incstack = 0
  6857  0033BE  3450               	rlcf	___fltol@f1+2,w,c
  6858  0033C0  3451               	rlcf	___fltol@f1+3,w,c
  6859  0033C2  6E57               	movwf	___fltol@exp1,c
  6860  0033C4  5057               	movf	___fltol@exp1,w,c
  6861  0033C6  A4D8               	btfss	status,2,c
  6862  0033C8  D009               	goto	l7816
  6863  0033CA                     u9030:
  6864  0033CA  0E00               	movlw	0
  6865  0033CC  6E4E               	movwf	?___fltol,c
  6866  0033CE  0E00               	movlw	0
  6867  0033D0  6E4F               	movwf	?___fltol+1,c
  6868  0033D2  0E00               	movlw	0
  6869  0033D4  6E50               	movwf	?___fltol+2,c
  6870  0033D6  0E00               	movlw	0
  6871  0033D8  6E51               	movwf	?___fltol+3,c
  6872  0033DA  0012               	return	
  6873  0033DC                     l7816:
  6874  0033DC  C04E  F052         	movff	___fltol@f1,??___fltol
  6875  0033E0  C04F  F053         	movff	___fltol@f1+1,??___fltol+1
  6876  0033E4  C050  F054         	movff	___fltol@f1+2,??___fltol+2
  6877  0033E8  C051  F055         	movff	___fltol@f1+3,??___fltol+3
  6878  0033EC  0E20               	movlw	32
  6879  0033EE  D005               	goto	u9040
  6880  0033F0                     u9045:
  6881  0033F0  90D8               	bcf	status,0,c
  6882  0033F2  3255               	rrcf	??___fltol+3,f,c
  6883  0033F4  3254               	rrcf	??___fltol+2,f,c
  6884  0033F6  3253               	rrcf	??___fltol+1,f,c
  6885  0033F8  3252               	rrcf	??___fltol,f,c
  6886  0033FA                     u9040:
  6887  0033FA  2EE8               	decfsz	wreg,f,c
  6888  0033FC  D7F9               	goto	u9045
  6889  0033FE  5052               	movf	??___fltol,w,c
  6890  003400  6E56               	movwf	___fltol@sign1,c
  6891  003402  8E50               	bsf	___fltol@f1+2,7,c
  6892  003404  0EFF               	movlw	255
  6893  003406  164E               	andwf	___fltol@f1,f,c
  6894  003408  0EFF               	movlw	255
  6895  00340A  164F               	andwf	___fltol@f1+1,f,c
  6896  00340C  0EFF               	movlw	255
  6897  00340E  1650               	andwf	___fltol@f1+2,f,c
  6898  003410  0E00               	movlw	0
  6899  003412  1651               	andwf	___fltol@f1+3,f,c
  6900  003414  0E96               	movlw	150
  6901  003416  5E57               	subwf	___fltol@exp1,f,c
  6902  003418  AE57               	btfss	___fltol@exp1,7,c
  6903  00341A  D00D               	goto	l7836
  6904  00341C  5057               	movf	___fltol@exp1,w,c
  6905  00341E  0A80               	xorlw	128
  6906  003420  0F97               	addlw	151
  6907  003422  A0D8               	btfss	status,0,c
  6908  003424  D7D2               	goto	u9030
  6909  003426                     l7832:
  6910  003426  90D8               	bcf	status,0,c
  6911  003428  3251               	rrcf	___fltol@f1+3,f,c
  6912  00342A  3250               	rrcf	___fltol@f1+2,f,c
  6913  00342C  324F               	rrcf	___fltol@f1+1,f,c
  6914  00342E  324E               	rrcf	___fltol@f1,f,c
  6915  003430  3E57               	incfsz	___fltol@exp1,f,c
  6916  003432  D7F9               	goto	l7832
  6917  003434  D00D               	goto	u9080
  6918  003436                     l7836:
  6919  003436  0E1F               	movlw	31
  6920  003438  6457               	cpfsgt	___fltol@exp1,c
  6921  00343A  D007               	goto	l7844
  6922  00343C  D7C6               	goto	u9030
  6923  00343E                     l7842:
  6924  00343E  90D8               	bcf	status,0,c
  6925  003440  364E               	rlcf	___fltol@f1,f,c
  6926  003442  364F               	rlcf	___fltol@f1+1,f,c
  6927  003444  3650               	rlcf	___fltol@f1+2,f,c
  6928  003446  3651               	rlcf	___fltol@f1+3,f,c
  6929  003448  0657               	decf	___fltol@exp1,f,c
  6930  00344A                     l7844:
  6931  00344A  5057               	movf	___fltol@exp1,w,c
  6932  00344C  A4D8               	btfss	status,2,c
  6933  00344E  D7F7               	goto	l7842
  6934  003450                     u9080:
  6935  003450  5056               	movf	___fltol@sign1,w,c
  6936  003452  B4D8               	btfsc	status,2,c
  6937  003454  D008               	goto	l7850
  6938  003456  1E51               	comf	___fltol@f1+3,f,c
  6939  003458  1E50               	comf	___fltol@f1+2,f,c
  6940  00345A  1E4F               	comf	___fltol@f1+1,f,c
  6941  00345C  6C4E               	negf	___fltol@f1,c
  6942  00345E  0E00               	movlw	0
  6943  003460  224F               	addwfc	___fltol@f1+1,f,c
  6944  003462  2250               	addwfc	___fltol@f1+2,f,c
  6945  003464  2251               	addwfc	___fltol@f1+3,f,c
  6946  003466                     l7850:
  6947  003466  C04E  F04E         	movff	___fltol@f1,?___fltol
  6948  00346A  C04F  F04F         	movff	___fltol@f1+1,?___fltol+1
  6949  00346E  C050  F050         	movff	___fltol@f1+2,?___fltol+2
  6950  003472  C051  F051         	movff	___fltol@f1+3,?___fltol+3
  6951  003476  0012               	return		;funcret
  6952  003478                     __end_of___fltol:
  6953                           	opt callstack 0
  6954                           
  6955 ;; *************** function ___flmul *****************
  6956 ;; Defined at:
  6957 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcmul.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  b               4   19[COMRAM] long 
  6960 ;;  a               4   23[COMRAM] long 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  prod            4   38[COMRAM] struct .
  6963 ;;  grs             4   33[COMRAM] unsigned long 
  6964 ;;  temp            2   42[COMRAM] struct .
  6965 ;;  bexp            1   37[COMRAM] unsigned char 
  6966 ;;  aexp            1   32[COMRAM] unsigned char 
  6967 ;;  sign            1   31[COMRAM] unsigned char 
  6968 ;; Return value:  Size  Location     Type
  6969 ;;                  4   19[COMRAM] unsigned char 
  6970 ;; Registers used:
  6971 ;;		wreg, status,2, status,0, prodl, prodh
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6977 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;Total ram usage:       25 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    2
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_set_pwm_duty_cycle
  6988 ;;		_errorCorrectedMove
  6989 ;;		_PIDCorrectedMove
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text26
  6994  00156A                     __ptext26:
  6995                           	opt callstack 0
  6996  00156A                     ___flmul:
  6997                           	opt callstack 24
  6998                           
  6999                           ;incstack = 0
  7000  00156A  5017               	movf	___flmul@b+3,w,c
  7001  00156C  0B80               	andlw	128
  7002  00156E  6E20               	movwf	___flmul@sign,c
  7003  001570  5017               	movf	___flmul@b+3,w,c
  7004  001572  2417               	addwf	___flmul@b+3,w,c
  7005  001574  6E26               	movwf	___flmul@bexp,c
  7006  001576  BE16               	btfsc	___flmul@b+2,7,c
  7007  001578  8026               	bsf	___flmul@bexp,0,c
  7008  00157A  5026               	movf	___flmul@bexp,w,c
  7009  00157C  B4D8               	btfsc	status,2,c
  7010  00157E  D00D               	goto	l7672
  7011  001580  2826               	incf	___flmul@bexp,w,c
  7012  001582  A4D8               	btfss	status,2,c
  7013  001584  D008               	goto	l7670
  7014  001586  0E00               	movlw	0
  7015  001588  6E14               	movwf	___flmul@b,c
  7016  00158A  0E00               	movlw	0
  7017  00158C  6E15               	movwf	___flmul@b+1,c
  7018  00158E  0E00               	movlw	0
  7019  001590  6E16               	movwf	___flmul@b+2,c
  7020  001592  0E00               	movlw	0
  7021  001594  6E17               	movwf	___flmul@b+3,c
  7022  001596                     l7670:
  7023  001596  8E16               	bsf	___flmul@b+2,7,c
  7024  001598  D008               	goto	l7674
  7025  00159A                     l7672:
  7026  00159A  0E00               	movlw	0
  7027  00159C  6E14               	movwf	___flmul@b,c
  7028  00159E  0E00               	movlw	0
  7029  0015A0  6E15               	movwf	___flmul@b+1,c
  7030  0015A2  0E00               	movlw	0
  7031  0015A4  6E16               	movwf	___flmul@b+2,c
  7032  0015A6  0E00               	movlw	0
  7033  0015A8  6E17               	movwf	___flmul@b+3,c
  7034  0015AA                     l7674:
  7035  0015AA  501B               	movf	___flmul@a+3,w,c
  7036  0015AC  0B80               	andlw	128
  7037  0015AE  1A20               	xorwf	___flmul@sign,f,c
  7038  0015B0  501B               	movf	___flmul@a+3,w,c
  7039  0015B2  241B               	addwf	___flmul@a+3,w,c
  7040  0015B4  6E21               	movwf	___flmul@aexp,c
  7041  0015B6  BE1A               	btfsc	___flmul@a+2,7,c
  7042  0015B8  8021               	bsf	___flmul@aexp,0,c
  7043  0015BA  5021               	movf	___flmul@aexp,w,c
  7044  0015BC  B4D8               	btfsc	status,2,c
  7045  0015BE  D00D               	goto	l7690
  7046  0015C0  2821               	incf	___flmul@aexp,w,c
  7047  0015C2  A4D8               	btfss	status,2,c
  7048  0015C4  D008               	goto	l7688
  7049  0015C6  0E00               	movlw	0
  7050  0015C8  6E18               	movwf	___flmul@a,c
  7051  0015CA  0E00               	movlw	0
  7052  0015CC  6E19               	movwf	___flmul@a+1,c
  7053  0015CE  0E00               	movlw	0
  7054  0015D0  6E1A               	movwf	___flmul@a+2,c
  7055  0015D2  0E00               	movlw	0
  7056  0015D4  6E1B               	movwf	___flmul@a+3,c
  7057  0015D6                     l7688:
  7058  0015D6  8E1A               	bsf	___flmul@a+2,7,c
  7059  0015D8  D008               	goto	l1342
  7060  0015DA                     l7690:
  7061  0015DA  0E00               	movlw	0
  7062  0015DC  6E18               	movwf	___flmul@a,c
  7063  0015DE  0E00               	movlw	0
  7064  0015E0  6E19               	movwf	___flmul@a+1,c
  7065  0015E2  0E00               	movlw	0
  7066  0015E4  6E1A               	movwf	___flmul@a+2,c
  7067  0015E6  0E00               	movlw	0
  7068  0015E8  6E1B               	movwf	___flmul@a+3,c
  7069  0015EA                     l1342:
  7070  0015EA  5021               	movf	___flmul@aexp,w,c
  7071  0015EC  B4D8               	btfsc	status,2,c
  7072  0015EE  D003               	goto	u8860
  7073  0015F0  5026               	movf	___flmul@bexp,w,c
  7074  0015F2  A4D8               	btfss	status,2,c
  7075  0015F4  D009               	goto	l7698
  7076  0015F6                     u8860:
  7077  0015F6  0E00               	movlw	0
  7078  0015F8  6E14               	movwf	?___flmul,c
  7079  0015FA  0E00               	movlw	0
  7080  0015FC  6E15               	movwf	?___flmul+1,c
  7081  0015FE  0E00               	movlw	0
  7082  001600  6E16               	movwf	?___flmul+2,c
  7083  001602  0E00               	movlw	0
  7084  001604  6E17               	movwf	?___flmul+3,c
  7085  001606  0012               	return	
  7086  001608                     l7698:
  7087  001608  501A               	movf	___flmul@a+2,w,c
  7088  00160A  0214               	mulwf	___flmul@b,c
  7089  00160C  CFF3 F02B          	movff	prodl,___flmul@temp
  7090  001610  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7091  001614  502B               	movf	___flmul@temp,w,c
  7092  001616  6E22               	movwf	___flmul@grs,c
  7093  001618  6A23               	clrf	___flmul@grs+1,c
  7094  00161A  6A24               	clrf	___flmul@grs+2,c
  7095  00161C  6A25               	clrf	___flmul@grs+3,c
  7096  00161E  502C               	movf	___flmul@temp+1,w,c
  7097  001620  6E27               	movwf	___flmul@prod,c
  7098  001622  6A28               	clrf	___flmul@prod+1,c
  7099  001624  6A29               	clrf	___flmul@prod+2,c
  7100  001626  6A2A               	clrf	___flmul@prod+3,c
  7101  001628  5019               	movf	___flmul@a+1,w,c
  7102  00162A  0215               	mulwf	___flmul@b+1,c
  7103  00162C  CFF3 F02B          	movff	prodl,___flmul@temp
  7104  001630  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7105  001634  502B               	movf	___flmul@temp,w,c
  7106  001636  2622               	addwf	___flmul@grs,f,c
  7107  001638  0E00               	movlw	0
  7108  00163A  2223               	addwfc	___flmul@grs+1,f,c
  7109  00163C  2224               	addwfc	___flmul@grs+2,f,c
  7110  00163E  2225               	addwfc	___flmul@grs+3,f,c
  7111  001640  502C               	movf	___flmul@temp+1,w,c
  7112  001642  2627               	addwf	___flmul@prod,f,c
  7113  001644  0E00               	movlw	0
  7114  001646  2228               	addwfc	___flmul@prod+1,f,c
  7115  001648  2229               	addwfc	___flmul@prod+2,f,c
  7116  00164A  222A               	addwfc	___flmul@prod+3,f,c
  7117  00164C  5018               	movf	___flmul@a,w,c
  7118  00164E  0216               	mulwf	___flmul@b+2,c
  7119  001650  CFF3 F02B          	movff	prodl,___flmul@temp
  7120  001654  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7121  001658  502B               	movf	___flmul@temp,w,c
  7122  00165A  2622               	addwf	___flmul@grs,f,c
  7123  00165C  0E00               	movlw	0
  7124  00165E  2223               	addwfc	___flmul@grs+1,f,c
  7125  001660  2224               	addwfc	___flmul@grs+2,f,c
  7126  001662  2225               	addwfc	___flmul@grs+3,f,c
  7127  001664  502C               	movf	___flmul@temp+1,w,c
  7128  001666  2627               	addwf	___flmul@prod,f,c
  7129  001668  0E00               	movlw	0
  7130  00166A  2228               	addwfc	___flmul@prod+1,f,c
  7131  00166C  2229               	addwfc	___flmul@prod+2,f,c
  7132  00166E  222A               	addwfc	___flmul@prod+3,f,c
  7133  001670  C024  F025         	movff	___flmul@grs+2,___flmul@grs+3
  7134  001674  C023  F024         	movff	___flmul@grs+1,___flmul@grs+2
  7135  001678  C022  F023         	movff	___flmul@grs,___flmul@grs+1
  7136  00167C  6A22               	clrf	___flmul@grs,c
  7137  00167E  5018               	movf	___flmul@a,w,c
  7138  001680  0215               	mulwf	___flmul@b+1,c
  7139  001682  CFF3 F02B          	movff	prodl,___flmul@temp
  7140  001686  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7141  00168A  502B               	movf	___flmul@temp,w,c
  7142  00168C  2622               	addwf	___flmul@grs,f,c
  7143  00168E  502C               	movf	___flmul@temp+1,w,c
  7144  001690  2223               	addwfc	___flmul@grs+1,f,c
  7145  001692  0E00               	movlw	0
  7146  001694  2224               	addwfc	___flmul@grs+2,f,c
  7147  001696  0E00               	movlw	0
  7148  001698  2225               	addwfc	___flmul@grs+3,f,c
  7149  00169A  5019               	movf	___flmul@a+1,w,c
  7150  00169C  0214               	mulwf	___flmul@b,c
  7151  00169E  CFF3 F02B          	movff	prodl,___flmul@temp
  7152  0016A2  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7153  0016A6  502B               	movf	___flmul@temp,w,c
  7154  0016A8  2622               	addwf	___flmul@grs,f,c
  7155  0016AA  502C               	movf	___flmul@temp+1,w,c
  7156  0016AC  2223               	addwfc	___flmul@grs+1,f,c
  7157  0016AE  0E00               	movlw	0
  7158  0016B0  2224               	addwfc	___flmul@grs+2,f,c
  7159  0016B2  0E00               	movlw	0
  7160  0016B4  2225               	addwfc	___flmul@grs+3,f,c
  7161  0016B6  C024  F025         	movff	___flmul@grs+2,___flmul@grs+3
  7162  0016BA  C023  F024         	movff	___flmul@grs+1,___flmul@grs+2
  7163  0016BE  C022  F023         	movff	___flmul@grs,___flmul@grs+1
  7164  0016C2  6A22               	clrf	___flmul@grs,c
  7165  0016C4  5018               	movf	___flmul@a,w,c
  7166  0016C6  0214               	mulwf	___flmul@b,c
  7167  0016C8  CFF3 F02B          	movff	prodl,___flmul@temp
  7168  0016CC  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7169  0016D0  502B               	movf	___flmul@temp,w,c
  7170  0016D2  2622               	addwf	___flmul@grs,f,c
  7171  0016D4  502C               	movf	___flmul@temp+1,w,c
  7172  0016D6  2223               	addwfc	___flmul@grs+1,f,c
  7173  0016D8  0E00               	movlw	0
  7174  0016DA  2224               	addwfc	___flmul@grs+2,f,c
  7175  0016DC  0E00               	movlw	0
  7176  0016DE  2225               	addwfc	___flmul@grs+3,f,c
  7177  0016E0  501A               	movf	___flmul@a+2,w,c
  7178  0016E2  0215               	mulwf	___flmul@b+1,c
  7179  0016E4  CFF3 F02B          	movff	prodl,___flmul@temp
  7180  0016E8  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7181  0016EC  502B               	movf	___flmul@temp,w,c
  7182  0016EE  2627               	addwf	___flmul@prod,f,c
  7183  0016F0  502C               	movf	___flmul@temp+1,w,c
  7184  0016F2  2228               	addwfc	___flmul@prod+1,f,c
  7185  0016F4  0E00               	movlw	0
  7186  0016F6  2229               	addwfc	___flmul@prod+2,f,c
  7187  0016F8  0E00               	movlw	0
  7188  0016FA  222A               	addwfc	___flmul@prod+3,f,c
  7189  0016FC  5019               	movf	___flmul@a+1,w,c
  7190  0016FE  0216               	mulwf	___flmul@b+2,c
  7191  001700  CFF3 F02B          	movff	prodl,___flmul@temp
  7192  001704  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7193  001708  502B               	movf	___flmul@temp,w,c
  7194  00170A  2627               	addwf	___flmul@prod,f,c
  7195  00170C  502C               	movf	___flmul@temp+1,w,c
  7196  00170E  2228               	addwfc	___flmul@prod+1,f,c
  7197  001710  0E00               	movlw	0
  7198  001712  2229               	addwfc	___flmul@prod+2,f,c
  7199  001714  0E00               	movlw	0
  7200  001716  222A               	addwfc	___flmul@prod+3,f,c
  7201  001718  501A               	movf	___flmul@a+2,w,c
  7202  00171A  0216               	mulwf	___flmul@b+2,c
  7203  00171C  CFF3 F02B          	movff	prodl,___flmul@temp
  7204  001720  CFF4 F02C          	movff	prodh,___flmul@temp+1
  7205  001724  502B               	movf	___flmul@temp,w,c
  7206  001726  6E1C               	movwf	??___flmul& (0+255),c
  7207  001728  502C               	movf	___flmul@temp+1,w,c
  7208  00172A  6E1D               	movwf	(??___flmul+1)& (0+255),c
  7209  00172C  6A1E               	clrf	(??___flmul+2)& (0+255),c
  7210  00172E  6A1F               	clrf	(??___flmul+3)& (0+255),c
  7211  001730  C01E  F01F         	movff	??___flmul+2,??___flmul+3
  7212  001734  C01D  F01E         	movff	??___flmul+1,??___flmul+2
  7213  001738  C01C  F01D         	movff	??___flmul,??___flmul+1
  7214  00173C  6A1C               	clrf	??___flmul,c
  7215  00173E  501C               	movf	??___flmul,w,c
  7216  001740  2627               	addwf	___flmul@prod,f,c
  7217  001742  501D               	movf	??___flmul+1,w,c
  7218  001744  2228               	addwfc	___flmul@prod+1,f,c
  7219  001746  501E               	movf	??___flmul+2,w,c
  7220  001748  2229               	addwfc	___flmul@prod+2,f,c
  7221  00174A  501F               	movf	??___flmul+3,w,c
  7222  00174C  222A               	addwfc	___flmul@prod+3,f,c
  7223  00174E  C022  F01C         	movff	___flmul@grs,??___flmul
  7224  001752  C023  F01D         	movff	___flmul@grs+1,??___flmul+1
  7225  001756  C024  F01E         	movff	___flmul@grs+2,??___flmul+2
  7226  00175A  C025  F01F         	movff	___flmul@grs+3,??___flmul+3
  7227  00175E  0E19               	movlw	25
  7228  001760  D005               	goto	u8870
  7229  001762                     u8875:
  7230  001762  90D8               	bcf	status,0,c
  7231  001764  321F               	rrcf	??___flmul+3,f,c
  7232  001766  321E               	rrcf	??___flmul+2,f,c
  7233  001768  321D               	rrcf	??___flmul+1,f,c
  7234  00176A  321C               	rrcf	??___flmul,f,c
  7235  00176C                     u8870:
  7236  00176C  2EE8               	decfsz	wreg,f,c
  7237  00176E  D7F9               	goto	u8875
  7238  001770  501C               	movf	??___flmul,w,c
  7239  001772  2627               	addwf	___flmul@prod,f,c
  7240  001774  501D               	movf	??___flmul+1,w,c
  7241  001776  2228               	addwfc	___flmul@prod+1,f,c
  7242  001778  501E               	movf	??___flmul+2,w,c
  7243  00177A  2229               	addwfc	___flmul@prod+2,f,c
  7244  00177C  501F               	movf	??___flmul+3,w,c
  7245  00177E  222A               	addwfc	___flmul@prod+3,f,c
  7246  001780  C024  F025         	movff	___flmul@grs+2,___flmul@grs+3
  7247  001784  C023  F024         	movff	___flmul@grs+1,___flmul@grs+2
  7248  001788  C022  F023         	movff	___flmul@grs,___flmul@grs+1
  7249  00178C  6A22               	clrf	___flmul@grs,c
  7250  00178E  5021               	movf	___flmul@aexp,w,c
  7251  001790  C026  F01C         	movff	___flmul@bexp,??___flmul
  7252  001794  6A1D               	clrf	(??___flmul+1)& (0+255),c
  7253  001796  261C               	addwf	??___flmul,f,c
  7254  001798  0E00               	movlw	0
  7255  00179A  221D               	addwfc	??___flmul+1,f,c
  7256  00179C  0E82               	movlw	130
  7257  00179E  241C               	addwf	??___flmul,w,c
  7258  0017A0  6E2B               	movwf	___flmul@temp,c
  7259  0017A2  0EFF               	movlw	255
  7260  0017A4  201D               	addwfc	??___flmul+1,w,c
  7261  0017A6  6E2C               	movwf	___flmul@temp+1,c
  7262  0017A8  D00F               	goto	l7746
  7263  0017AA                     l7740:
  7264  0017AA  90D8               	bcf	status,0,c
  7265  0017AC  3627               	rlcf	___flmul@prod,f,c
  7266  0017AE  3628               	rlcf	___flmul@prod+1,f,c
  7267  0017B0  3629               	rlcf	___flmul@prod+2,f,c
  7268  0017B2  362A               	rlcf	___flmul@prod+3,f,c
  7269  0017B4  BE25               	btfsc	___flmul@grs+3,7,c
  7270  0017B6  8027               	bsf	___flmul@prod,0,c
  7271  0017B8  90D8               	bcf	status,0,c
  7272  0017BA  3622               	rlcf	___flmul@grs,f,c
  7273  0017BC  3623               	rlcf	___flmul@grs+1,f,c
  7274  0017BE  3624               	rlcf	___flmul@grs+2,f,c
  7275  0017C0  3625               	rlcf	___flmul@grs+3,f,c
  7276  0017C2  062B               	decf	___flmul@temp,f,c
  7277  0017C4  A0D8               	btfss	status,0,c
  7278  0017C6  062C               	decf	___flmul@temp+1,f,c
  7279  0017C8                     l7746:
  7280  0017C8  AE29               	btfss	___flmul@prod+2,7,c
  7281  0017CA  D7EF               	goto	l7740
  7282  0017CC  0E00               	movlw	0
  7283  0017CE  6E21               	movwf	___flmul@aexp,c
  7284  0017D0  AE25               	btfss	___flmul@grs+3,7,c
  7285  0017D2  D017               	goto	l1351
  7286  0017D4  0EFF               	movlw	255
  7287  0017D6  1422               	andwf	___flmul@grs,w,c
  7288  0017D8  6E1C               	movwf	??___flmul& (0+255),c
  7289  0017DA  0EFF               	movlw	255
  7290  0017DC  1423               	andwf	___flmul@grs+1,w,c
  7291  0017DE  6E1D               	movwf	(??___flmul+1)& (0+255),c
  7292  0017E0  0EFF               	movlw	255
  7293  0017E2  1424               	andwf	___flmul@grs+2,w,c
  7294  0017E4  6E1E               	movwf	(??___flmul+2)& (0+255),c
  7295  0017E6  0E7F               	movlw	127
  7296  0017E8  1425               	andwf	___flmul@grs+3,w,c
  7297  0017EA  6E1F               	movwf	(??___flmul+3)& (0+255),c
  7298  0017EC  501C               	movf	??___flmul,w,c
  7299  0017EE  101D               	iorwf	??___flmul+1,w,c
  7300  0017F0  101E               	iorwf	??___flmul+2,w,c
  7301  0017F2  101F               	iorwf	??___flmul+3,w,c
  7302  0017F4  B4D8               	btfsc	status,2,c
  7303  0017F6  D003               	goto	l1352
  7304  0017F8                     u8910:
  7305  0017F8  0E01               	movlw	1
  7306  0017FA  6E21               	movwf	___flmul@aexp,c
  7307  0017FC  D002               	goto	l1351
  7308  0017FE                     l1352:
  7309  0017FE  B027               	btfsc	___flmul@prod,0,c
  7310  001800  D7FB               	goto	u8910
  7311  001802                     l1351:
  7312  001802  5021               	movf	___flmul@aexp,w,c
  7313  001804  B4D8               	btfsc	status,2,c
  7314  001806  D01F               	goto	l7766
  7315  001808  0E01               	movlw	1
  7316  00180A  2627               	addwf	___flmul@prod,f,c
  7317  00180C  0E00               	movlw	0
  7318  00180E  2228               	addwfc	___flmul@prod+1,f,c
  7319  001810  2229               	addwfc	___flmul@prod+2,f,c
  7320  001812  222A               	addwfc	___flmul@prod+3,f,c
  7321  001814  A02A               	btfss	___flmul@prod+3,0,c
  7322  001816  D017               	goto	l7766
  7323  001818  C027  F01C         	movff	___flmul@prod,??___flmul
  7324  00181C  C028  F01D         	movff	___flmul@prod+1,??___flmul+1
  7325  001820  C029  F01E         	movff	___flmul@prod+2,??___flmul+2
  7326  001824  C02A  F01F         	movff	___flmul@prod+3,??___flmul+3
  7327  001828  341F               	rlcf	??___flmul+3,w,c
  7328  00182A  321F               	rrcf	??___flmul+3,f,c
  7329  00182C  321E               	rrcf	??___flmul+2,f,c
  7330  00182E  321D               	rrcf	??___flmul+1,f,c
  7331  001830  321C               	rrcf	??___flmul,f,c
  7332  001832  C01C  F027         	movff	??___flmul,___flmul@prod
  7333  001836  C01D  F028         	movff	??___flmul+1,___flmul@prod+1
  7334  00183A  C01E  F029         	movff	??___flmul+2,___flmul@prod+2
  7335  00183E  C01F  F02A         	movff	??___flmul+3,___flmul@prod+3
  7336  001842  4A2B               	infsnz	___flmul@temp,f,c
  7337  001844  2A2C               	incf	___flmul@temp+1,f,c
  7338  001846                     l7766:
  7339  001846  BE2C               	btfsc	___flmul@temp+1,7,c
  7340  001848  D00D               	goto	l7770
  7341  00184A  502C               	movf	___flmul@temp+1,w,c
  7342  00184C  E103               	bnz	u8950
  7343  00184E  282B               	incf	___flmul@temp,w,c
  7344  001850  A0D8               	btfss	status,0,c
  7345  001852  D008               	goto	l7770
  7346  001854                     u8950:
  7347  001854  0E00               	movlw	0
  7348  001856  6E27               	movwf	___flmul@prod,c
  7349  001858  0E00               	movlw	0
  7350  00185A  6E28               	movwf	___flmul@prod+1,c
  7351  00185C  0E80               	movlw	128
  7352  00185E  6E29               	movwf	___flmul@prod+2,c
  7353  001860  0E7F               	movlw	127
  7354  001862  D020               	goto	L10
  7355  001864                     l7770:
  7356  001864  BE2C               	btfsc	___flmul@temp+1,7,c
  7357  001866  D005               	goto	u8960
  7358  001868  502C               	movf	___flmul@temp+1,w,c
  7359  00186A  E10E               	bnz	l1359
  7360  00186C  042B               	decf	___flmul@temp,w,c
  7361  00186E  B0D8               	btfsc	status,0,c
  7362  001870  D00B               	goto	l1359
  7363  001872                     u8960:
  7364  001872  0E00               	movlw	0
  7365  001874  6E27               	movwf	___flmul@prod,c
  7366  001876  0E00               	movlw	0
  7367  001878  6E28               	movwf	___flmul@prod+1,c
  7368  00187A  0E00               	movlw	0
  7369  00187C  6E29               	movwf	___flmul@prod+2,c
  7370  00187E  0E00               	movlw	0
  7371  001880  6E2A               	movwf	___flmul@prod+3,c
  7372  001882  0E00               	movlw	0
  7373  001884  6E20               	movwf	___flmul@sign,c
  7374  001886  D00F               	goto	l7782
  7375  001888                     l1359:
  7376  001888  C02B  F026         	movff	___flmul@temp,___flmul@bexp
  7377  00188C  0EFF               	movlw	255
  7378  00188E  1627               	andwf	___flmul@prod,f,c
  7379  001890  0EFF               	movlw	255
  7380  001892  1628               	andwf	___flmul@prod+1,f,c
  7381  001894  0E7F               	movlw	127
  7382  001896  1629               	andwf	___flmul@prod+2,f,c
  7383  001898  0E00               	movlw	0
  7384  00189A  162A               	andwf	___flmul@prod+3,f,c
  7385  00189C  B026               	btfsc	___flmul@bexp,0,c
  7386  00189E  8E29               	bsf	___flmul@prod+2,7,c
  7387  0018A0  90D8               	bcf	status,0,c
  7388  0018A2  3026               	rrcf	___flmul@bexp,w,c
  7389  0018A4                     L10:
  7390  0018A4  6E2A               	movwf	___flmul@prod+3,c
  7391  0018A6                     l7782:
  7392  0018A6  5020               	movf	___flmul@sign,w,c
  7393  0018A8  122A               	iorwf	___flmul@prod+3,f,c
  7394  0018AA  C027  F014         	movff	___flmul@prod,?___flmul
  7395  0018AE  C028  F015         	movff	___flmul@prod+1,?___flmul+1
  7396  0018B2  C029  F016         	movff	___flmul@prod+2,?___flmul+2
  7397  0018B6  C02A  F017         	movff	___flmul@prod+3,?___flmul+3
  7398  0018BA  0012               	return		;funcret
  7399  0018BC                     __end_of___flmul:
  7400                           	opt callstack 0
  7401                           
  7402 ;; *************** function ___flge *****************
  7403 ;; Defined at:
  7404 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\flge.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;  ff1             4    5[COMRAM] unsigned char 
  7407 ;;  ff2             4    9[COMRAM] unsigned char 
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;		None               void
  7412 ;; Registers used:
  7413 ;;		wreg, status,2, status,0
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7419 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;Total ram usage:       12 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    2
  7426 ;; This function calls:
  7427 ;;		Nothing
  7428 ;; This function is called by:
  7429 ;;		_set_pwm_duty_cycle
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           	psect	text27
  7434  003220                     __ptext27:
  7435                           	opt callstack 0
  7436  003220                     ___flge:
  7437                           	opt callstack 24
  7438                           
  7439                           ;incstack = 0
  7440  003220  0E00               	movlw	0
  7441  003222  1406               	andwf	___flge@ff1,w,c
  7442  003224  6E0E               	movwf	??___flge& (0+255),c
  7443  003226  0E00               	movlw	0
  7444  003228  1407               	andwf	___flge@ff1+1,w,c
  7445  00322A  6E0F               	movwf	(??___flge+1)& (0+255),c
  7446  00322C  0E80               	movlw	128
  7447  00322E  1408               	andwf	___flge@ff1+2,w,c
  7448  003230  6E10               	movwf	(??___flge+2)& (0+255),c
  7449  003232  0E7F               	movlw	127
  7450  003234  1409               	andwf	___flge@ff1+3,w,c
  7451  003236  6E11               	movwf	(??___flge+3)& (0+255),c
  7452  003238  500E               	movf	??___flge,w,c
  7453  00323A  100F               	iorwf	??___flge+1,w,c
  7454  00323C  1010               	iorwf	??___flge+2,w,c
  7455  00323E  1011               	iorwf	??___flge+3,w,c
  7456  003240  A4D8               	btfss	status,2,c
  7457  003242  D008               	goto	l7792
  7458  003244  0E00               	movlw	0
  7459  003246  6E06               	movwf	___flge@ff1,c
  7460  003248  0E00               	movlw	0
  7461  00324A  6E07               	movwf	___flge@ff1+1,c
  7462  00324C  0E00               	movlw	0
  7463  00324E  6E08               	movwf	___flge@ff1+2,c
  7464  003250  0E00               	movlw	0
  7465  003252  6E09               	movwf	___flge@ff1+3,c
  7466  003254                     l7792:
  7467  003254  0E00               	movlw	0
  7468  003256  140A               	andwf	___flge@ff2,w,c
  7469  003258  6E0E               	movwf	??___flge& (0+255),c
  7470  00325A  0E00               	movlw	0
  7471  00325C  140B               	andwf	___flge@ff2+1,w,c
  7472  00325E  6E0F               	movwf	(??___flge+1)& (0+255),c
  7473  003260  0E80               	movlw	128
  7474  003262  140C               	andwf	___flge@ff2+2,w,c
  7475  003264  6E10               	movwf	(??___flge+2)& (0+255),c
  7476  003266  0E7F               	movlw	127
  7477  003268  140D               	andwf	___flge@ff2+3,w,c
  7478  00326A  6E11               	movwf	(??___flge+3)& (0+255),c
  7479  00326C  500E               	movf	??___flge,w,c
  7480  00326E  100F               	iorwf	??___flge+1,w,c
  7481  003270  1010               	iorwf	??___flge+2,w,c
  7482  003272  1011               	iorwf	??___flge+3,w,c
  7483  003274  A4D8               	btfss	status,2,c
  7484  003276  D008               	goto	l7796
  7485  003278  0E00               	movlw	0
  7486  00327A  6E0A               	movwf	___flge@ff2,c
  7487  00327C  0E00               	movlw	0
  7488  00327E  6E0B               	movwf	___flge@ff2+1,c
  7489  003280  0E00               	movlw	0
  7490  003282  6E0C               	movwf	___flge@ff2+2,c
  7491  003284  0E00               	movlw	0
  7492  003286  6E0D               	movwf	___flge@ff2+3,c
  7493  003288                     l7796:
  7494  003288  AE09               	btfss	___flge@ff1+3,7,c
  7495  00328A  D009               	goto	l7800
  7496  00328C  6C06               	negf	___flge@ff1,c
  7497  00328E  1E07               	comf	___flge@ff1+1,f,c
  7498  003290  B0D8               	btfsc	status,0,c
  7499  003292  2A07               	incf	___flge@ff1+1,f,c
  7500  003294  1E08               	comf	___flge@ff1+2,f,c
  7501  003296  B0D8               	btfsc	status,0,c
  7502  003298  2A08               	incf	___flge@ff1+2,f,c
  7503  00329A  0E80               	movlw	128
  7504  00329C  5609               	subfwb	___flge@ff1+3,f,c
  7505  00329E                     l7800:
  7506  00329E  AE0D               	btfss	___flge@ff2+3,7,c
  7507  0032A0  D009               	goto	l993
  7508  0032A2  6C0A               	negf	___flge@ff2,c
  7509  0032A4  1E0B               	comf	___flge@ff2+1,f,c
  7510  0032A6  B0D8               	btfsc	status,0,c
  7511  0032A8  2A0B               	incf	___flge@ff2+1,f,c
  7512  0032AA  1E0C               	comf	___flge@ff2+2,f,c
  7513  0032AC  B0D8               	btfsc	status,0,c
  7514  0032AE  2A0C               	incf	___flge@ff2+2,f,c
  7515  0032B0  0E80               	movlw	128
  7516  0032B2  560D               	subfwb	___flge@ff2+3,f,c
  7517  0032B4                     l993:
  7518  0032B4  0E00               	movlw	0
  7519  0032B6  1A06               	xorwf	___flge@ff1,f,c
  7520  0032B8  0E00               	movlw	0
  7521  0032BA  1A07               	xorwf	___flge@ff1+1,f,c
  7522  0032BC  0E00               	movlw	0
  7523  0032BE  1A08               	xorwf	___flge@ff1+2,f,c
  7524  0032C0  0E80               	movlw	128
  7525  0032C2  1A09               	xorwf	___flge@ff1+3,f,c
  7526  0032C4  0E00               	movlw	0
  7527  0032C6  1A0A               	xorwf	___flge@ff2,f,c
  7528  0032C8  0E00               	movlw	0
  7529  0032CA  1A0B               	xorwf	___flge@ff2+1,f,c
  7530  0032CC  0E00               	movlw	0
  7531  0032CE  1A0C               	xorwf	___flge@ff2+2,f,c
  7532  0032D0  0E80               	movlw	128
  7533  0032D2  1A0D               	xorwf	___flge@ff2+3,f,c
  7534  0032D4  500A               	movf	___flge@ff2,w,c
  7535  0032D6  5C06               	subwf	___flge@ff1,w,c
  7536  0032D8  500B               	movf	___flge@ff2+1,w,c
  7537  0032DA  5807               	subwfb	___flge@ff1+1,w,c
  7538  0032DC  500C               	movf	___flge@ff2+2,w,c
  7539  0032DE  5808               	subwfb	___flge@ff1+2,w,c
  7540  0032E0  500D               	movf	___flge@ff2+3,w,c
  7541  0032E2  5809               	subwfb	___flge@ff1+3,w,c
  7542  0032E4  B0D8               	btfsc	status,0,c
  7543  0032E6  D002               	goto	l7806
  7544  0032E8  90D8               	bcf	status,0,c
  7545  0032EA  0012               	return	
  7546  0032EC                     l7806:
  7547  0032EC  80D8               	bsf	status,0,c
  7548  0032EE  0012               	return		;funcret
  7549  0032F0                     __end_of___flge:
  7550                           	opt callstack 0
  7551                           
  7552 ;; *************** function ___fldiv *****************
  7553 ;; Defined at:
  7554 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcdiv.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  b               4   44[COMRAM] unsigned char 
  7557 ;;  a               4   48[COMRAM] unsigned char 
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;  grs             4   63[COMRAM] unsigned long 
  7560 ;;  rem             4   56[COMRAM] unsigned long 
  7561 ;;  new_exp         2   61[COMRAM] short 
  7562 ;;  aexp            1   68[COMRAM] unsigned char 
  7563 ;;  bexp            1   67[COMRAM] unsigned char 
  7564 ;;  sign            1   60[COMRAM] unsigned char 
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  4   44[COMRAM] unsigned char 
  7567 ;; Registers used:
  7568 ;;		wreg, status,2, status,0
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7574 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;Total ram usage:       25 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    2
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_set_pwm_duty_cycle
  7585 ;;		_errorCorrectedMove
  7586 ;;		_PIDCorrectedMove
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text28
  7591  001ED6                     __ptext28:
  7592                           	opt callstack 0
  7593  001ED6                     ___fldiv:
  7594                           	opt callstack 24
  7595                           
  7596                           ;incstack = 0
  7597  001ED6  5030               	movf	___fldiv@b+3,w,c
  7598  001ED8  0B80               	andlw	128
  7599  001EDA  6E3D               	movwf	___fldiv@sign,c
  7600  001EDC  5030               	movf	___fldiv@b+3,w,c
  7601  001EDE  2430               	addwf	___fldiv@b+3,w,c
  7602  001EE0  6E44               	movwf	___fldiv@bexp,c
  7603  001EE2  BE2F               	btfsc	___fldiv@b+2,7,c
  7604  001EE4  8044               	bsf	___fldiv@bexp,0,c
  7605  001EE6  5044               	movf	___fldiv@bexp,w,c
  7606  001EE8  B4D8               	btfsc	status,2,c
  7607  001EEA  D00D               	goto	l7536
  7608  001EEC  2844               	incf	___fldiv@bexp,w,c
  7609  001EEE  A4D8               	btfss	status,2,c
  7610  001EF0  D008               	goto	l7532
  7611  001EF2  0E00               	movlw	0
  7612  001EF4  6E2D               	movwf	___fldiv@b,c
  7613  001EF6  0E00               	movlw	0
  7614  001EF8  6E2E               	movwf	___fldiv@b+1,c
  7615  001EFA  0E00               	movlw	0
  7616  001EFC  6E2F               	movwf	___fldiv@b+2,c
  7617  001EFE  0E00               	movlw	0
  7618  001F00  6E30               	movwf	___fldiv@b+3,c
  7619  001F02                     l7532:
  7620  001F02  8E2F               	bsf	___fldiv@b+2,7,c
  7621  001F04  D006               	goto	L11
  7622  001F06                     l7536:
  7623  001F06  0E00               	movlw	0
  7624  001F08  6E2D               	movwf	___fldiv@b,c
  7625  001F0A  0E00               	movlw	0
  7626  001F0C  6E2E               	movwf	___fldiv@b+1,c
  7627  001F0E  0E00               	movlw	0
  7628  001F10  6E2F               	movwf	___fldiv@b+2,c
  7629  001F12                     L11:
  7630  001F12  0E00               	movlw	0
  7631  001F14  6E30               	movwf	___fldiv@b+3,c
  7632  001F16  5034               	movf	___fldiv@a+3,w,c
  7633  001F18  0B80               	andlw	128
  7634  001F1A  1A3D               	xorwf	___fldiv@sign,f,c
  7635  001F1C  5034               	movf	___fldiv@a+3,w,c
  7636  001F1E  2434               	addwf	___fldiv@a+3,w,c
  7637  001F20  6E45               	movwf	___fldiv@aexp,c
  7638  001F22  BE33               	btfsc	___fldiv@a+2,7,c
  7639  001F24  8045               	bsf	___fldiv@aexp,0,c
  7640  001F26  5045               	movf	___fldiv@aexp,w,c
  7641  001F28  B4D8               	btfsc	status,2,c
  7642  001F2A  D00D               	goto	l7556
  7643  001F2C  2845               	incf	___fldiv@aexp,w,c
  7644  001F2E  A4D8               	btfss	status,2,c
  7645  001F30  D008               	goto	l7552
  7646  001F32  0E00               	movlw	0
  7647  001F34  6E31               	movwf	___fldiv@a,c
  7648  001F36  0E00               	movlw	0
  7649  001F38  6E32               	movwf	___fldiv@a+1,c
  7650  001F3A  0E00               	movlw	0
  7651  001F3C  6E33               	movwf	___fldiv@a+2,c
  7652  001F3E  0E00               	movlw	0
  7653  001F40  6E34               	movwf	___fldiv@a+3,c
  7654  001F42                     l7552:
  7655  001F42  8E33               	bsf	___fldiv@a+2,7,c
  7656  001F44  D006               	goto	L12
  7657  001F46                     l7556:
  7658  001F46  0E00               	movlw	0
  7659  001F48  6E31               	movwf	___fldiv@a,c
  7660  001F4A  0E00               	movlw	0
  7661  001F4C  6E32               	movwf	___fldiv@a+1,c
  7662  001F4E  0E00               	movlw	0
  7663  001F50  6E33               	movwf	___fldiv@a+2,c
  7664  001F52                     L12:
  7665  001F52  0E00               	movlw	0
  7666  001F54  6E34               	movwf	___fldiv@a+3,c
  7667  001F56  5031               	movf	___fldiv@a,w,c
  7668  001F58  1032               	iorwf	___fldiv@a+1,w,c
  7669  001F5A  1033               	iorwf	___fldiv@a+2,w,c
  7670  001F5C  1034               	iorwf	___fldiv@a+3,w,c
  7671  001F5E  A4D8               	btfss	status,2,c
  7672  001F60  D017               	goto	l7570
  7673  001F62  0E00               	movlw	0
  7674  001F64  6E2D               	movwf	___fldiv@b,c
  7675  001F66  0E00               	movlw	0
  7676  001F68  6E2E               	movwf	___fldiv@b+1,c
  7677  001F6A  0E00               	movlw	0
  7678  001F6C  6E2F               	movwf	___fldiv@b+2,c
  7679  001F6E  0E00               	movlw	0
  7680  001F70  6E30               	movwf	___fldiv@b+3,c
  7681  001F72  0E80               	movlw	128
  7682  001F74  122F               	iorwf	___fldiv@b+2,f,c
  7683  001F76  0E7F               	movlw	127
  7684  001F78  1230               	iorwf	___fldiv@b+3,f,c
  7685  001F7A                     l7564:
  7686  001F7A  503D               	movf	___fldiv@sign,w,c
  7687  001F7C  1230               	iorwf	___fldiv@b+3,f,c
  7688  001F7E  C02D  F02D         	movff	___fldiv@b,?___fldiv
  7689  001F82  C02E  F02E         	movff	___fldiv@b+1,?___fldiv+1
  7690  001F86  C02F  F02F         	movff	___fldiv@b+2,?___fldiv+2
  7691  001F8A  C030  F030         	movff	___fldiv@b+3,?___fldiv+3
  7692  001F8E  0012               	return	
  7693  001F90                     l7570:
  7694  001F90  5044               	movf	___fldiv@bexp,w,c
  7695  001F92  A4D8               	btfss	status,2,c
  7696  001F94  D009               	goto	l7578
  7697  001F96  0E00               	movlw	0
  7698  001F98  6E2D               	movwf	?___fldiv,c
  7699  001F9A  0E00               	movlw	0
  7700  001F9C  6E2E               	movwf	?___fldiv+1,c
  7701  001F9E  0E00               	movlw	0
  7702  001FA0  6E2F               	movwf	?___fldiv+2,c
  7703  001FA2  0E00               	movlw	0
  7704  001FA4  6E30               	movwf	?___fldiv+3,c
  7705  001FA6  0012               	return	
  7706  001FA8                     l7578:
  7707  001FA8  5045               	movf	___fldiv@aexp,w,c
  7708  001FAA  C044  F035         	movff	___fldiv@bexp,??___fldiv
  7709  001FAE  6A36               	clrf	(??___fldiv+1)& (0+255),c
  7710  001FB0  5E35               	subwf	??___fldiv,f,c
  7711  001FB2  0E00               	movlw	0
  7712  001FB4  5A36               	subwfb	??___fldiv+1,f,c
  7713  001FB6  0E7F               	movlw	127
  7714  001FB8  2435               	addwf	??___fldiv,w,c
  7715  001FBA  6E3E               	movwf	___fldiv@new_exp,c
  7716  001FBC  0E00               	movlw	0
  7717  001FBE  2036               	addwfc	??___fldiv+1,w,c
  7718  001FC0  6E3F               	movwf	___fldiv@new_exp+1,c
  7719  001FC2  C02D  F039         	movff	___fldiv@b,___fldiv@rem
  7720  001FC6  C02E  F03A         	movff	___fldiv@b+1,___fldiv@rem+1
  7721  001FCA  C02F  F03B         	movff	___fldiv@b+2,___fldiv@rem+2
  7722  001FCE  C030  F03C         	movff	___fldiv@b+3,___fldiv@rem+3
  7723  001FD2  0E00               	movlw	0
  7724  001FD4  6E2D               	movwf	___fldiv@b,c
  7725  001FD6  0E00               	movlw	0
  7726  001FD8  6E2E               	movwf	___fldiv@b+1,c
  7727  001FDA  0E00               	movlw	0
  7728  001FDC  6E2F               	movwf	___fldiv@b+2,c
  7729  001FDE  0E00               	movlw	0
  7730  001FE0  6E30               	movwf	___fldiv@b+3,c
  7731  001FE2  0E00               	movlw	0
  7732  001FE4  6E40               	movwf	___fldiv@grs,c
  7733  001FE6  0E00               	movlw	0
  7734  001FE8  6E41               	movwf	___fldiv@grs+1,c
  7735  001FEA  0E00               	movlw	0
  7736  001FEC  6E42               	movwf	___fldiv@grs+2,c
  7737  001FEE  0E00               	movlw	0
  7738  001FF0  6E43               	movwf	___fldiv@grs+3,c
  7739  001FF2  0E00               	movlw	0
  7740  001FF4  6E45               	movwf	___fldiv@aexp,c
  7741  001FF6  D028               	goto	l1312
  7742  001FF8                     l7588:
  7743  001FF8  5045               	movf	___fldiv@aexp,w,c
  7744  001FFA  B4D8               	btfsc	status,2,c
  7745  001FFC  D011               	goto	l7596
  7746  001FFE  90D8               	bcf	status,0,c
  7747  002000  3639               	rlcf	___fldiv@rem,f,c
  7748  002002  363A               	rlcf	___fldiv@rem+1,f,c
  7749  002004  363B               	rlcf	___fldiv@rem+2,f,c
  7750  002006  363C               	rlcf	___fldiv@rem+3,f,c
  7751  002008  90D8               	bcf	status,0,c
  7752  00200A  362D               	rlcf	___fldiv@b,f,c
  7753  00200C  362E               	rlcf	___fldiv@b+1,f,c
  7754  00200E  362F               	rlcf	___fldiv@b+2,f,c
  7755  002010  3630               	rlcf	___fldiv@b+3,f,c
  7756  002012  BE43               	btfsc	___fldiv@grs+3,7,c
  7757  002014  802D               	bsf	___fldiv@b,0,c
  7758  002016  90D8               	bcf	status,0,c
  7759  002018  3640               	rlcf	___fldiv@grs,f,c
  7760  00201A  3641               	rlcf	___fldiv@grs+1,f,c
  7761  00201C  3642               	rlcf	___fldiv@grs+2,f,c
  7762  00201E  3643               	rlcf	___fldiv@grs+3,f,c
  7763  002020                     l7596:
  7764  002020  5031               	movf	___fldiv@a,w,c
  7765  002022  5C39               	subwf	___fldiv@rem,w,c
  7766  002024  5032               	movf	___fldiv@a+1,w,c
  7767  002026  583A               	subwfb	___fldiv@rem+1,w,c
  7768  002028  5033               	movf	___fldiv@a+2,w,c
  7769  00202A  583B               	subwfb	___fldiv@rem+2,w,c
  7770  00202C  5034               	movf	___fldiv@a+3,w,c
  7771  00202E  583C               	subwfb	___fldiv@rem+3,w,c
  7772  002030  A0D8               	btfss	status,0,c
  7773  002032  D009               	goto	l7602
  7774  002034  8C43               	bsf	___fldiv@grs+3,6,c
  7775  002036  5031               	movf	___fldiv@a,w,c
  7776  002038  5E39               	subwf	___fldiv@rem,f,c
  7777  00203A  5032               	movf	___fldiv@a+1,w,c
  7778  00203C  5A3A               	subwfb	___fldiv@rem+1,f,c
  7779  00203E  5033               	movf	___fldiv@a+2,w,c
  7780  002040  5A3B               	subwfb	___fldiv@rem+2,f,c
  7781  002042  5034               	movf	___fldiv@a+3,w,c
  7782  002044  5A3C               	subwfb	___fldiv@rem+3,f,c
  7783  002046                     l7602:
  7784  002046  2A45               	incf	___fldiv@aexp,f,c
  7785  002048                     l1312:
  7786  002048  0E19               	movlw	25
  7787  00204A  6445               	cpfsgt	___fldiv@aexp,c
  7788  00204C  D7D5               	goto	l7588
  7789  00204E  5039               	movf	___fldiv@rem,w,c
  7790  002050  103A               	iorwf	___fldiv@rem+1,w,c
  7791  002052  103B               	iorwf	___fldiv@rem+2,w,c
  7792  002054  103C               	iorwf	___fldiv@rem+3,w,c
  7793  002056  B4D8               	btfsc	status,2,c
  7794  002058  D011               	goto	l7614
  7795  00205A  8040               	bsf	___fldiv@grs,0,c
  7796  00205C  D00F               	goto	l7614
  7797  00205E                     l7608:
  7798  00205E  90D8               	bcf	status,0,c
  7799  002060  362D               	rlcf	___fldiv@b,f,c
  7800  002062  362E               	rlcf	___fldiv@b+1,f,c
  7801  002064  362F               	rlcf	___fldiv@b+2,f,c
  7802  002066  3630               	rlcf	___fldiv@b+3,f,c
  7803  002068  BE43               	btfsc	___fldiv@grs+3,7,c
  7804  00206A  802D               	bsf	___fldiv@b,0,c
  7805  00206C  90D8               	bcf	status,0,c
  7806  00206E  3640               	rlcf	___fldiv@grs,f,c
  7807  002070  3641               	rlcf	___fldiv@grs+1,f,c
  7808  002072  3642               	rlcf	___fldiv@grs+2,f,c
  7809  002074  3643               	rlcf	___fldiv@grs+3,f,c
  7810  002076  063E               	decf	___fldiv@new_exp,f,c
  7811  002078  A0D8               	btfss	status,0,c
  7812  00207A  063F               	decf	___fldiv@new_exp+1,f,c
  7813  00207C                     l7614:
  7814  00207C  AE2F               	btfss	___fldiv@b+2,7,c
  7815  00207E  D7EF               	goto	l7608
  7816  002080  0E00               	movlw	0
  7817  002082  6E45               	movwf	___fldiv@aexp,c
  7818  002084  AE43               	btfss	___fldiv@grs+3,7,c
  7819  002086  D017               	goto	l1323
  7820  002088  0EFF               	movlw	255
  7821  00208A  1440               	andwf	___fldiv@grs,w,c
  7822  00208C  6E35               	movwf	??___fldiv& (0+255),c
  7823  00208E  0EFF               	movlw	255
  7824  002090  1441               	andwf	___fldiv@grs+1,w,c
  7825  002092  6E36               	movwf	(??___fldiv+1)& (0+255),c
  7826  002094  0EFF               	movlw	255
  7827  002096  1442               	andwf	___fldiv@grs+2,w,c
  7828  002098  6E37               	movwf	(??___fldiv+2)& (0+255),c
  7829  00209A  0E7F               	movlw	127
  7830  00209C  1443               	andwf	___fldiv@grs+3,w,c
  7831  00209E  6E38               	movwf	(??___fldiv+3)& (0+255),c
  7832  0020A0  5035               	movf	??___fldiv,w,c
  7833  0020A2  1036               	iorwf	??___fldiv+1,w,c
  7834  0020A4  1037               	iorwf	??___fldiv+2,w,c
  7835  0020A6  1038               	iorwf	??___fldiv+3,w,c
  7836  0020A8  B4D8               	btfsc	status,2,c
  7837  0020AA  D003               	goto	l1324
  7838  0020AC                     u8720:
  7839  0020AC  0E01               	movlw	1
  7840  0020AE  6E45               	movwf	___fldiv@aexp,c
  7841  0020B0  D002               	goto	l1323
  7842  0020B2                     l1324:
  7843  0020B2  B02D               	btfsc	___fldiv@b,0,c
  7844  0020B4  D7FB               	goto	u8720
  7845  0020B6                     l1323:
  7846  0020B6  5045               	movf	___fldiv@aexp,w,c
  7847  0020B8  B4D8               	btfsc	status,2,c
  7848  0020BA  D01F               	goto	l7634
  7849  0020BC  0E01               	movlw	1
  7850  0020BE  262D               	addwf	___fldiv@b,f,c
  7851  0020C0  0E00               	movlw	0
  7852  0020C2  222E               	addwfc	___fldiv@b+1,f,c
  7853  0020C4  222F               	addwfc	___fldiv@b+2,f,c
  7854  0020C6  2230               	addwfc	___fldiv@b+3,f,c
  7855  0020C8  A030               	btfss	___fldiv@b+3,0,c
  7856  0020CA  D017               	goto	l7634
  7857  0020CC  C02D  F035         	movff	___fldiv@b,??___fldiv
  7858  0020D0  C02E  F036         	movff	___fldiv@b+1,??___fldiv+1
  7859  0020D4  C02F  F037         	movff	___fldiv@b+2,??___fldiv+2
  7860  0020D8  C030  F038         	movff	___fldiv@b+3,??___fldiv+3
  7861  0020DC  3438               	rlcf	??___fldiv+3,w,c
  7862  0020DE  3238               	rrcf	??___fldiv+3,f,c
  7863  0020E0  3237               	rrcf	??___fldiv+2,f,c
  7864  0020E2  3236               	rrcf	??___fldiv+1,f,c
  7865  0020E4  3235               	rrcf	??___fldiv,f,c
  7866  0020E6  C035  F02D         	movff	??___fldiv,___fldiv@b
  7867  0020EA  C036  F02E         	movff	??___fldiv+1,___fldiv@b+1
  7868  0020EE  C037  F02F         	movff	??___fldiv+2,___fldiv@b+2
  7869  0020F2  C038  F030         	movff	??___fldiv+3,___fldiv@b+3
  7870  0020F6  4A3E               	infsnz	___fldiv@new_exp,f,c
  7871  0020F8  2A3F               	incf	___fldiv@new_exp+1,f,c
  7872  0020FA                     l7634:
  7873  0020FA  BE3F               	btfsc	___fldiv@new_exp+1,7,c
  7874  0020FC  D010               	goto	l7638
  7875  0020FE  503F               	movf	___fldiv@new_exp+1,w,c
  7876  002100  E103               	bnz	u8760
  7877  002102  283E               	incf	___fldiv@new_exp,w,c
  7878  002104  A0D8               	btfss	status,0,c
  7879  002106  D00B               	goto	l7638
  7880  002108                     u8760:
  7881  002108  0E00               	movlw	0
  7882  00210A  6E3F               	movwf	___fldiv@new_exp+1,c
  7883  00210C  683E               	setf	___fldiv@new_exp,c
  7884  00210E  0E00               	movlw	0
  7885  002110  6E2D               	movwf	___fldiv@b,c
  7886  002112  0E00               	movlw	0
  7887  002114  6E2E               	movwf	___fldiv@b+1,c
  7888  002116  0E00               	movlw	0
  7889  002118  6E2F               	movwf	___fldiv@b+2,c
  7890  00211A  0E00               	movlw	0
  7891  00211C  6E30               	movwf	___fldiv@b+3,c
  7892  00211E                     l7638:
  7893  00211E  BE3F               	btfsc	___fldiv@new_exp+1,7,c
  7894  002120  D005               	goto	u8770
  7895  002122  503F               	movf	___fldiv@new_exp+1,w,c
  7896  002124  E111               	bnz	l7642
  7897  002126  043E               	decf	___fldiv@new_exp,w,c
  7898  002128  B0D8               	btfsc	status,0,c
  7899  00212A  D00E               	goto	l7642
  7900  00212C                     u8770:
  7901  00212C  0E00               	movlw	0
  7902  00212E  6E3F               	movwf	___fldiv@new_exp+1,c
  7903  002130  0E00               	movlw	0
  7904  002132  6E3E               	movwf	___fldiv@new_exp,c
  7905  002134  0E00               	movlw	0
  7906  002136  6E2D               	movwf	___fldiv@b,c
  7907  002138  0E00               	movlw	0
  7908  00213A  6E2E               	movwf	___fldiv@b+1,c
  7909  00213C  0E00               	movlw	0
  7910  00213E  6E2F               	movwf	___fldiv@b+2,c
  7911  002140  0E00               	movlw	0
  7912  002142  6E30               	movwf	___fldiv@b+3,c
  7913  002144  0E00               	movlw	0
  7914  002146  6E3D               	movwf	___fldiv@sign,c
  7915  002148                     l7642:
  7916  002148  C03E  F044         	movff	___fldiv@new_exp,___fldiv@bexp
  7917  00214C  A044               	btfss	___fldiv@bexp,0,c
  7918  00214E  D002               	goto	l7648
  7919  002150  8E2F               	bsf	___fldiv@b+2,7,c
  7920  002152  D001               	goto	l7650
  7921  002154                     l7648:
  7922  002154  9E2F               	bcf	___fldiv@b+2,7,c
  7923  002156                     l7650:
  7924  002156  90D8               	bcf	status,0,c
  7925  002158  3044               	rrcf	___fldiv@bexp,w,c
  7926  00215A  6E30               	movwf	___fldiv@b+3,c
  7927  00215C  D70E               	goto	l7564
  7928  00215E                     __end_of___fldiv:
  7929                           	opt callstack 0
  7930                           
  7931 ;; *************** function ___flsub *****************
  7932 ;; Defined at:
  7933 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcadd.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;  b               4   69[COMRAM] unsigned char 
  7936 ;;  a               4   73[COMRAM] unsigned char 
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;		None
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  4   69[COMRAM] unsigned char 
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7948 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;Total ram usage:        8 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:    3
  7955 ;; This function calls:
  7956 ;;		___fladd
  7957 ;; This function is called by:
  7958 ;;		_errorCorrectedMove
  7959 ;;		_PIDCorrectedMove
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text29
  7964  003CD4                     __ptext29:
  7965                           	opt callstack 0
  7966  003CD4                     ___flsub:
  7967                           	opt callstack 24
  7968                           
  7969                           ;incstack = 0
  7970  003CD4  0E00               	movlw	0
  7971  003CD6  1A4A               	xorwf	___flsub@a,f,c
  7972  003CD8  0E00               	movlw	0
  7973  003CDA  1A4B               	xorwf	___flsub@a+1,f,c
  7974  003CDC  0E00               	movlw	0
  7975  003CDE  1A4C               	xorwf	___flsub@a+2,f,c
  7976  003CE0  0E80               	movlw	128
  7977  003CE2  1A4D               	xorwf	___flsub@a+3,f,c
  7978  003CE4  C046  F02D         	movff	___flsub@b,___fladd@b
  7979  003CE8  C047  F02E         	movff	___flsub@b+1,___fladd@b+1
  7980  003CEC  C048  F02F         	movff	___flsub@b+2,___fladd@b+2
  7981  003CF0  C049  F030         	movff	___flsub@b+3,___fladd@b+3
  7982  003CF4  C04A  F031         	movff	___flsub@a,___fladd@a
  7983  003CF8  C04B  F032         	movff	___flsub@a+1,___fladd@a+1
  7984  003CFC  C04C  F033         	movff	___flsub@a+2,___fladd@a+2
  7985  003D00  C04D  F034         	movff	___flsub@a+3,___fladd@a+3
  7986  003D04  ECE5  F00D         	call	___fladd	;wreg free
  7987  003D08  C02D  F046         	movff	?___fladd,?___flsub
  7988  003D0C  C02E  F047         	movff	?___fladd+1,?___flsub+1
  7989  003D10  C02F  F048         	movff	?___fladd+2,?___flsub+2
  7990  003D14  C030  F049         	movff	?___fladd+3,?___flsub+3
  7991  003D18  0012               	return		;funcret
  7992  003D1A                     __end_of___flsub:
  7993                           	opt callstack 0
  7994                           
  7995 ;; *************** function ___fladd *****************
  7996 ;; Defined at:
  7997 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcadd.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;  b               4   44[COMRAM] unsigned char 
  8000 ;;  a               4   48[COMRAM] unsigned char 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  grs             1   59[COMRAM] unsigned char 
  8003 ;;  bexp            1   58[COMRAM] unsigned char 
  8004 ;;  aexp            1   57[COMRAM] unsigned char 
  8005 ;;  signs           1   56[COMRAM] unsigned char 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  4   44[COMRAM] unsigned char 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8015 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;Total ram usage:       16 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    2
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_errorCorrectedMove
  8026 ;;		___flsub
  8027 ;;		_PIDCorrectedMove
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           	psect	text30
  8032  001BCA                     __ptext30:
  8033                           	opt callstack 0
  8034  001BCA                     ___fladd:
  8035                           	opt callstack 24
  8036                           
  8037                           ;incstack = 0
  8038  001BCA  5030               	movf	___fladd@b+3,w,c
  8039  001BCC  0B80               	andlw	128
  8040  001BCE  6E39               	movwf	___fladd@signs,c
  8041  001BD0  5030               	movf	___fladd@b+3,w,c
  8042  001BD2  2430               	addwf	___fladd@b+3,w,c
  8043  001BD4  6E3B               	movwf	___fladd@bexp,c
  8044  001BD6  BE2F               	btfsc	___fladd@b+2,7,c
  8045  001BD8  803B               	bsf	___fladd@bexp,0,c
  8046  001BDA  503B               	movf	___fladd@bexp,w,c
  8047  001BDC  B4D8               	btfsc	status,2,c
  8048  001BDE  D00D               	goto	l8110
  8049  001BE0  283B               	incf	___fladd@bexp,w,c
  8050  001BE2  A4D8               	btfss	status,2,c
  8051  001BE4  D008               	goto	l8106
  8052  001BE6  0E00               	movlw	0
  8053  001BE8  6E2D               	movwf	___fladd@b,c
  8054  001BEA  0E00               	movlw	0
  8055  001BEC  6E2E               	movwf	___fladd@b+1,c
  8056  001BEE  0E00               	movlw	0
  8057  001BF0  6E2F               	movwf	___fladd@b+2,c
  8058  001BF2  0E00               	movlw	0
  8059  001BF4  6E30               	movwf	___fladd@b+3,c
  8060  001BF6                     l8106:
  8061  001BF6  8E2F               	bsf	___fladd@b+2,7,c
  8062  001BF8  D006               	goto	L13
  8063  001BFA                     l8110:
  8064  001BFA  0E00               	movlw	0
  8065  001BFC  6E2D               	movwf	___fladd@b,c
  8066  001BFE  0E00               	movlw	0
  8067  001C00  6E2E               	movwf	___fladd@b+1,c
  8068  001C02  0E00               	movlw	0
  8069  001C04  6E2F               	movwf	___fladd@b+2,c
  8070  001C06                     L13:
  8071  001C06  0E00               	movlw	0
  8072  001C08  6E30               	movwf	___fladd@b+3,c
  8073  001C0A  5034               	movf	___fladd@a+3,w,c
  8074  001C0C  0B80               	andlw	128
  8075  001C0E  6E3A               	movwf	___fladd@aexp,c
  8076  001C10  5039               	movf	___fladd@signs,w,c
  8077  001C12  183A               	xorwf	___fladd@aexp,w,c
  8078  001C14  A4D8               	btfss	status,2,c
  8079  001C16  8C39               	bsf	___fladd@signs,6,c
  8080  001C18  5034               	movf	___fladd@a+3,w,c
  8081  001C1A  2434               	addwf	___fladd@a+3,w,c
  8082  001C1C  6E3A               	movwf	___fladd@aexp,c
  8083  001C1E  BE33               	btfsc	___fladd@a+2,7,c
  8084  001C20  803A               	bsf	___fladd@aexp,0,c
  8085  001C22  503A               	movf	___fladd@aexp,w,c
  8086  001C24  B4D8               	btfsc	status,2,c
  8087  001C26  D00D               	goto	l8134
  8088  001C28  283A               	incf	___fladd@aexp,w,c
  8089  001C2A  A4D8               	btfss	status,2,c
  8090  001C2C  D008               	goto	l8130
  8091  001C2E  0E00               	movlw	0
  8092  001C30  6E31               	movwf	___fladd@a,c
  8093  001C32  0E00               	movlw	0
  8094  001C34  6E32               	movwf	___fladd@a+1,c
  8095  001C36  0E00               	movlw	0
  8096  001C38  6E33               	movwf	___fladd@a+2,c
  8097  001C3A  0E00               	movlw	0
  8098  001C3C  6E34               	movwf	___fladd@a+3,c
  8099  001C3E                     l8130:
  8100  001C3E  8E33               	bsf	___fladd@a+2,7,c
  8101  001C40  D006               	goto	L14
  8102  001C42                     l8134:
  8103  001C42  0E00               	movlw	0
  8104  001C44  6E31               	movwf	___fladd@a,c
  8105  001C46  0E00               	movlw	0
  8106  001C48  6E32               	movwf	___fladd@a+1,c
  8107  001C4A  0E00               	movlw	0
  8108  001C4C  6E33               	movwf	___fladd@a+2,c
  8109  001C4E                     L14:
  8110  001C4E  0E00               	movlw	0
  8111  001C50  6E34               	movwf	___fladd@a+3,c
  8112  001C52  503B               	movf	___fladd@bexp,w,c
  8113  001C54  5C3A               	subwf	___fladd@aexp,w,c
  8114  001C56  B0D8               	btfsc	status,0,c
  8115  001C58  D022               	goto	l8172
  8116  001C5A  AC39               	btfss	___fladd@signs,6,c
  8117  001C5C  D002               	goto	l8142
  8118  001C5E  0E80               	movlw	128
  8119  001C60  1A39               	xorwf	___fladd@signs,f,c
  8120  001C62                     l8142:
  8121  001C62  C03B  F03C         	movff	___fladd@bexp,___fladd@grs
  8122  001C66  C03A  F03B         	movff	___fladd@aexp,___fladd@bexp
  8123  001C6A  C03C  F03A         	movff	___fladd@grs,___fladd@aexp
  8124  001C6E  C02D  F03C         	movff	___fladd@b,___fladd@grs
  8125  001C72  C031  F02D         	movff	___fladd@a,___fladd@b
  8126  001C76  C03C  F031         	movff	___fladd@grs,___fladd@a
  8127  001C7A  C02E  F03C         	movff	___fladd@b+1,___fladd@grs
  8128  001C7E  C032  F02E         	movff	___fladd@a+1,___fladd@b+1
  8129  001C82  C03C  F032         	movff	___fladd@grs,___fladd@a+1
  8130  001C86  C02F  F03C         	movff	___fladd@b+2,___fladd@grs
  8131  001C8A  C033  F02F         	movff	___fladd@a+2,___fladd@b+2
  8132  001C8E  C03C  F033         	movff	___fladd@grs,___fladd@a+2
  8133  001C92  C030  F03C         	movff	___fladd@b+3,___fladd@grs
  8134  001C96  C034  F030         	movff	___fladd@a+3,___fladd@b+3
  8135  001C9A  C03C  F034         	movff	___fladd@grs,___fladd@a+3
  8136  001C9E                     l8172:
  8137  001C9E  0E00               	movlw	0
  8138  001CA0  6E3C               	movwf	___fladd@grs,c
  8139  001CA2  503B               	movf	___fladd@bexp,w,c
  8140  001CA4  C03A  F035         	movff	___fladd@aexp,??___fladd
  8141  001CA8  6A36               	clrf	(??___fladd+1)& (0+255),c
  8142  001CAA  5E35               	subwf	??___fladd,f,c
  8143  001CAC  0E00               	movlw	0
  8144  001CAE  5A36               	subwfb	??___fladd+1,f,c
  8145  001CB0  BE36               	btfsc	??___fladd+1,7,c
  8146  001CB2  D02C               	goto	l1257
  8147  001CB4  5036               	movf	??___fladd+1,w,c
  8148  001CB6  E104               	bnz	u9580
  8149  001CB8  0E1A               	movlw	26
  8150  001CBA  5C35               	subwf	??___fladd,w,c
  8151  001CBC  A0D8               	btfss	status,0,c
  8152  001CBE  D026               	goto	l1257
  8153  001CC0                     u9580:
  8154  001CC0  502D               	movf	___fladd@b,w,c
  8155  001CC2  102E               	iorwf	___fladd@b+1,w,c
  8156  001CC4  102F               	iorwf	___fladd@b+2,w,c
  8157  001CC6  1030               	iorwf	___fladd@b+3,w,c
  8158  001CC8  B4D8               	btfsc	status,2,c
  8159  001CCA  D002               	goto	u9590
  8160  001CCC  0E01               	movlw	1
  8161  001CCE  D001               	goto	u9600
  8162  001CD0                     u9590:
  8163  001CD0  0E00               	movlw	0
  8164  001CD2                     u9600:
  8165  001CD2  6E3C               	movwf	___fladd@grs,c
  8166  001CD4  0E00               	movlw	0
  8167  001CD6  6E2D               	movwf	___fladd@b,c
  8168  001CD8  0E00               	movlw	0
  8169  001CDA  6E2E               	movwf	___fladd@b+1,c
  8170  001CDC  0E00               	movlw	0
  8171  001CDE  6E2F               	movwf	___fladd@b+2,c
  8172  001CE0  0E00               	movlw	0
  8173  001CE2  6E30               	movwf	___fladd@b+3,c
  8174  001CE4  C03A  F03B         	movff	___fladd@aexp,___fladd@bexp
  8175  001CE8  D015               	goto	u9630
  8176  001CEA                     l1258:
  8177  001CEA  A03C               	btfss	___fladd@grs,0,c
  8178  001CEC  D005               	goto	l8184
  8179  001CEE  90D8               	bcf	status,0,c
  8180  001CF0  303C               	rrcf	___fladd@grs,w,c
  8181  001CF2  0901               	iorlw	1
  8182  001CF4  6E3C               	movwf	___fladd@grs,c
  8183  001CF6  D002               	goto	l8186
  8184  001CF8                     l8184:
  8185  001CF8  90D8               	bcf	status,0,c
  8186  001CFA  323C               	rrcf	___fladd@grs,f,c
  8187  001CFC                     l8186:
  8188  001CFC  B02D               	btfsc	___fladd@b,0,c
  8189  001CFE  8E3C               	bsf	___fladd@grs,7,c
  8190  001D00  3430               	rlcf	___fladd@b+3,w,c
  8191  001D02  3230               	rrcf	___fladd@b+3,f,c
  8192  001D04  322F               	rrcf	___fladd@b+2,f,c
  8193  001D06  322E               	rrcf	___fladd@b+1,f,c
  8194  001D08  322D               	rrcf	___fladd@b,f,c
  8195  001D0A  2A3B               	incf	___fladd@bexp,f,c
  8196  001D0C                     l1257:
  8197  001D0C  503A               	movf	___fladd@aexp,w,c
  8198  001D0E  5C3B               	subwf	___fladd@bexp,w,c
  8199  001D10  A0D8               	btfss	status,0,c
  8200  001D12  D7EB               	goto	l1258
  8201  001D14                     u9630:
  8202  001D14  BC39               	btfsc	___fladd@signs,6,c
  8203  001D16  D028               	goto	l8218
  8204  001D18  503B               	movf	___fladd@bexp,w,c
  8205  001D1A  A4D8               	btfss	status,2,c
  8206  001D1C  D009               	goto	l8200
  8207  001D1E  0E00               	movlw	0
  8208  001D20  6E2D               	movwf	?___fladd,c
  8209  001D22  0E00               	movlw	0
  8210  001D24  6E2E               	movwf	?___fladd+1,c
  8211  001D26  0E00               	movlw	0
  8212  001D28  6E2F               	movwf	?___fladd+2,c
  8213  001D2A  0E00               	movlw	0
  8214  001D2C  6E30               	movwf	?___fladd+3,c
  8215  001D2E  0012               	return	
  8216  001D30                     l8200:
  8217  001D30  5031               	movf	___fladd@a,w,c
  8218  001D32  262D               	addwf	___fladd@b,f,c
  8219  001D34  5032               	movf	___fladd@a+1,w,c
  8220  001D36  222E               	addwfc	___fladd@b+1,f,c
  8221  001D38  5033               	movf	___fladd@a+2,w,c
  8222  001D3A  222F               	addwfc	___fladd@b+2,f,c
  8223  001D3C  5034               	movf	___fladd@a+3,w,c
  8224  001D3E  2230               	addwfc	___fladd@b+3,f,c
  8225  001D40  A030               	btfss	___fladd@b+3,0,c
  8226  001D42  D071               	goto	u9760
  8227  001D44  A03C               	btfss	___fladd@grs,0,c
  8228  001D46  D005               	goto	l8208
  8229  001D48  90D8               	bcf	status,0,c
  8230  001D4A  303C               	rrcf	___fladd@grs,w,c
  8231  001D4C  0901               	iorlw	1
  8232  001D4E  6E3C               	movwf	___fladd@grs,c
  8233  001D50  D002               	goto	l8210
  8234  001D52                     l8208:
  8235  001D52  90D8               	bcf	status,0,c
  8236  001D54  323C               	rrcf	___fladd@grs,f,c
  8237  001D56                     l8210:
  8238  001D56  B02D               	btfsc	___fladd@b,0,c
  8239  001D58  8E3C               	bsf	___fladd@grs,7,c
  8240  001D5A  3430               	rlcf	___fladd@b+3,w,c
  8241  001D5C  3230               	rrcf	___fladd@b+3,f,c
  8242  001D5E  322F               	rrcf	___fladd@b+2,f,c
  8243  001D60  322E               	rrcf	___fladd@b+1,f,c
  8244  001D62  322D               	rrcf	___fladd@b,f,c
  8245  001D64  2A3B               	incf	___fladd@bexp,f,c
  8246  001D66  D05F               	goto	u9760
  8247  001D68                     l8218:
  8248  001D68  5031               	movf	___fladd@a,w,c
  8249  001D6A  5C2D               	subwf	___fladd@b,w,c
  8250  001D6C  5032               	movf	___fladd@a+1,w,c
  8251  001D6E  582E               	subwfb	___fladd@b+1,w,c
  8252  001D70  5033               	movf	___fladd@a+2,w,c
  8253  001D72  582F               	subwfb	___fladd@b+2,w,c
  8254  001D74  5030               	movf	___fladd@b+3,w,c
  8255  001D76  0A80               	xorlw	128
  8256  001D78  6E35               	movwf	??___fladd& (0+255),c
  8257  001D7A  5034               	movf	___fladd@a+3,w,c
  8258  001D7C  0A80               	xorlw	128
  8259  001D7E  5835               	subwfb	??___fladd& (0+255),w,c
  8260  001D80  B0D8               	btfsc	status,0,c
  8261  001D82  D025               	goto	l8228
  8262  001D84  502D               	movf	___fladd@b,w,c
  8263  001D86  5C31               	subwf	___fladd@a,w,c
  8264  001D88  6E35               	movwf	??___fladd& (0+255),c
  8265  001D8A  502E               	movf	___fladd@b+1,w,c
  8266  001D8C  5832               	subwfb	___fladd@a+1,w,c
  8267  001D8E  6E36               	movwf	(??___fladd+1)& (0+255),c
  8268  001D90  502F               	movf	___fladd@b+2,w,c
  8269  001D92  5833               	subwfb	___fladd@a+2,w,c
  8270  001D94  6E37               	movwf	(??___fladd+2)& (0+255),c
  8271  001D96  5030               	movf	___fladd@b+3,w,c
  8272  001D98  5834               	subwfb	___fladd@a+3,w,c
  8273  001D9A  6E38               	movwf	(??___fladd+3)& (0+255),c
  8274  001D9C  0EFF               	movlw	255
  8275  001D9E  2435               	addwf	??___fladd,w,c
  8276  001DA0  6E2D               	movwf	___fladd@b,c
  8277  001DA2  0EFF               	movlw	255
  8278  001DA4  2036               	addwfc	??___fladd+1,w,c
  8279  001DA6  6E2E               	movwf	___fladd@b+1,c
  8280  001DA8  0EFF               	movlw	255
  8281  001DAA  2037               	addwfc	??___fladd+2,w,c
  8282  001DAC  6E2F               	movwf	___fladd@b+2,c
  8283  001DAE  0EFF               	movlw	255
  8284  001DB0  2038               	addwfc	??___fladd+3,w,c
  8285  001DB2  6E30               	movwf	___fladd@b+3,c
  8286  001DB4  0E80               	movlw	128
  8287  001DB6  1A39               	xorwf	___fladd@signs,f,c
  8288  001DB8  6C3C               	negf	___fladd@grs,c
  8289  001DBA  503C               	movf	___fladd@grs,w,c
  8290  001DBC  A4D8               	btfss	status,2,c
  8291  001DBE  D00F               	goto	l1273
  8292  001DC0  0E01               	movlw	1
  8293  001DC2  262D               	addwf	___fladd@b,f,c
  8294  001DC4  0E00               	movlw	0
  8295  001DC6  222E               	addwfc	___fladd@b+1,f,c
  8296  001DC8  222F               	addwfc	___fladd@b+2,f,c
  8297  001DCA  2230               	addwfc	___fladd@b+3,f,c
  8298  001DCC  D008               	goto	l1273
  8299  001DCE                     l8228:
  8300  001DCE  5031               	movf	___fladd@a,w,c
  8301  001DD0  5E2D               	subwf	___fladd@b,f,c
  8302  001DD2  5032               	movf	___fladd@a+1,w,c
  8303  001DD4  5A2E               	subwfb	___fladd@b+1,f,c
  8304  001DD6  5033               	movf	___fladd@a+2,w,c
  8305  001DD8  5A2F               	subwfb	___fladd@b+2,f,c
  8306  001DDA  5034               	movf	___fladd@a+3,w,c
  8307  001DDC  5A30               	subwfb	___fladd@b+3,f,c
  8308  001DDE                     l1273:
  8309  001DDE  502D               	movf	___fladd@b,w,c
  8310  001DE0  102E               	iorwf	___fladd@b+1,w,c
  8311  001DE2  102F               	iorwf	___fladd@b+2,w,c
  8312  001DE4  1030               	iorwf	___fladd@b+3,w,c
  8313  001DE6  A4D8               	btfss	status,2,c
  8314  001DE8  D01C               	goto	l8252
  8315  001DEA  503C               	movf	___fladd@grs,w,c
  8316  001DEC  A4D8               	btfss	status,2,c
  8317  001DEE  D019               	goto	l8252
  8318  001DF0  0E00               	movlw	0
  8319  001DF2  6E2D               	movwf	?___fladd,c
  8320  001DF4  0E00               	movlw	0
  8321  001DF6  6E2E               	movwf	?___fladd+1,c
  8322  001DF8  0E00               	movlw	0
  8323  001DFA  6E2F               	movwf	?___fladd+2,c
  8324  001DFC  0E00               	movlw	0
  8325  001DFE  6E30               	movwf	?___fladd+3,c
  8326  001E00  0012               	return	
  8327  001E02                     l8236:
  8328  001E02  90D8               	bcf	status,0,c
  8329  001E04  362D               	rlcf	___fladd@b,f,c
  8330  001E06  362E               	rlcf	___fladd@b+1,f,c
  8331  001E08  362F               	rlcf	___fladd@b+2,f,c
  8332  001E0A  3630               	rlcf	___fladd@b+3,f,c
  8333  001E0C  BE3C               	btfsc	___fladd@grs,7,c
  8334  001E0E  802D               	bsf	___fladd@b,0,c
  8335  001E10  A03C               	btfss	___fladd@grs,0,c
  8336  001E12  D002               	goto	l8246
  8337  001E14  80D8               	bsf	status,0,c
  8338  001E16  D001               	goto	L15
  8339  001E18                     l8246:
  8340  001E18  90D8               	bcf	status,0,c
  8341  001E1A                     L15:
  8342  001E1A  363C               	rlcf	___fladd@grs,f,c
  8343  001E1C  503B               	movf	___fladd@bexp,w,c
  8344  001E1E  A4D8               	btfss	status,2,c
  8345  001E20  063B               	decf	___fladd@bexp,f,c
  8346  001E22                     l8252:
  8347  001E22  AE2F               	btfss	___fladd@b+2,7,c
  8348  001E24  D7EE               	goto	l8236
  8349  001E26                     u9760:
  8350  001E26  0E00               	movlw	0
  8351  001E28  6E3A               	movwf	___fladd@aexp,c
  8352  001E2A  AE3C               	btfss	___fladd@grs,7,c
  8353  001E2C  D00B               	goto	l1282
  8354  001E2E  C03C  F035         	movff	___fladd@grs,??___fladd
  8355  001E32  0E7F               	movlw	127
  8356  001E34  1635               	andwf	??___fladd,f,c
  8357  001E36  B4D8               	btfsc	status,2,c
  8358  001E38  D003               	goto	l1283
  8359  001E3A                     u9780:
  8360  001E3A  0E01               	movlw	1
  8361  001E3C  6E3A               	movwf	___fladd@aexp,c
  8362  001E3E  D002               	goto	l1282
  8363  001E40                     l1283:
  8364  001E40  B02D               	btfsc	___fladd@b,0,c
  8365  001E42  D7FB               	goto	u9780
  8366  001E44                     l1282:
  8367  001E44  503A               	movf	___fladd@aexp,w,c
  8368  001E46  B4D8               	btfsc	status,2,c
  8369  001E48  D020               	goto	l8272
  8370  001E4A  0E01               	movlw	1
  8371  001E4C  262D               	addwf	___fladd@b,f,c
  8372  001E4E  0E00               	movlw	0
  8373  001E50  222E               	addwfc	___fladd@b+1,f,c
  8374  001E52  222F               	addwfc	___fladd@b+2,f,c
  8375  001E54  2230               	addwfc	___fladd@b+3,f,c
  8376  001E56  A030               	btfss	___fladd@b+3,0,c
  8377  001E58  D018               	goto	l8272
  8378  001E5A  C02D  F035         	movff	___fladd@b,??___fladd
  8379  001E5E  C02E  F036         	movff	___fladd@b+1,??___fladd+1
  8380  001E62  C02F  F037         	movff	___fladd@b+2,??___fladd+2
  8381  001E66  C030  F038         	movff	___fladd@b+3,??___fladd+3
  8382  001E6A  3438               	rlcf	??___fladd+3,w,c
  8383  001E6C  3238               	rrcf	??___fladd+3,f,c
  8384  001E6E  3237               	rrcf	??___fladd+2,f,c
  8385  001E70  3236               	rrcf	??___fladd+1,f,c
  8386  001E72  3235               	rrcf	??___fladd,f,c
  8387  001E74  C035  F02D         	movff	??___fladd,___fladd@b
  8388  001E78  C036  F02E         	movff	??___fladd+1,___fladd@b+1
  8389  001E7C  C037  F02F         	movff	??___fladd+2,___fladd@b+2
  8390  001E80  C038  F030         	movff	??___fladd+3,___fladd@b+3
  8391  001E84  283B               	incf	___fladd@bexp,w,c
  8392  001E86  A4D8               	btfss	status,2,c
  8393  001E88  2A3B               	incf	___fladd@bexp,f,c
  8394  001E8A                     l8272:
  8395  001E8A  283B               	incf	___fladd@bexp,w,c
  8396  001E8C  B4D8               	btfsc	status,2,c
  8397  001E8E  D003               	goto	u9840
  8398  001E90  503B               	movf	___fladd@bexp,w,c
  8399  001E92  A4D8               	btfss	status,2,c
  8400  001E94  D00D               	goto	l8280
  8401  001E96                     u9840:
  8402  001E96  0E00               	movlw	0
  8403  001E98  6E2D               	movwf	___fladd@b,c
  8404  001E9A  0E00               	movlw	0
  8405  001E9C  6E2E               	movwf	___fladd@b+1,c
  8406  001E9E  0E00               	movlw	0
  8407  001EA0  6E2F               	movwf	___fladd@b+2,c
  8408  001EA2  0E00               	movlw	0
  8409  001EA4  6E30               	movwf	___fladd@b+3,c
  8410  001EA6  503B               	movf	___fladd@bexp,w,c
  8411  001EA8  A4D8               	btfss	status,2,c
  8412  001EAA  D002               	goto	l8280
  8413  001EAC  0E00               	movlw	0
  8414  001EAE  6E39               	movwf	___fladd@signs,c
  8415  001EB0                     l8280:
  8416  001EB0  A03B               	btfss	___fladd@bexp,0,c
  8417  001EB2  D002               	goto	l8284
  8418  001EB4  8E2F               	bsf	___fladd@b+2,7,c
  8419  001EB6  D001               	goto	l8286
  8420  001EB8                     l8284:
  8421  001EB8  9E2F               	bcf	___fladd@b+2,7,c
  8422  001EBA                     l8286:
  8423  001EBA  90D8               	bcf	status,0,c
  8424  001EBC  303B               	rrcf	___fladd@bexp,w,c
  8425  001EBE  6E30               	movwf	___fladd@b+3,c
  8426  001EC0  BE39               	btfsc	___fladd@signs,7,c
  8427  001EC2  8E30               	bsf	___fladd@b+3,7,c
  8428  001EC4  C02D  F02D         	movff	___fladd@b,?___fladd
  8429  001EC8  C02E  F02E         	movff	___fladd@b+1,?___fladd+1
  8430  001ECC  C02F  F02F         	movff	___fladd@b+2,?___fladd+2
  8431  001ED0  C030  F030         	movff	___fladd@b+3,?___fladd+3
  8432  001ED4  0012               	return		;funcret
  8433  001ED6                     __end_of___fladd:
  8434                           	opt callstack 0
  8435                           
  8436 ;; *************** function _init_motor_PWM *****************
  8437 ;; Defined at:
  8438 ;;		line 265 in file "main.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;		None
  8441 ;; Auto vars:     Size  Location     Type
  8442 ;;		None
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  1    wreg      void 
  8445 ;; Registers used:
  8446 ;;		wreg, status,2
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;Total ram usage:        0 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    2
  8459 ;; This function calls:
  8460 ;;		Nothing
  8461 ;; This function is called by:
  8462 ;;		_doOperation
  8463 ;; This function uses a non-reentrant model
  8464 ;;
  8465                           
  8466                           	psect	text31
  8467  00402E                     __ptext31:
  8468                           	opt callstack 0
  8469  00402E                     _init_motor_PWM:
  8470                           	opt callstack 27
  8471                           
  8472                           ;main.c: 273:     TRISCbits.TRISC2 = 1;
  8473                           
  8474                           ;incstack = 0
  8475  00402E  8494               	bsf	3988,2,c	;volatile
  8476                           
  8477                           ;main.c: 274:     TRISCbits.TRISC1 = 1;
  8478  004030  8294               	bsf	3988,1,c	;volatile
  8479                           
  8480                           ;main.c: 277:     const unsigned long FREQUENCY = 1000ul;;main.c: 278:     const unsigne
      +                          d char TIMER2_PRESCALER = 16;;main.c: 279:     PR2 = (10000000 / (FREQUENCY * 4 * TIMER2
      +                          _PRESCALER)) - 1;
  8481  004032  0E9B               	movlw	155
  8482  004034  6ECB               	movwf	4043,c	;volatile
  8483                           
  8484                           ;main.c: 282:     P1M1 = 0;
  8485  004036  9EBD               	bcf	4029,7,c	;volatile
  8486                           
  8487                           ;main.c: 283:     P1M0 = 0;
  8488  004038  9CBD               	bcf	4029,6,c	;volatile
  8489                           
  8490                           ;main.c: 284:     CCP1M3 = 1;
  8491  00403A  86BD               	bsf	4029,3,c	;volatile
  8492                           
  8493                           ;main.c: 285:     CCP1M2 = 1;
  8494  00403C  84BD               	bsf	4029,2,c	;volatile
  8495                           
  8496                           ;main.c: 286:     CCP1M1 = 0;
  8497  00403E  92BD               	bcf	4029,1,c	;volatile
  8498                           
  8499                           ;main.c: 287:     CCP1M0 = 0;
  8500  004040  90BD               	bcf	4029,0,c	;volatile
  8501                           
  8502                           ;main.c: 289:     CCP2M3 = 1;
  8503  004042  86BA               	bsf	4026,3,c	;volatile
  8504                           
  8505                           ;main.c: 290:     CCP2M2 = 1;
  8506  004044  84BA               	bsf	4026,2,c	;volatile
  8507                           
  8508                           ;main.c: 291:     CCP2M1 = 0;
  8509  004046  92BA               	bcf	4026,1,c	;volatile
  8510                           
  8511                           ;main.c: 292:     CCP2M0 = 0;
  8512  004048  90BA               	bcf	4026,0,c	;volatile
  8513                           
  8514                           ;main.c: 295:     T2CKPS0 = 1;
  8515  00404A  80CA               	bsf	4042,0,c	;volatile
  8516                           
  8517                           ;main.c: 296:     T2CKPS1 = 1;
  8518  00404C  82CA               	bsf	4042,1,c	;volatile
  8519                           
  8520                           ;main.c: 299:     TMR2ON = 1;
  8521  00404E  84CA               	bsf	4042,2,c	;volatile
  8522                           
  8523                           ;main.c: 302:     TRISCbits.TRISC2 = 0;
  8524  004050  9494               	bcf	3988,2,c	;volatile
  8525                           
  8526                           ;main.c: 303:     TRISCbits.TRISC1 = 0;
  8527  004052  9294               	bcf	3988,1,c	;volatile
  8528  004054  0012               	return		;funcret
  8529  004056                     __end_of_init_motor_PWM:
  8530                           	opt callstack 0
  8531                           
  8532 ;; *************** function ___awmod *****************
  8533 ;; Defined at:
  8534 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  dividend        2    5[COMRAM] int 
  8537 ;;  divisor         2    7[COMRAM] int 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  sign            1   10[COMRAM] unsigned char 
  8540 ;;  counter         1    9[COMRAM] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  2    5[COMRAM] int 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8550 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;Total ram usage:        6 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    2
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_doOperation
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           	psect	text32
  8565  00392E                     __ptext32:
  8566                           	opt callstack 0
  8567  00392E                     ___awmod:
  8568                           	opt callstack 27
  8569                           
  8570                           ;incstack = 0
  8571  00392E  0E00               	movlw	0
  8572  003930  6E0B               	movwf	___awmod@sign,c
  8573  003932  AE07               	btfss	___awmod@dividend+1,7,c
  8574  003934  D006               	goto	l8716
  8575  003936  6C06               	negf	___awmod@dividend,c
  8576  003938  1E07               	comf	___awmod@dividend+1,f,c
  8577  00393A  B0D8               	btfsc	status,0,c
  8578  00393C  2A07               	incf	___awmod@dividend+1,f,c
  8579  00393E  0E01               	movlw	1
  8580  003940  6E0B               	movwf	___awmod@sign,c
  8581  003942                     l8716:
  8582  003942  AE09               	btfss	___awmod@divisor+1,7,c
  8583  003944  D004               	goto	l8720
  8584  003946  6C08               	negf	___awmod@divisor,c
  8585  003948  1E09               	comf	___awmod@divisor+1,f,c
  8586  00394A  B0D8               	btfsc	status,0,c
  8587  00394C  2A09               	incf	___awmod@divisor+1,f,c
  8588  00394E                     l8720:
  8589  00394E  5008               	movf	___awmod@divisor,w,c
  8590  003950  1009               	iorwf	___awmod@divisor+1,w,c
  8591  003952  B4D8               	btfsc	status,2,c
  8592  003954  D018               	goto	l8736
  8593  003956  0E01               	movlw	1
  8594  003958  6E0A               	movwf	___awmod@counter,c
  8595  00395A  D004               	goto	l8726
  8596  00395C                     l8724:
  8597  00395C  90D8               	bcf	status,0,c
  8598  00395E  3608               	rlcf	___awmod@divisor,f,c
  8599  003960  3609               	rlcf	___awmod@divisor+1,f,c
  8600  003962  2A0A               	incf	___awmod@counter,f,c
  8601  003964                     l8726:
  8602  003964  AE09               	btfss	___awmod@divisor+1,7,c
  8603  003966  D7FA               	goto	l8724
  8604  003968                     u10370:
  8605  003968  5008               	movf	___awmod@divisor,w,c
  8606  00396A  5C06               	subwf	___awmod@dividend,w,c
  8607  00396C  5009               	movf	___awmod@divisor+1,w,c
  8608  00396E  5807               	subwfb	___awmod@dividend+1,w,c
  8609  003970  A0D8               	btfss	status,0,c
  8610  003972  D004               	goto	l8732
  8611  003974  5008               	movf	___awmod@divisor,w,c
  8612  003976  5E06               	subwf	___awmod@dividend,f,c
  8613  003978  5009               	movf	___awmod@divisor+1,w,c
  8614  00397A  5A07               	subwfb	___awmod@dividend+1,f,c
  8615  00397C                     l8732:
  8616  00397C  90D8               	bcf	status,0,c
  8617  00397E  3209               	rrcf	___awmod@divisor+1,f,c
  8618  003980  3208               	rrcf	___awmod@divisor,f,c
  8619  003982  2E0A               	decfsz	___awmod@counter,f,c
  8620  003984  D7F1               	goto	u10370
  8621  003986                     l8736:
  8622  003986  500B               	movf	___awmod@sign,w,c
  8623  003988  B4D8               	btfsc	status,2,c
  8624  00398A  D004               	goto	l8740
  8625  00398C  6C06               	negf	___awmod@dividend,c
  8626  00398E  1E07               	comf	___awmod@dividend+1,f,c
  8627  003990  B0D8               	btfsc	status,0,c
  8628  003992  2A07               	incf	___awmod@dividend+1,f,c
  8629  003994                     l8740:
  8630  003994  C006  F006         	movff	___awmod@dividend,?___awmod
  8631  003998  C007  F007         	movff	___awmod@dividend+1,?___awmod+1
  8632  00399C  0012               	return		;funcret
  8633  00399E                     __end_of___awmod:
  8634                           	opt callstack 0
  8635                           
  8636 ;; *************** function _TIMER_INIT *****************
  8637 ;; Defined at:
  8638 ;;		line 218 in file "main.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;		None
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, status,2
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;Total ram usage:        0 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    2
  8659 ;; This function calls:
  8660 ;;		Nothing
  8661 ;; This function is called by:
  8662 ;;		_doOperation
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           	psect	text33
  8667  00412E                     __ptext33:
  8668                           	opt callstack 0
  8669  00412E                     _TIMER_INIT:
  8670                           	opt callstack 27
  8671                           
  8672                           ;main.c: 219:     T0CONbits.TMR0ON = 0;
  8673                           
  8674                           ;incstack = 0
  8675  00412E  9ED5               	bcf	4053,7,c	;volatile
  8676                           
  8677                           ;main.c: 220:     T0CONbits.T08BIT = 0;
  8678  004130  9CD5               	bcf	4053,6,c	;volatile
  8679                           
  8680                           ;main.c: 221:     T0CONbits.T0CS = 0;
  8681  004132  9AD5               	bcf	4053,5,c	;volatile
  8682                           
  8683                           ;main.c: 222:     T0CONbits.PSA = 0;
  8684  004134  96D5               	bcf	4053,3,c	;volatile
  8685                           
  8686                           ;main.c: 223:     T0CONbits.T0PS = 0b000;
  8687  004136  0EF8               	movlw	-8
  8688  004138  16D5               	andwf	4053,f,c	;volatile
  8689                           
  8690                           ;main.c: 224:     TMR0H = (65536ul - (((10000000 / (4ul))/(2ul))/1000ul)) >> 8;
  8691  00413A  0EFB               	movlw	251
  8692  00413C  6ED7               	movwf	4055,c	;volatile
  8693                           
  8694                           ;main.c: 225:     TMR0L = (65536ul - (((10000000 / (4ul))/(2ul))/1000ul));
  8695  00413E  0E1E               	movlw	30
  8696  004140  6ED6               	movwf	4054,c	;volatile
  8697                           
  8698                           ;main.c: 226:     T0CONbits.TMR0ON = 1;
  8699  004142  8ED5               	bsf	4053,7,c	;volatile
  8700                           
  8701                           ;main.c: 227:     INTCONbits.TMR0IE = 1;
  8702  004144  8AF2               	bsf	4082,5,c	;volatile
  8703                           
  8704                           ;main.c: 229:     INTCONbits.GIE = 1;
  8705  004146  8EF2               	bsf	4082,7,c	;volatile
  8706                           
  8707                           ;main.c: 230:     INTCONbits.PEIE = 1;
  8708  004148  8CF2               	bsf	4082,6,c	;volatile
  8709  00414A  0012               	return		;funcret
  8710  00414C                     __end_of_TIMER_INIT:
  8711                           	opt callstack 0
  8712                           
  8713 ;; *************** function _doDisplayLog *****************
  8714 ;; Defined at:
  8715 ;;		line 43 in file "main.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  logNumber       2   39[BANK0 ] int 
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;  keyValue        1  107[COMRAM] unsigned char 
  8720 ;;  keypress        1  105[COMRAM] unsigned char 
  8721 ;;  currentPole     2  108[COMRAM] int 
  8722 ;;  currentDispl    1  106[COMRAM] enum E3250
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  1    wreg      void 
  8725 ;; Registers used:
  8726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8732 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Totals:        11       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;Total ram usage:       13 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:   13
  8739 ;; This function calls:
  8740 ;;		___wmul
  8741 ;;		_lcdInst
  8742 ;;		_printf
  8743 ;; This function is called by:
  8744 ;;		_main
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           	psect	text34
  8749  0011CE                     __ptext34:
  8750                           	opt callstack 0
  8751  0011CE                     _doDisplayLog:
  8752                           	opt callstack 17
  8753                           
  8754                           ;main.c: 44:     { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.0)));};
  8755                           
  8756                           ;incstack = 0
  8757  0011CE  0E80               	movlw	128
  8758  0011D0  ECD5  F020         	call	_lcdInst
  8759  0011D4  0E07               	movlw	7
  8760  0011D6  6E66               	movwf	??_doDisplayLog& (0+255),c
  8761  0011D8  0E7D               	movlw	125
  8762  0011DA                     u11097:
  8763  0011DA  2EE8               	decfsz	wreg,f,c
  8764  0011DC  D7FE               	bra	u11097
  8765  0011DE  2E66               	decfsz	??_doDisplayLog& (0+255),f,c
  8766  0011E0  D7FC               	bra	u11097
  8767  0011E2  F000               	nop	
  8768                           
  8769                           ;main.c: 49:     int currentPole = 1;
  8770  0011E4  0E00               	movlw	0
  8771  0011E6  6E6E               	movwf	doDisplayLog@currentPole+1,c
  8772  0011E8  0E01               	movlw	1
  8773  0011EA  6E6D               	movwf	doDisplayLog@currentPole,c
  8774                           
  8775                           ;main.c: 51:     enum displayStates currentDisplayState = opTime;
  8776  0011EC  0E00               	movlw	0
  8777  0011EE  6E6B               	movwf	doDisplayLog@currentDisplayState,c
  8778  0011F0  D132               	goto	l8800
  8779  0011F2                     l8752:
  8780                           
  8781                           ;main.c: 56:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.
      +                          0)));};
  8782  0011F2  0E80               	movlw	128
  8783  0011F4  ECD5  F020         	call	_lcdInst
  8784  0011F8  0E07               	movlw	7
  8785  0011FA  6E66               	movwf	??_doDisplayLog& (0+255),c
  8786  0011FC  0E7D               	movlw	125
  8787  0011FE                     u11107:
  8788  0011FE  2EE8               	decfsz	wreg,f,c
  8789  001200  D7FE               	bra	u11107
  8790  001202  2E66               	decfsz	??_doDisplayLog& (0+255),f,c
  8791  001204  D7FC               	bra	u11107
  8792  001206  F000               	nop	
  8793                           
  8794                           ;main.c: 57:                 printf("%s%d%s", "OP. TIME ",logs[logNumber][0], "s");
  8795  001208  C0A7  F006         	movff	doDisplayLog@logNumber,___wmul@multiplier
  8796  00120C  C0A8  F007         	movff	doDisplayLog@logNumber+1,___wmul@multiplier+1
  8797  001210  0E00               	movlw	0
  8798  001212  6E09               	movwf	___wmul@multiplicand+1,c
  8799  001214  0E60               	movlw	96
  8800  001216  6E08               	movwf	___wmul@multiplicand,c
  8801  001218  EC3F  F020         	call	___wmul	;wreg free
  8802  00121C  0E78               	movlw	low _logs
  8803  00121E  2406               	addwf	?___wmul,w,c
  8804  001220  6ED9               	movwf	fsr2l,c
  8805  001222  0E01               	movlw	high _logs
  8806  001224  2007               	addwfc	?___wmul+1,w,c
  8807  001226  6EDA               	movwf	fsr2h,c
  8808  001228  CFDE F06F          	movff	postinc2,_doDisplayLog$2270
  8809  00122C  CFDD F070          	movff	postdec2,_doDisplayLog$2270+1
  8810                           
  8811                           ;main.c: 57:                 printf("%s%d%s", "OP. TIME ",logs[logNumber][0], "s");
  8812  001230  0ED3               	movlw	low STR_1
  8813  001232  0100               	movlb	0	; () banked
  8814  001234  6F9D               	movwf	printf@fmt& (0+255),b
  8815  001236  0EFF               	movlw	high STR_1
  8816  001238  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  8817  00123A  0E87               	movlw	low STR_2
  8818  00123C  6F9F               	movwf	(?_printf+2)& (0+255),b
  8819  00123E  0EFF               	movlw	high STR_2
  8820  001240  6FA0               	movwf	(?_printf+3)& (0+255),b
  8821  001242  C06F  F0A1         	movff	_doDisplayLog$2270,?_printf+4
  8822  001246  C070  F0A2         	movff	_doDisplayLog$2270+1,?_printf+5
  8823  00124A  0ED8               	movlw	low (STR_1+5)
  8824  00124C  6FA3               	movwf	(?_printf+6)& (0+255),b
  8825  00124E  0EFF               	movlw	high (STR_1+5)
  8826  001250  6FA4               	movwf	(?_printf+7)& (0+255),b
  8827  001252  EC2B  F020         	call	_printf	;wreg free
  8828  001256  0EC0               	movlw	192
  8829  001258  ECD5  F020         	call	_lcdInst
  8830                           
  8831                           ;main.c: 59:                 printf("%s%d", "TIR. SUPPLIED ",logs[logNumber][1]);
  8832  00125C  C0A7  F006         	movff	doDisplayLog@logNumber,___wmul@multiplier
  8833  001260  C0A8  F007         	movff	doDisplayLog@logNumber+1,___wmul@multiplier+1
  8834  001264  0E00               	movlw	0
  8835  001266  6E09               	movwf	___wmul@multiplicand+1,c
  8836  001268  0E60               	movlw	96
  8837  00126A  6E08               	movwf	___wmul@multiplicand,c
  8838  00126C  EC3F  F020         	call	___wmul	;wreg free
  8839  001270  0E7A               	movlw	low (_logs+2)
  8840  001272  2406               	addwf	?___wmul,w,c
  8841  001274  6ED9               	movwf	fsr2l,c
  8842  001276  0E01               	movlw	high (_logs+2)
  8843  001278  2007               	addwfc	?___wmul+1,w,c
  8844  00127A  6EDA               	movwf	fsr2h,c
  8845  00127C  CFDE F06F          	movff	postinc2,_doDisplayLog$2270
  8846  001280  CFDD F070          	movff	postdec2,_doDisplayLog$2270+1
  8847                           
  8848                           ;main.c: 59:                 printf("%s%d", "TIR. SUPPLIED ",logs[logNumber][1]);
  8849  001284  0ECE               	movlw	low (STR_10+4)
  8850  001286  0100               	movlb	0	; () banked
  8851  001288  6F9D               	movwf	printf@fmt& (0+255),b
  8852  00128A  0EFF               	movlw	high (STR_10+4)
  8853  00128C  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  8854  00128E  0EA7               	movlw	low STR_5
  8855  001290  6F9F               	movwf	(?_printf+2)& (0+255),b
  8856  001292  0EFE               	movlw	high STR_5
  8857  001294  6FA0               	movwf	(?_printf+3)& (0+255),b
  8858  001296  C06F  F0A1         	movff	_doDisplayLog$2270,?_printf+4
  8859  00129A  C070  F0A2         	movff	_doDisplayLog$2270+1,?_printf+5
  8860  00129E  EC2B  F020         	call	_printf	;wreg free
  8861  0012A2  0E90               	movlw	144
  8862  0012A4  ECD5  F020         	call	_lcdInst
  8863                           
  8864                           ;main.c: 61:                 printf("%s","(1) POLE INFO");
  8865  0012A8  0ED7               	movlw	low (STR_1+4)
  8866  0012AA  0100               	movlb	0	; () banked
  8867  0012AC  6F9D               	movwf	printf@fmt& (0+255),b
  8868  0012AE  0EFF               	movlw	high (STR_1+4)
  8869  0012B0  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  8870  0012B2  0EF0               	movlw	low STR_7
  8871  0012B4  6F9F               	movwf	(?_printf+2)& (0+255),b
  8872  0012B6  0EFE               	movlw	high STR_7
  8873  0012B8  6FA0               	movwf	(?_printf+3)& (0+255),b
  8874  0012BA  EC2B  F020         	call	_printf	;wreg free
  8875  0012BE  0ED0               	movlw	208
  8876  0012C0  ECD5  F020         	call	_lcdInst
  8877                           
  8878                           ;main.c: 63:                 printf("%s","(2) SAVE & EXIT");
  8879  0012C4  0ED7               	movlw	low (STR_1+4)
  8880  0012C6  0100               	movlb	0	; () banked
  8881  0012C8  6F9D               	movwf	printf@fmt& (0+255),b
  8882  0012CA  0EFF               	movlw	high (STR_1+4)
  8883  0012CC  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  8884  0012CE  0E87               	movlw	low STR_9
  8885  0012D0  6F9F               	movwf	(?_printf+2)& (0+255),b
  8886  0012D2  0EFE               	movlw	high STR_9
  8887  0012D4  6FA0               	movwf	(?_printf+3)& (0+255),b
  8888  0012D6  EC2B  F020         	call	_printf	;wreg free
  8889                           
  8890                           ;main.c: 64:                 break;
  8891  0012DA  D0CB               	goto	l8802
  8892  0012DC                     l8774:
  8893                           
  8894                           ;main.c: 66:                 { lcdInst(0x80); _delay((unsigned long)((2)*(10000000/4000.
      +                          0)));};
  8895  0012DC  0E80               	movlw	128
  8896  0012DE  ECD5  F020         	call	_lcdInst
  8897  0012E2  0E07               	movlw	7
  8898  0012E4  6E66               	movwf	??_doDisplayLog& (0+255),c
  8899  0012E6  0E7D               	movlw	125
  8900  0012E8                     u11117:
  8901  0012E8  2EE8               	decfsz	wreg,f,c
  8902  0012EA  D7FE               	bra	u11117
  8903  0012EC  2E66               	decfsz	??_doDisplayLog& (0+255),f,c
  8904  0012EE  D7FC               	bra	u11117
  8905  0012F0  F000               	nop	
  8906                           
  8907                           ;main.c: 67:                 printf("%s%d%s%d", "POLE ", currentPole,"/", logs[logNumber
      +                          ][2]);
  8908  0012F2  C0A7  F006         	movff	doDisplayLog@logNumber,___wmul@multiplier
  8909  0012F6  C0A8  F007         	movff	doDisplayLog@logNumber+1,___wmul@multiplier+1
  8910  0012FA  0E00               	movlw	0
  8911  0012FC  6E09               	movwf	___wmul@multiplicand+1,c
  8912  0012FE  0E60               	movlw	96
  8913  001300  6E08               	movwf	___wmul@multiplicand,c
  8914  001302  EC3F  F020         	call	___wmul	;wreg free
  8915  001306  0E7C               	movlw	low (_logs+4)
  8916  001308  2406               	addwf	?___wmul,w,c
  8917  00130A  6ED9               	movwf	fsr2l,c
  8918  00130C  0E01               	movlw	high (_logs+4)
  8919  00130E  2007               	addwfc	?___wmul+1,w,c
  8920  001310  6EDA               	movwf	fsr2h,c
  8921  001312  CFDE F06F          	movff	postinc2,_doDisplayLog$2270
  8922  001316  CFDD F070          	movff	postdec2,_doDisplayLog$2270+1
  8923                           
  8924                           ;main.c: 67:                 printf("%s%d%s%d", "POLE ", currentPole,"/", logs[logNumber
      +                          ][2]);
  8925  00131A  0ECA               	movlw	low STR_10
  8926  00131C  0100               	movlb	0	; () banked
  8927  00131E  6F9D               	movwf	printf@fmt& (0+255),b
  8928  001320  0EFF               	movlw	high STR_10
  8929  001322  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  8930  001324  0EDA               	movlw	low STR_11
  8931  001326  6F9F               	movwf	(?_printf+2)& (0+255),b
  8932  001328  0EFF               	movlw	high STR_11
  8933  00132A  6FA0               	movwf	(?_printf+3)& (0+255),b
  8934  00132C  C06D  F0A1         	movff	doDisplayLog@currentPole,?_printf+4
  8935  001330  C06E  F0A2         	movff	doDisplayLog@currentPole+1,?_printf+5
  8936  001334  0EFC               	movlw	low STR_12
  8937  001336  6FA3               	movwf	(?_printf+6)& (0+255),b
  8938  001338  0EFF               	movlw	high STR_12
  8939  00133A  6FA4               	movwf	(?_printf+7)& (0+255),b
  8940  00133C  C06F  F0A5         	movff	_doDisplayLog$2270,?_printf+8
  8941  001340  C070  F0A6         	movff	_doDisplayLog$2270+1,?_printf+9
  8942  001344  EC2B  F020         	call	_printf	;wreg free
  8943  001348  0EC0               	movlw	192
  8944  00134A  ECD5  F020         	call	_lcdInst
  8945                           
  8946                           ;main.c: 69:                 printf("%s%d","TIR. DEPLOY: ", logs[logNumber][3+(currentPo
      +                          le-1)*2]);
  8947  00134E  C06D  F066         	movff	doDisplayLog@currentPole,??_doDisplayLog
  8948  001352  C06E  F067         	movff	doDisplayLog@currentPole+1,??_doDisplayLog+1
  8949  001356  90D8               	bcf	status,0,c
  8950  001358  3666               	rlcf	??_doDisplayLog,f,c
  8951  00135A  3667               	rlcf	??_doDisplayLog+1,f,c
  8952  00135C  90D8               	bcf	status,0,c
  8953  00135E  3666               	rlcf	??_doDisplayLog,f,c
  8954  001360  3667               	rlcf	??_doDisplayLog+1,f,c
  8955  001362  C0A7  F006         	movff	doDisplayLog@logNumber,___wmul@multiplier
  8956  001366  C0A8  F007         	movff	doDisplayLog@logNumber+1,___wmul@multiplier+1
  8957  00136A  0E00               	movlw	0
  8958  00136C  6E09               	movwf	___wmul@multiplicand+1,c
  8959  00136E  0E60               	movlw	96
  8960  001370  6E08               	movwf	___wmul@multiplicand,c
  8961  001372  EC3F  F020         	call	___wmul	;wreg free
  8962  001376  0E78               	movlw	low _logs
  8963  001378  6E68               	movwf	(??_doDisplayLog+2)& (0+255),c
  8964  00137A  0E01               	movlw	high _logs
  8965  00137C  6E69               	movwf	(??_doDisplayLog+3)& (0+255),c
  8966  00137E  0E02               	movlw	2
  8967  001380  2668               	addwf	??_doDisplayLog+2,f,c
  8968  001382  0E00               	movlw	0
  8969  001384  2269               	addwfc	??_doDisplayLog+3,f,c
  8970  001386  5006               	movf	?___wmul,w,c
  8971  001388  2668               	addwf	??_doDisplayLog+2,f,c
  8972  00138A  5007               	movf	?___wmul+1,w,c
  8973  00138C  2269               	addwfc	??_doDisplayLog+3,f,c
  8974  00138E  5066               	movf	??_doDisplayLog,w,c
  8975  001390  2468               	addwf	??_doDisplayLog+2,w,c
  8976  001392  6ED9               	movwf	fsr2l,c
  8977  001394  5067               	movf	??_doDisplayLog+1,w,c
  8978  001396  2069               	addwfc	??_doDisplayLog+3,w,c
  8979  001398  6EDA               	movwf	fsr2h,c
  8980  00139A  CFDE F06F          	movff	postinc2,_doDisplayLog$2270
  8981  00139E  CFDD F070          	movff	postdec2,_doDisplayLog$2270+1
  8982                           
  8983                           ;main.c: 69:                 printf("%s%d","TIR. DEPLOY: ", logs[logNumber][3+(currentPo
      +                          le-1)*2]);
  8984  0013A2  0ECE               	movlw	low (STR_10+4)
  8985  0013A4  0100               	movlb	0	; () banked
  8986  0013A6  6F9D               	movwf	printf@fmt& (0+255),b
  8987  0013A8  0EFF               	movlw	high (STR_10+4)
  8988  0013AA  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  8989  0013AC  0ED4               	movlw	low STR_14
  8990  0013AE  6F9F               	movwf	(?_printf+2)& (0+255),b
  8991  0013B0  0EFE               	movlw	high STR_14
  8992  0013B2  6FA0               	movwf	(?_printf+3)& (0+255),b
  8993  0013B4  C06F  F0A1         	movff	_doDisplayLog$2270,?_printf+4
  8994  0013B8  C070  F0A2         	movff	_doDisplayLog$2270+1,?_printf+5
  8995  0013BC  EC2B  F020         	call	_printf	;wreg free
  8996  0013C0  0E90               	movlw	144
  8997  0013C2  ECD5  F020         	call	_lcdInst
  8998                           
  8999                           ;main.c: 71:                 printf("%s%d","TIRE. ON POLE: ", logs[logNumber][4+(current
      +                          Pole-1)*2]);
  9000  0013C6  C06D  F066         	movff	doDisplayLog@currentPole,??_doDisplayLog
  9001  0013CA  C06E  F067         	movff	doDisplayLog@currentPole+1,??_doDisplayLog+1
  9002  0013CE  90D8               	bcf	status,0,c
  9003  0013D0  3666               	rlcf	??_doDisplayLog,f,c
  9004  0013D2  3667               	rlcf	??_doDisplayLog+1,f,c
  9005  0013D4  90D8               	bcf	status,0,c
  9006  0013D6  3666               	rlcf	??_doDisplayLog,f,c
  9007  0013D8  3667               	rlcf	??_doDisplayLog+1,f,c
  9008  0013DA  C0A7  F006         	movff	doDisplayLog@logNumber,___wmul@multiplier
  9009  0013DE  C0A8  F007         	movff	doDisplayLog@logNumber+1,___wmul@multiplier+1
  9010  0013E2  0E00               	movlw	0
  9011  0013E4  6E09               	movwf	___wmul@multiplicand+1,c
  9012  0013E6  0E60               	movlw	96
  9013  0013E8  6E08               	movwf	___wmul@multiplicand,c
  9014  0013EA  EC3F  F020         	call	___wmul	;wreg free
  9015  0013EE  0E78               	movlw	low _logs
  9016  0013F0  6E68               	movwf	(??_doDisplayLog+2)& (0+255),c
  9017  0013F2  0E01               	movlw	high _logs
  9018  0013F4  6E69               	movwf	(??_doDisplayLog+3)& (0+255),c
  9019  0013F6  0E04               	movlw	4
  9020  0013F8  2668               	addwf	??_doDisplayLog+2,f,c
  9021  0013FA  0E00               	movlw	0
  9022  0013FC  2269               	addwfc	??_doDisplayLog+3,f,c
  9023  0013FE  5006               	movf	?___wmul,w,c
  9024  001400  2668               	addwf	??_doDisplayLog+2,f,c
  9025  001402  5007               	movf	?___wmul+1,w,c
  9026  001404  2269               	addwfc	??_doDisplayLog+3,f,c
  9027  001406  5066               	movf	??_doDisplayLog,w,c
  9028  001408  2468               	addwf	??_doDisplayLog+2,w,c
  9029  00140A  6ED9               	movwf	fsr2l,c
  9030  00140C  5067               	movf	??_doDisplayLog+1,w,c
  9031  00140E  2069               	addwfc	??_doDisplayLog+3,w,c
  9032  001410  6EDA               	movwf	fsr2h,c
  9033  001412  CFDE F06F          	movff	postinc2,_doDisplayLog$2270
  9034  001416  CFDD F070          	movff	postdec2,_doDisplayLog$2270+1
  9035                           
  9036                           ;main.c: 71:                 printf("%s%d","TIRE. ON POLE: ", logs[logNumber][4+(current
      +                          Pole-1)*2]);
  9037  00141A  0ECE               	movlw	low (STR_10+4)
  9038  00141C  0100               	movlb	0	; () banked
  9039  00141E  6F9D               	movwf	printf@fmt& (0+255),b
  9040  001420  0EFF               	movlw	high (STR_10+4)
  9041  001422  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  9042  001424  0E67               	movlw	low STR_16
  9043  001426  6F9F               	movwf	(?_printf+2)& (0+255),b
  9044  001428  0EFE               	movlw	high STR_16
  9045  00142A  6FA0               	movwf	(?_printf+3)& (0+255),b
  9046  00142C  C06F  F0A1         	movff	_doDisplayLog$2270,?_printf+4
  9047  001430  C070  F0A2         	movff	_doDisplayLog$2270+1,?_printf+5
  9048  001434  EC2B  F020         	call	_printf	;wreg free
  9049  001438  0ED0               	movlw	208
  9050  00143A  ECD5  F020         	call	_lcdInst
  9051                           
  9052                           ;main.c: 73:                 printf("%s","1<- 2-> 3MENU");
  9053  00143E  0ED7               	movlw	low (STR_1+4)
  9054  001440  0100               	movlb	0	; () banked
  9055  001442  6F9D               	movwf	printf@fmt& (0+255),b
  9056  001444  0EFF               	movlw	high (STR_1+4)
  9057  001446  6F9E               	movwf	(printf@fmt+1)& (0+255),b
  9058  001448  0E0C               	movlw	low STR_18
  9059  00144A  6F9F               	movwf	(?_printf+2)& (0+255),b
  9060  00144C  0EFF               	movlw	high STR_18
  9061  00144E  6FA0               	movwf	(?_printf+3)& (0+255),b
  9062  001450  EC2B  F020         	call	_printf	;wreg free
  9063                           
  9064                           ;main.c: 74:                 break;
  9065  001454  D00E               	goto	l8802
  9066  001456                     l8800:
  9067  001456  506B               	movf	doDisplayLog@currentDisplayState,w,c
  9068  001458  6E66               	movwf	??_doDisplayLog& (0+255),c
  9069  00145A  6A67               	clrf	(??_doDisplayLog+1)& (0+255),c
  9070                           
  9071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9072                           ; Switch size 1, requested type "simple"
  9073                           ; Number of cases is 1, Range of values is 0 to 0
  9074                           ; switch strategies available:
  9075                           ; Name         Instructions Cycles
  9076                           ; simple_byte            4     3 (average)
  9077                           ;	Chosen strategy is simple_byte
  9078  00145C  5067               	movf	??_doDisplayLog+1,w,c
  9079  00145E  0A00               	xorlw	0	; case 0
  9080  001460  A4D8               	btfss	status,2,c
  9081  001462  D007               	goto	l8802
  9082                           
  9083                           ; Switch size 1, requested type "simple"
  9084                           ; Number of cases is 2, Range of values is 0 to 1
  9085                           ; switch strategies available:
  9086                           ; Name         Instructions Cycles
  9087                           ; simple_byte            7     4 (average)
  9088                           ;	Chosen strategy is simple_byte
  9089  001464  5066               	movf	??_doDisplayLog,w,c
  9090  001466  0A00               	xorlw	0	; case 0
  9091  001468  B4D8               	btfsc	status,2,c
  9092  00146A  D6C3               	goto	l8752
  9093  00146C  0A01               	xorlw	1	; case 1
  9094  00146E  B4D8               	btfsc	status,2,c
  9095  001470  D735               	goto	l8774
  9096  001472                     l8802:
  9097                           
  9098                           ;main.c: 77:         if(keyPressed){
  9099  001472  0101               	movlb	1	; () banked
  9100  001474  514F               	movf	_keyPressed& (0+255),w,b	;volatile
  9101  001476  B4D8               	btfsc	status,2,c
  9102  001478  D070               	goto	l8842
  9103                           
  9104                           ; BSR set to: 1
  9105                           ;main.c: 80:             keyPressed = 0;
  9106  00147A  0E00               	movlw	0
  9107  00147C  6F4F               	movwf	_keyPressed& (0+255),b	;volatile
  9108                           
  9109                           ; BSR set to: 1
  9110                           ;main.c: 83:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  9111  00147E  3881               	swapf	3969,w,c	;volatile
  9112  001480  0B0F               	andlw	15
  9113  001482  0B0F               	andlw	15
  9114  001484  6E6A               	movwf	doDisplayLog@keypress,c
  9115                           
  9116                           ; BSR set to: 1
  9117                           ;main.c: 84:             char keyValue = keys[keypress];
  9118  001486  0E33               	movlw	low _keys
  9119  001488  246A               	addwf	doDisplayLog@keypress,w,c
  9120  00148A  6EF6               	movwf	tblptrl,c
  9121  00148C  6AF7               	clrf	tblptrh,c
  9122  00148E  0EFE               	movlw	high _keys
  9123  001490  22F7               	addwfc	tblptrh,f,c
  9124  001492                     	if	0	;There are less than 3 active tblptr bytes
  9125  001492                     	endif
  9126  001492  0008               	tblrd		*
  9127  001494  CFF5 F06C          	movff	tablat,doDisplayLog@keyValue
  9128                           
  9129                           ; BSR set to: 1
  9130                           ;main.c: 85:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
  9131  001498  0E01               	movlw	1
  9132  00149A  ECD5  F020         	call	_lcdInst
  9133  00149E  0E11               	movlw	17
  9134  0014A0  6E66               	movwf	??_doDisplayLog& (0+255),c
  9135  0014A2  0E3A               	movlw	58
  9136  0014A4                     u11127:
  9137  0014A4  2EE8               	decfsz	wreg,f,c
  9138  0014A6  D7FE               	bra	u11127
  9139  0014A8  2E66               	decfsz	??_doDisplayLog& (0+255),f,c
  9140  0014AA  D7FC               	bra	u11127
  9141  0014AC  D000               	nop2	
  9142                           
  9143                           ;main.c: 86:             switch (currentDisplayState){
  9144  0014AE  D047               	goto	l8840
  9145  0014B0                     l8814:
  9146                           
  9147                           ;main.c: 88:                     if (keyValue == '1'){
  9148  0014B0  0E31               	movlw	49
  9149  0014B2  186C               	xorwf	doDisplayLog@keyValue,w,c
  9150  0014B4  A4D8               	btfss	status,2,c
  9151  0014B6  D003               	goto	l8818
  9152                           
  9153                           ;main.c: 89:                         currentDisplayState = pole;
  9154  0014B8  0E01               	movlw	1
  9155  0014BA  6E6B               	movwf	doDisplayLog@currentDisplayState,c
  9156                           
  9157                           ;main.c: 90:                     } else if (keyValue == '2'){
  9158  0014BC  D04E               	goto	l8842
  9159  0014BE                     l8818:
  9160  0014BE  0E32               	movlw	50
  9161  0014C0  186C               	xorwf	doDisplayLog@keyValue,w,c
  9162  0014C2  B4D8               	btfsc	status,2,c
  9163  0014C4  0012               	return	
  9164  0014C6  D049               	goto	l8842
  9165  0014C8                     l8822:
  9166                           
  9167                           ;main.c: 95:                     if (keyValue == '3'){
  9168  0014C8  0E33               	movlw	51
  9169  0014CA  186C               	xorwf	doDisplayLog@keyValue,w,c
  9170  0014CC  A4D8               	btfss	status,2,c
  9171  0014CE  D007               	goto	l8826
  9172                           
  9173                           ;main.c: 96:                         currentDisplayState = opTime;
  9174  0014D0  0E00               	movlw	0
  9175  0014D2  6E6B               	movwf	doDisplayLog@currentDisplayState,c
  9176                           
  9177                           ;main.c: 97:                         currentPole = 1;
  9178  0014D4  0E00               	movlw	0
  9179  0014D6  6E6E               	movwf	doDisplayLog@currentPole+1,c
  9180  0014D8  0E01               	movlw	1
  9181  0014DA  6E6D               	movwf	doDisplayLog@currentPole,c
  9182                           
  9183                           ;main.c: 99:                     } else if (keyValue == '2'){
  9184  0014DC  D03E               	goto	l8842
  9185  0014DE                     l8826:
  9186  0014DE  0E32               	movlw	50
  9187  0014E0  186C               	xorwf	doDisplayLog@keyValue,w,c
  9188  0014E2  A4D8               	btfss	status,2,c
  9189  0014E4  D01D               	goto	l8832
  9190                           
  9191                           ;main.c: 100:                         if(currentPole < logs[logNumber][2]){
  9192  0014E6  C0A7  F006         	movff	doDisplayLog@logNumber,___wmul@multiplier
  9193  0014EA  C0A8  F007         	movff	doDisplayLog@logNumber+1,___wmul@multiplier+1
  9194  0014EE  0E00               	movlw	0
  9195  0014F0  6E09               	movwf	___wmul@multiplicand+1,c
  9196  0014F2  0E60               	movlw	96
  9197  0014F4  6E08               	movwf	___wmul@multiplicand,c
  9198  0014F6  EC3F  F020         	call	___wmul	;wreg free
  9199  0014FA  0E7C               	movlw	low (_logs+4)
  9200  0014FC  2406               	addwf	?___wmul,w,c
  9201  0014FE  6ED9               	movwf	fsr2l,c
  9202  001500  0E01               	movlw	high (_logs+4)
  9203  001502  2007               	addwfc	?___wmul+1,w,c
  9204  001504  6EDA               	movwf	fsr2h,c
  9205  001506  50DE               	movf	postinc2,w,c
  9206  001508  5C6D               	subwf	doDisplayLog@currentPole,w,c
  9207  00150A  506E               	movf	doDisplayLog@currentPole+1,w,c
  9208  00150C  0A80               	xorlw	128
  9209  00150E  6E68               	movwf	(??_doDisplayLog+2)& (0+255),c
  9210  001510  50DE               	movf	postinc2,w,c
  9211  001512  0A80               	xorlw	128
  9212  001514  5868               	subwfb	(??_doDisplayLog+2)& (0+255),w,c
  9213  001516  B0D8               	btfsc	status,0,c
  9214  001518  D020               	goto	l8842
  9215                           
  9216                           ;main.c: 101:                             currentPole++;
  9217  00151A  4A6D               	infsnz	doDisplayLog@currentPole,f,c
  9218  00151C  2A6E               	incf	doDisplayLog@currentPole+1,f,c
  9219  00151E  D01D               	goto	l8842
  9220  001520                     l8832:
  9221  001520  0E31               	movlw	49
  9222  001522  186C               	xorwf	doDisplayLog@keyValue,w,c
  9223  001524  B4D8               	btfsc	status,2,c
  9224                           
  9225                           ;main.c: 104:                         if (currentPole > 1){
  9226  001526  BE6E               	btfsc	doDisplayLog@currentPole+1,7,c
  9227  001528  D018               	goto	l8842
  9228  00152A  506E               	movf	doDisplayLog@currentPole+1,w,c
  9229  00152C  E104               	bnz	u10470
  9230  00152E  0E02               	movlw	2
  9231  001530  5C6D               	subwf	doDisplayLog@currentPole,w,c
  9232  001532  A0D8               	btfss	status,0,c
  9233  001534  D012               	goto	l8842
  9234  001536                     u10470:
  9235                           
  9236                           ;main.c: 105:                             currentPole--;
  9237  001536  066D               	decf	doDisplayLog@currentPole,f,c
  9238  001538  A0D8               	btfss	status,0,c
  9239  00153A  066E               	decf	doDisplayLog@currentPole+1,f,c
  9240  00153C  D00E               	goto	l8842
  9241  00153E                     l8840:
  9242  00153E  506B               	movf	doDisplayLog@currentDisplayState,w,c
  9243  001540  6E66               	movwf	??_doDisplayLog& (0+255),c
  9244  001542  6A67               	clrf	(??_doDisplayLog+1)& (0+255),c
  9245                           
  9246                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9247                           ; Switch size 1, requested type "simple"
  9248                           ; Number of cases is 1, Range of values is 0 to 0
  9249                           ; switch strategies available:
  9250                           ; Name         Instructions Cycles
  9251                           ; simple_byte            4     3 (average)
  9252                           ;	Chosen strategy is simple_byte
  9253  001544  5067               	movf	??_doDisplayLog+1,w,c
  9254  001546  0A00               	xorlw	0	; case 0
  9255  001548  A4D8               	btfss	status,2,c
  9256  00154A  D007               	goto	l8842
  9257                           
  9258                           ; Switch size 1, requested type "simple"
  9259                           ; Number of cases is 2, Range of values is 0 to 1
  9260                           ; switch strategies available:
  9261                           ; Name         Instructions Cycles
  9262                           ; simple_byte            7     4 (average)
  9263                           ;	Chosen strategy is simple_byte
  9264  00154C  5066               	movf	??_doDisplayLog,w,c
  9265  00154E  0A00               	xorlw	0	; case 0
  9266  001550  B4D8               	btfsc	status,2,c
  9267  001552  D7AE               	goto	l8814
  9268  001554  0A01               	xorlw	1	; case 1
  9269  001556  B4D8               	btfsc	status,2,c
  9270  001558  D7B7               	goto	l8822
  9271  00155A                     l8842:
  9272                           
  9273                           ;main.c: 113:     _delay((unsigned long)((1)*(10000000/4000.0)));
  9274  00155A  0E04               	movlw	4
  9275  00155C  6E66               	movwf	??_doDisplayLog& (0+255),c
  9276  00155E  0E3E               	movlw	62
  9277  001560                     u11137:
  9278  001560  2EE8               	decfsz	wreg,f,c
  9279  001562  D7FE               	bra	u11137
  9280  001564  2E66               	decfsz	??_doDisplayLog& (0+255),f,c
  9281  001566  D7FC               	bra	u11137
  9282  001568  D776               	goto	l8800
  9283  00156A                     __end_of_doDisplayLog:
  9284                           	opt callstack 0
  9285                           
  9286 ;; *************** function _printf *****************
  9287 ;; Defined at:
  9288 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;  fmt             2   29[BANK0 ] PTR const unsigned char 
  9291 ;;		 -> STR_56(11), STR_55(11), STR_54(10), STR_53(13), 
  9292 ;;		 -> STR_51(3), STR_49(3), STR_47(3), STR_45(3), 
  9293 ;;		 -> STR_43(3), STR_41(3), STR_39(3), STR_37(3), 
  9294 ;;		 -> STR_35(3), STR_33(3), STR_31(3), STR_30(15), 
  9295 ;;		 -> STR_29(15), STR_27(3), STR_26(13), STR_25(11), 
  9296 ;;		 -> STR_24(10), STR_23(6), STR_22(6), STR_21(3), 
  9297 ;;		 -> STR_20(4), STR_19(17), STR_17(3), STR_15(5), 
  9298 ;;		 -> STR_13(5), STR_10(9), STR_8(3), STR_6(3), 
  9299 ;;		 -> STR_4(5), STR_1(7), 
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;  ap              2   99[COMRAM] PTR void [1]
  9302 ;;		 -> ?_printf(2), 
  9303 ;;  ret             2    0        int 
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  2   29[BANK0 ] int 
  9306 ;; Registers used:
  9307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9313 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;Total ram usage:       14 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:   12
  9320 ;; This function calls:
  9321 ;;		_vfprintf
  9322 ;; This function is called by:
  9323 ;;		_doDisplayLog
  9324 ;;		_tirePositioning
  9325 ;;		_doOperation
  9326 ;;		_main
  9327 ;;		_mainEEPROM
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           	psect	text35
  9332  004056                     __ptext35:
  9333                           	opt callstack 0
  9334  004056                     _printf:
  9335                           	opt callstack 18
  9336                           
  9337                           ;incstack = 0
  9338  004056  0E9F               	movlw	low (?_printf+2)
  9339  004058  6E64               	movwf	printf@ap,c
  9340  00405A  0E00               	movlw	high (?_printf+2)
  9341  00405C  6E65               	movwf	printf@ap+1,c
  9342  00405E  0E00               	movlw	0
  9343  004060  0100               	movlb	0	; () banked
  9344  004062  6F97               	movwf	vfprintf@fp& (0+255),b
  9345  004064  0E00               	movlw	0
  9346  004066  6F98               	movwf	(vfprintf@fp+1)& (0+255),b
  9347  004068  C09D  F099         	movff	printf@fmt,vfprintf@fmt
  9348  00406C  C09E  F09A         	movff	printf@fmt+1,vfprintf@fmt+1
  9349  004070  0E64               	movlw	low printf@ap
  9350  004072  6F9B               	movwf	vfprintf@ap& (0+255),b
  9351  004074  0E00               	movlw	high printf@ap
  9352  004076  6F9C               	movwf	(vfprintf@ap+1)& (0+255),b
  9353  004078  ECCD  F01D         	call	_vfprintf	;wreg free
  9354  00407C  0012               	return		;funcret
  9355  00407E                     __end_of_printf:
  9356                           	opt callstack 0
  9357                           
  9358 ;; *************** function _vfprintf *****************
  9359 ;; Defined at:
  9360 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9361 ;; Parameters:    Size  Location     Type
  9362 ;;  fp              2   23[BANK0 ] PTR struct _IO_FILE
  9363 ;;		 -> NULL(0), 
  9364 ;;  fmt             2   25[BANK0 ] PTR const unsigned char 
  9365 ;;		 -> STR_56(11), STR_55(11), STR_54(10), STR_53(13), 
  9366 ;;		 -> STR_51(3), STR_49(3), STR_47(3), STR_45(3), 
  9367 ;;		 -> STR_43(3), STR_41(3), STR_39(3), STR_37(3), 
  9368 ;;		 -> STR_35(3), STR_33(3), STR_31(3), STR_30(15), 
  9369 ;;		 -> STR_29(15), STR_27(3), STR_26(13), STR_25(11), 
  9370 ;;		 -> STR_24(10), STR_23(6), STR_22(6), STR_21(3), 
  9371 ;;		 -> STR_20(4), STR_19(17), STR_17(3), STR_15(5), 
  9372 ;;		 -> STR_13(5), STR_10(9), STR_8(3), STR_6(3), 
  9373 ;;		 -> STR_4(5), STR_1(7), 
  9374 ;;  ap              2   27[BANK0 ] PTR PTR void 
  9375 ;;		 -> printf@ap(2), 
  9376 ;; Auto vars:     Size  Location     Type
  9377 ;;  cfmt            2   95[COMRAM] PTR unsigned char 
  9378 ;;		 -> STR_56(11), STR_55(11), STR_54(10), STR_53(13), 
  9379 ;;		 -> STR_51(3), STR_49(3), STR_47(3), STR_45(3), 
  9380 ;;		 -> STR_43(3), STR_41(3), STR_39(3), STR_37(3), 
  9381 ;;		 -> STR_35(3), STR_33(3), STR_31(3), STR_30(15), 
  9382 ;;		 -> STR_29(15), STR_27(3), STR_26(13), STR_25(11), 
  9383 ;;		 -> STR_24(10), STR_23(6), STR_22(6), STR_21(3), 
  9384 ;;		 -> STR_20(4), STR_19(17), STR_17(3), STR_15(5), 
  9385 ;;		 -> STR_13(5), STR_10(9), STR_8(3), STR_6(3), 
  9386 ;;		 -> STR_4(5), STR_1(7), 
  9387 ;; Return value:  Size  Location     Type
  9388 ;;                  2   23[BANK0 ] int 
  9389 ;; Registers used:
  9390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9391 ;; Tracked objects:
  9392 ;;		On entry : 0/0
  9393 ;;		On exit  : 0/0
  9394 ;;		Unchanged: 0/0
  9395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9396 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;Total ram usage:        8 bytes
  9401 ;; Hardware stack levels used:    1
  9402 ;; Hardware stack levels required when called:   11
  9403 ;; This function calls:
  9404 ;;		_vfpfcnvrt
  9405 ;; This function is called by:
  9406 ;;		_printf
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text36
  9411  003B9A                     __ptext36:
  9412                           	opt callstack 0
  9413  003B9A                     _vfprintf:
  9414                           	opt callstack 18
  9415                           
  9416                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  9417                           
  9418                           ;incstack = 0
  9419  003B9A  C099  F060         	movff	vfprintf@fmt,vfprintf@cfmt
  9420  003B9E  C09A  F061         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  9421                           
  9422                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  9423  003BA2  0E00               	movlw	0
  9424  003BA4  0101               	movlb	1	; () banked
  9425  003BA6  6F48               	movwf	(_nout+1)& (0+255),b
  9426  003BA8  0E00               	movlw	0
  9427  003BAA  6F47               	movwf	_nout& (0+255),b
  9428                           
  9429                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9430  003BAC  D013               	goto	l8320
  9431  003BAE                     l8318:
  9432                           
  9433                           ; BSR set to: 1
  9434                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  9435  003BAE  C097  F04C         	movff	vfprintf@fp,vfpfcnvrt@fp
  9436  003BB2  C098  F04D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  9437  003BB6  0E60               	movlw	low vfprintf@cfmt
  9438  003BB8  6E4E               	movwf	vfpfcnvrt@fmt,c
  9439  003BBA  0E00               	movlw	high vfprintf@cfmt
  9440  003BBC  6E4F               	movwf	vfpfcnvrt@fmt+1,c
  9441  003BBE  C09B  F050         	movff	vfprintf@ap,vfpfcnvrt@ap
  9442  003BC2  C09C  F051         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  9443  003BC6  EC09  F000         	call	_vfpfcnvrt	;wreg free
  9444  003BCA  504C               	movf	?_vfpfcnvrt,w,c
  9445  003BCC  0101               	movlb	1	; () banked
  9446  003BCE  2747               	addwf	_nout& (0+255),f,b
  9447  003BD0  504D               	movf	?_vfpfcnvrt+1,w,c
  9448  003BD2  2348               	addwfc	(_nout+1)& (0+255),f,b
  9449  003BD4                     l8320:
  9450                           
  9451                           ; BSR set to: 1
  9452                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9453  003BD4  C060  FFF6         	movff	vfprintf@cfmt,tblptrl
  9454  003BD8  C061  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  9455  003BDC                     	if	0	;tblptru may be non-zero
  9456  003BDC                     	endif
  9457  003BDC                     	if	0	;tblptru may be non-zero
  9458  003BDC                     	endif
  9459  003BDC  0008               	tblrd		*
  9460  003BDE  50F5               	movf	tablat,w,c
  9461  003BE0  0900               	iorlw	0
  9462  003BE2  A4D8               	btfss	status,2,c
  9463  003BE4  D7E4               	goto	l8318
  9464                           
  9465                           ; BSR set to: 1
  9466                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  9467  003BE6  C147  F097         	movff	_nout,?_vfprintf
  9468  003BEA  C148  F098         	movff	_nout+1,?_vfprintf+1
  9469                           
  9470                           ; BSR set to: 1
  9471  003BEE  0012               	return		;funcret
  9472  003BF0                     __end_of_vfprintf:
  9473                           	opt callstack 0
  9474                           
  9475 ;; *************** function _vfpfcnvrt *****************
  9476 ;; Defined at:
  9477 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;  fp              2   75[COMRAM] PTR struct _IO_FILE
  9480 ;;		 -> NULL(0), 
  9481 ;;  fmt             2   77[COMRAM] PTR PTR unsigned char 
  9482 ;;		 -> vfprintf@cfmt(2), 
  9483 ;;  ap              2   79[COMRAM] PTR PTR void 
  9484 ;;		 -> printf@ap(2), 
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  llu             8   15[BANK0 ] unsigned long long 
  9487 ;;  ll              8    6[BANK0 ] long long 
  9488 ;;  f               4    0        long long 
  9489 ;;  vp              3    0        PTR void 
  9490 ;;  ct              3    0        unsigned char [3]
  9491 ;;  done            2    2[BANK0 ] int 
  9492 ;;  cp              2    0[BANK0 ] PTR unsigned char 
  9493 ;;		 -> ?_printf(2), STR_52(16), STR_50(14), STR_48(11), 
  9494 ;;		 -> STR_46(9), STR_44(16), STR_42(13), STR_40(13), 
  9495 ;;		 -> STR_38(9), STR_36(13), STR_34(14), STR_32(10), 
  9496 ;;		 -> STR_28(9), STR_18(14), STR_16(16), STR_14(14), 
  9497 ;;		 -> STR_12(2), STR_11(6), STR_9(16), STR_7(14), 
  9498 ;;		 -> STR_5(15), STR_3(2), STR_2(10), 
  9499 ;;  i               2    0        int 
  9500 ;;  c               1   14[BANK0 ] unsigned char 
  9501 ;; Return value:  Size  Location     Type
  9502 ;;                  2   75[COMRAM] int 
  9503 ;; Registers used:
  9504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9505 ;; Tracked objects:
  9506 ;;		On entry : 0/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9510 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9512 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9513 ;;      Totals:        20      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9514 ;;Total ram usage:       43 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; Hardware stack levels required when called:   10
  9517 ;; This function calls:
  9518 ;;		_atoi
  9519 ;;		_ctoa
  9520 ;;		_dtoa
  9521 ;;		_fputc
  9522 ;;		_isdigit
  9523 ;;		_stoa
  9524 ;;		_strncmp
  9525 ;;		_utoa
  9526 ;;		_xtoa
  9527 ;; This function is called by:
  9528 ;;		_vfprintf
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text37
  9533  000012                     __ptext37:
  9534                           	opt callstack 0
  9535  000012                     _vfpfcnvrt:
  9536                           	opt callstack 18
  9537                           
  9538                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  9539                           
  9540                           ; BSR set to: 1
  9541                           ;incstack = 0
  9542  000012  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9543  000016  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9544  00001A  CFDE FFF6          	movff	postinc2,tblptrl
  9545  00001E  CFDD FFF7          	movff	postdec2,tblptrh
  9546  000022                     	if	0	;tblptru may be non-zero
  9547  000022                     	endif
  9548  000022                     	if	0	;tblptru may be non-zero
  9549  000022                     	endif
  9550  000022  0008               	tblrd		*
  9551  000024  50F5               	movf	tablat,w,c
  9552  000026  0A25               	xorlw	37
  9553  000028  A4D8               	btfss	status,2,c
  9554  00002A  D3DA               	goto	l8080
  9555                           
  9556                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  9557  00002C  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9558  000030  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9559  000034  2ADE               	incf	postinc2,f,c
  9560  000036  0E00               	movlw	0
  9561  000038  22DD               	addwfc	postdec2,f,c
  9562                           
  9563                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  9564  00003A  0E00               	movlw	0
  9565  00003C  0101               	movlb	1	; () banked
  9566  00003E  6F4A               	movwf	(_width+1)& (0+255),b
  9567  000040  0E00               	movlw	0
  9568  000042  6F49               	movwf	_width& (0+255),b
  9569  000044  C149  F0D5         	movff	_width,_flags
  9570  000048  C14A  F0D6         	movff	_width+1,_flags+1
  9571                           
  9572                           ; BSR set to: 1
  9573                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  9574  00004C  0100               	movlb	0	; () banked
  9575  00004E  69D3               	setf	_prec& (0+255),b
  9576  000050  69D4               	setf	(_prec+1)& (0+255),b
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  9580  000052  0E00               	movlw	0
  9581  000054  6F83               	movwf	(vfpfcnvrt@done+1)& (0+255),b
  9582  000056  0E00               	movlw	0
  9583  000058  D014               	goto	L16
  9584  00005A                     l7936:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  9588  00005A  81D5               	bsf	_flags& (0+255),0,b
  9589  00005C                     l7938:
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  9593  00005C  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9594  000060  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9595  000064  2ADE               	incf	postinc2,f,c
  9596  000066  0E00               	movlw	0
  9597  000068  22DD               	addwfc	postdec2,f,c
  9598                           
  9599                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  9600  00006A  D02E               	goto	l7962
  9601  00006C                     l7940:
  9602                           
  9603                           ; BSR set to: 0
  9604                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  9605  00006C  83D5               	bsf	_flags& (0+255),1,b
  9606  00006E  D7F6               	goto	l7938
  9607  000070                     l7944:
  9608                           
  9609                           ; BSR set to: 0
  9610                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  9611  000070  85D5               	bsf	_flags& (0+255),2,b
  9612  000072  D7F4               	goto	l7938
  9613  000074                     l7948:
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  9617  000074  87D5               	bsf	_flags& (0+255),3,b
  9618  000076  D7F2               	goto	l7938
  9619  000078                     l7952:
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  9623  000078  89D5               	bsf	_flags& (0+255),4,b
  9624  00007A  D7F0               	goto	l7938
  9625  00007C                     l7956:
  9626                           
  9627                           ; BSR set to: 0
  9628                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  9629  00007C  0E00               	movlw	0
  9630  00007E  6F83               	movwf	(vfpfcnvrt@done+1)& (0+255),b
  9631  000080  0E01               	movlw	1
  9632  000082                     L16:
  9633  000082  6F82               	movwf	vfpfcnvrt@done& (0+255),b
  9634                           
  9635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  9636  000084  D021               	goto	l7962
  9637  000086                     l7960:
  9638                           
  9639                           ; BSR set to: 0
  9640  000086  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9641  00008A  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9642  00008E  CFDE FFF6          	movff	postinc2,tblptrl
  9643  000092  CFDD FFF7          	movff	postdec2,tblptrh
  9644  000096                     	if	0	;tblptru may be non-zero
  9645  000096                     	endif
  9646  000096                     	if	0	;tblptru may be non-zero
  9647  000096                     	endif
  9648  000096  0008               	tblrd		*
  9649  000098  50F5               	movf	tablat,w,c
  9650  00009A  6E52               	movwf	??_vfpfcnvrt& (0+255),c
  9651  00009C  6A53               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  9652                           
  9653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9654                           ; Switch size 1, requested type "simple"
  9655                           ; Number of cases is 1, Range of values is 0 to 0
  9656                           ; switch strategies available:
  9657                           ; Name         Instructions Cycles
  9658                           ; simple_byte            4     3 (average)
  9659                           ;	Chosen strategy is simple_byte
  9660  00009E  5053               	movf	??_vfpfcnvrt+1,w,c
  9661  0000A0  0A00               	xorlw	0	; case 0
  9662  0000A2  A4D8               	btfss	status,2,c
  9663  0000A4  D7EB               	goto	l7956
  9664                           
  9665                           ; BSR set to: 0
  9666                           ; Switch size 1, requested type "simple"
  9667                           ; Number of cases is 5, Range of values is 32 to 48
  9668                           ; switch strategies available:
  9669                           ; Name         Instructions Cycles
  9670                           ; simple_byte           16     9 (average)
  9671                           ;	Chosen strategy is simple_byte
  9672  0000A6  5052               	movf	??_vfpfcnvrt,w,c
  9673  0000A8  0A20               	xorlw	32	; case 32
  9674  0000AA  B4D8               	btfsc	status,2,c
  9675  0000AC  D7E3               	goto	l7948
  9676  0000AE  0A03               	xorlw	3	; case 35
  9677  0000B0  B4D8               	btfsc	status,2,c
  9678  0000B2  D7E2               	goto	l7952
  9679  0000B4  0A08               	xorlw	8	; case 43
  9680  0000B6  B4D8               	btfsc	status,2,c
  9681  0000B8  D7DB               	goto	l7944
  9682  0000BA  0A06               	xorlw	6	; case 45
  9683  0000BC  B4D8               	btfsc	status,2,c
  9684  0000BE  D7CD               	goto	l7936
  9685  0000C0  0A1D               	xorlw	29	; case 48
  9686  0000C2  B4D8               	btfsc	status,2,c
  9687  0000C4  D7D3               	goto	l7940
  9688  0000C6  D7DA               	goto	l7956
  9689  0000C8                     l7962:
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  9693  0000C8  5182               	movf	vfpfcnvrt@done& (0+255),w,b
  9694  0000CA  1183               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
  9695  0000CC  B4D8               	btfsc	status,2,c
  9696  0000CE  D7DB               	goto	l7960
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  9700  0000D0  B1D5               	btfsc	_flags& (0+255),0,b
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  9704  0000D2  93D5               	bcf	_flags& (0+255),1,b
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  9708  0000D4  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9709  0000D8  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9710  0000DC  CFDE FFF6          	movff	postinc2,tblptrl
  9711  0000E0  CFDD FFF7          	movff	postdec2,tblptrh
  9712  0000E4                     	if	0	;tblptru may be non-zero
  9713  0000E4                     	endif
  9714  0000E4                     	if	0	;tblptru may be non-zero
  9715  0000E4                     	endif
  9716  0000E4  0008               	tblrd		*
  9717  0000E6  50F5               	movf	tablat,w,c
  9718  0000E8  0A2A               	xorlw	42
  9719  0000EA  A4D8               	btfss	status,2,c
  9720  0000EC  D026               	goto	l7974
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  9724  0000EE  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9725  0000F2  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9726  0000F6  2ADE               	incf	postinc2,f,c
  9727  0000F8  0E00               	movlw	0
  9728  0000FA  22DD               	addwfc	postdec2,f,c
  9729                           
  9730                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  9731  0000FC  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9732  000100  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9733  000104  CFDF F052          	movff	indf2,??_vfpfcnvrt
  9734  000108  0E02               	movlw	2
  9735  00010A  26DE               	addwf	postinc2,f,c
  9736  00010C  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
  9737  000110  0E00               	movlw	0
  9738  000112  22DD               	addwfc	postdec2,f,c
  9739  000114  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9740  000118  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9741  00011C  CFDE F149          	movff	postinc2,_width
  9742  000120  CFDD F14A          	movff	postdec2,_width+1
  9743                           
  9744                           ; BSR set to: 0
  9745                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  9746  000124  0101               	movlb	1	; () banked
  9747  000126  AF4A               	btfss	(_width+1)& (0+255),7,b
  9748  000128  D042               	goto	u9350
  9749                           
  9750                           ; BSR set to: 1
  9751                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  9752  00012A  0100               	movlb	0	; () banked
  9753  00012C  81D5               	bsf	_flags& (0+255),0,b
  9754                           
  9755                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  9756  00012E  0101               	movlb	1	; () banked
  9757  000130  6D49               	negf	_width& (0+255),b
  9758  000132  1F4A               	comf	(_width+1)& (0+255),f,b
  9759  000134  B0D8               	btfsc	status,0,c
  9760  000136  2B4A               	incf	(_width+1)& (0+255),f,b
  9761  000138  D03A               	goto	u9350
  9762  00013A                     l7974:
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  9766  00013A  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9767  00013E  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9768  000142  CFDE F00D          	movff	postinc2,atoi@s
  9769  000146  CFDD F00E          	movff	postdec2,atoi@s+1
  9770  00014A  ECDE  F017         	call	_atoi	;wreg free
  9771  00014E  C00D  F149         	movff	?_atoi,_width
  9772  000152  C00E  F14A         	movff	?_atoi+1,_width+1
  9773                           
  9774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  9775  000156  D007               	goto	l7978
  9776  000158                     l7976:
  9777                           
  9778                           ; BSR set to: 0
  9779                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  9780  000158  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9781  00015C  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9782  000160  2ADE               	incf	postinc2,f,c
  9783  000162  0E00               	movlw	0
  9784  000164  22DD               	addwfc	postdec2,f,c
  9785  000166                     l7978:
  9786  000166  0ED0               	movlw	208
  9787  000168  6E52               	movwf	??_vfpfcnvrt& (0+255),c
  9788  00016A  0EFF               	movlw	255
  9789  00016C  6E53               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  9790  00016E  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9791  000172  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9792  000176  CFDE FFF6          	movff	postinc2,tblptrl
  9793  00017A  CFDD FFF7          	movff	postdec2,tblptrh
  9794  00017E                     	if	0	;tblptru may be non-zero
  9795  00017E                     	endif
  9796  00017E                     	if	0	;tblptru may be non-zero
  9797  00017E                     	endif
  9798  00017E  0008               	tblrd		*
  9799  000180  50F5               	movf	tablat,w,c
  9800  000182  6E54               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  9801  000184  6A55               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  9802  000186  5052               	movf	??_vfpfcnvrt,w,c
  9803  000188  2654               	addwf	??_vfpfcnvrt+2,f,c
  9804  00018A  5053               	movf	??_vfpfcnvrt+1,w,c
  9805  00018C  2255               	addwfc	??_vfpfcnvrt+3,f,c
  9806  00018E  5055               	movf	??_vfpfcnvrt+3,w,c
  9807  000190  E106               	bnz	u9330
  9808  000192  0E0A               	movlw	10
  9809  000194  5C54               	subwf	??_vfpfcnvrt+2,w,c
  9810  000196  B0D8               	btfsc	status,0,c
  9811  000198  D002               	goto	u9330
  9812  00019A  0E01               	movlw	1
  9813  00019C  D001               	goto	u9340
  9814  00019E                     u9330:
  9815  00019E  0E00               	movlw	0
  9816  0001A0                     u9340:
  9817  0001A0  0100               	movlb	0	; () banked
  9818  0001A2  6F84               	movwf	_vfpfcnvrt$1385& (0+255),b
  9819  0001A4  6B85               	clrf	(_vfpfcnvrt$1385+1)& (0+255),b
  9820                           
  9821                           ; BSR set to: 0
  9822  0001A6  5184               	movf	_vfpfcnvrt$1385& (0+255),w,b
  9823  0001A8  1185               	iorwf	(_vfpfcnvrt$1385+1)& (0+255),w,b
  9824  0001AA  A4D8               	btfss	status,2,c
  9825  0001AC  D7D5               	goto	l7976
  9826  0001AE                     u9350:
  9827                           
  9828                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  9829  0001AE  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9830  0001B2  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9831  0001B6  CFDE FFF6          	movff	postinc2,tblptrl
  9832  0001BA  CFDD FFF7          	movff	postdec2,tblptrh
  9833  0001BE                     	if	0	;tblptru may be non-zero
  9834  0001BE                     	endif
  9835  0001BE                     	if	0	;tblptru may be non-zero
  9836  0001BE                     	endif
  9837  0001BE  0008               	tblrd		*
  9838  0001C0  50F5               	movf	tablat,w,c
  9839  0001C2  0A63               	xorlw	99
  9840  0001C4  A4D8               	btfss	status,2,c
  9841  0001C6  D027               	goto	l7992
  9842                           
  9843                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  9844  0001C8  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9845  0001CC  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9846  0001D0  2ADE               	incf	postinc2,f,c
  9847  0001D2  0E00               	movlw	0
  9848  0001D4  22DD               	addwfc	postdec2,f,c
  9849                           
  9850                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  9851  0001D6  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9852  0001DA  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9853  0001DE  CFDF F052          	movff	indf2,??_vfpfcnvrt
  9854  0001E2  0E02               	movlw	2
  9855  0001E4  26DE               	addwf	postinc2,f,c
  9856  0001E6  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
  9857  0001EA  0E00               	movlw	0
  9858  0001EC  22DD               	addwfc	postdec2,f,c
  9859  0001EE  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9860  0001F2  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9861  0001F6  50DF               	movf	indf2,w,c
  9862  0001F8  0100               	movlb	0	; () banked
  9863  0001FA  6F8E               	movwf	vfpfcnvrt@c& (0+255),b
  9864                           
  9865                           ; BSR set to: 0
  9866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  9867  0001FC  C04C  F025         	movff	vfpfcnvrt@fp,ctoa@fp
  9868  000200  C04D  F026         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  9869  000204  C08E  F027         	movff	vfpfcnvrt@c,ctoa@c
  9870  000208  ECF8  F01D         	call	_ctoa	;wreg free
  9871  00020C  C025  F04C         	movff	?_ctoa,?_vfpfcnvrt
  9872  000210  C026  F04D         	movff	?_ctoa+1,?_vfpfcnvrt+1
  9873  000214  0012               	return	
  9874  000216                     l7992:
  9875                           
  9876                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  9877  000216  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9878  00021A  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9879  00021E  CFDE FFF6          	movff	postinc2,tblptrl
  9880  000222  CFDD FFF7          	movff	postdec2,tblptrh
  9881  000226                     	if	0	;tblptru may be non-zero
  9882  000226                     	endif
  9883  000226                     	if	0	;tblptru may be non-zero
  9884  000226                     	endif
  9885  000226  0008               	tblrd		*
  9886  000228  50F5               	movf	tablat,w,c
  9887  00022A  0A64               	xorlw	100
  9888  00022C  B4D8               	btfsc	status,2,c
  9889  00022E  D00D               	goto	u9380
  9890  000230  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9891  000234  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9892  000238  CFDE FFF6          	movff	postinc2,tblptrl
  9893  00023C  CFDD FFF7          	movff	postdec2,tblptrh
  9894  000240                     	if	0	;tblptru may be non-zero
  9895  000240                     	endif
  9896  000240                     	if	0	;tblptru may be non-zero
  9897  000240                     	endif
  9898  000240  0008               	tblrd		*
  9899  000242  50F5               	movf	tablat,w,c
  9900  000244  0A69               	xorlw	105
  9901  000246  A4D8               	btfss	status,2,c
  9902  000248  D040               	goto	l8002
  9903  00024A                     u9380:
  9904                           
  9905                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  9906  00024A  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9907  00024E  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9908  000252  2ADE               	incf	postinc2,f,c
  9909  000254  0E00               	movlw	0
  9910  000256  22DD               	addwfc	postdec2,f,c
  9911                           
  9912                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  9913  000258  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9914  00025C  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9915  000260  CFDF F052          	movff	indf2,??_vfpfcnvrt
  9916  000264  0E02               	movlw	2
  9917  000266  26DE               	addwf	postinc2,f,c
  9918  000268  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
  9919  00026C  0E00               	movlw	0
  9920  00026E  22DD               	addwfc	postdec2,f,c
  9921  000270  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9922  000274  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9923  000278  CFDE F086          	movff	postinc2,vfpfcnvrt@ll
  9924  00027C  CFDD F087          	movff	postdec2,vfpfcnvrt@ll+1
  9925  000280  0100               	movlb	0	; () banked
  9926  000282  0E00               	movlw	0
  9927  000284  BF87               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  9928  000286  0EFF               	movlw	-1
  9929  000288  6F88               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  9930  00028A  6F89               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  9931  00028C  6F8A               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  9932  00028E  6F8B               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  9933  000290  6F8C               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  9934  000292  6F8D               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  9935                           
  9936                           ; BSR set to: 0
  9937                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  9938  000294  C04C  F025         	movff	vfpfcnvrt@fp,dtoa@fp
  9939  000298  C04D  F026         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  9940  00029C  C086  F027         	movff	vfpfcnvrt@ll,dtoa@d
  9941  0002A0  C087  F028         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  9942  0002A4  C088  F029         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  9943  0002A8  C089  F02A         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  9944  0002AC  C08A  F02B         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  9945  0002B0  C08B  F02C         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  9946  0002B4  C08C  F02D         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  9947  0002B8  C08D  F02E         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  9948  0002BC  ECE1  F011         	call	_dtoa	;wreg free
  9949  0002C0  C025  F04C         	movff	?_dtoa,?_vfpfcnvrt
  9950  0002C4  C026  F04D         	movff	?_dtoa+1,?_vfpfcnvrt+1
  9951  0002C8  0012               	return	
  9952  0002CA                     l8002:
  9953                           
  9954                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 835:       
      +                            if (!strncmp(*fmt, "ld", ((sizeof("ld")/sizeof("ld"[0]))-1)) || !strncmp(*fmt, "li", (
      +                          (sizeof("li")/sizeof("li"[0]))-1))) {
  9955  0002CA  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9956  0002CE  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9957  0002D2  CFDE F006          	movff	postinc2,strncmp@_l
  9958  0002D6  CFDD F007          	movff	postdec2,strncmp@_l+1
  9959  0002DA  0EF3               	movlw	low STR_57
  9960  0002DC  6E08               	movwf	strncmp@_r,c
  9961  0002DE  0EFF               	movlw	high STR_57
  9962  0002E0  6E09               	movwf	strncmp@_r+1,c
  9963  0002E2  0E00               	movlw	0
  9964  0002E4  6E0B               	movwf	strncmp@n+1,c
  9965  0002E6  0E02               	movlw	2
  9966  0002E8  6E0A               	movwf	strncmp@n,c
  9967  0002EA  ECED  F01A         	call	_strncmp	;wreg free
  9968  0002EE  5006               	movf	?_strncmp,w,c
  9969  0002F0  1007               	iorwf	?_strncmp+1,w,c
  9970  0002F2  B4D8               	btfsc	status,2,c
  9971  0002F4  D016               	goto	u9400
  9972  0002F6  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9973  0002FA  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9974  0002FE  CFDE F006          	movff	postinc2,strncmp@_l
  9975  000302  CFDD F007          	movff	postdec2,strncmp@_l+1
  9976  000306  0EF6               	movlw	low STR_61
  9977  000308  6E08               	movwf	strncmp@_r,c
  9978  00030A  0EFF               	movlw	high STR_61
  9979  00030C  6E09               	movwf	strncmp@_r+1,c
  9980  00030E  0E00               	movlw	0
  9981  000310  6E0B               	movwf	strncmp@n+1,c
  9982  000312  0E02               	movlw	2
  9983  000314  6E0A               	movwf	strncmp@n,c
  9984  000316  ECED  F01A         	call	_strncmp	;wreg free
  9985  00031A  5006               	movf	?_strncmp,w,c
  9986  00031C  1007               	iorwf	?_strncmp+1,w,c
  9987  00031E  A4D8               	btfss	status,2,c
  9988  000320  D05C               	goto	l8012
  9989  000322                     u9400:
  9990                           
  9991                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 836: ;C:\Pr
      +                          ogram Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 838:             
      +                          *fmt += ((sizeof("ld")/sizeof("ld"[0]))-1);
  9992  000322  0E02               	movlw	2
  9993  000324  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9994  000328  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9995  00032C  26DE               	addwf	postinc2,f,c
  9996  00032E  0E00               	movlw	0
  9997  000330  22DD               	addwfc	postdec2,f,c
  9998                           
  9999                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 839:       
      +                                ll = (long long)(*(long *)__va_arg(*(long **)ap, (long)0));
 10000  000332  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 10001  000336  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 10002  00033A  CFDF F052          	movff	indf2,??_vfpfcnvrt
 10003  00033E  0E04               	movlw	4
 10004  000340  26DE               	addwf	postinc2,f,c
 10005  000342  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
 10006  000346  0E00               	movlw	0
 10007  000348  22DD               	addwfc	postdec2,f,c
 10008  00034A  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
 10009  00034E  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 10010  000352  CFDE F054          	movff	postinc2,??_vfpfcnvrt+2
 10011  000356  CFDE F055          	movff	postinc2,??_vfpfcnvrt+3
 10012  00035A  CFDE F056          	movff	postinc2,??_vfpfcnvrt+4
 10013  00035E  CFDE F057          	movff	postinc2,??_vfpfcnvrt+5
 10014  000362  C054  F058         	movff	??_vfpfcnvrt+2,??_vfpfcnvrt+6
 10015  000366  C055  F059         	movff	??_vfpfcnvrt+3,??_vfpfcnvrt+7
 10016  00036A  C056  F05A         	movff	??_vfpfcnvrt+4,??_vfpfcnvrt+8
 10017  00036E  C057  F05B         	movff	??_vfpfcnvrt+5,??_vfpfcnvrt+9
 10018  000372  6A5C               	clrf	(??_vfpfcnvrt+10)& (0+255),c
 10019  000374  BE5B               	btfsc	(??_vfpfcnvrt+9)& (0+255),7,c
 10020  000376  685C               	setf	(??_vfpfcnvrt+10)& (0+255),c
 10021  000378  C05C  F05D         	movff	??_vfpfcnvrt+10,??_vfpfcnvrt+11
 10022  00037C  C05C  F05E         	movff	??_vfpfcnvrt+10,??_vfpfcnvrt+12
 10023  000380  C05C  F05F         	movff	??_vfpfcnvrt+10,??_vfpfcnvrt+13
 10024  000384  C058  F086         	movff	??_vfpfcnvrt+6,vfpfcnvrt@ll
 10025  000388  C059  F087         	movff	??_vfpfcnvrt+7,vfpfcnvrt@ll+1
 10026  00038C  C05A  F088         	movff	??_vfpfcnvrt+8,vfpfcnvrt@ll+2
 10027  000390  C05B  F089         	movff	??_vfpfcnvrt+9,vfpfcnvrt@ll+3
 10028  000394  C05C  F08A         	movff	??_vfpfcnvrt+10,vfpfcnvrt@ll+4
 10029  000398  C05D  F08B         	movff	??_vfpfcnvrt+11,vfpfcnvrt@ll+5
 10030  00039C  C05E  F08C         	movff	??_vfpfcnvrt+12,vfpfcnvrt@ll+6
 10031  0003A0  C05F  F08D         	movff	??_vfpfcnvrt+13,vfpfcnvrt@ll+7
 10032                           
 10033                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 841:       
      +                                return dtoa(fp, ll);
 10034  0003A4  C04C  F025         	movff	vfpfcnvrt@fp,dtoa@fp
 10035  0003A8  C04D  F026         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
 10036  0003AC  C086  F027         	movff	vfpfcnvrt@ll,dtoa@d
 10037  0003B0  C087  F028         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 10038  0003B4  C088  F029         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 10039  0003B8  C089  F02A         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 10040  0003BC  C08A  F02B         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 10041  0003C0  C08B  F02C         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 10042  0003C4  C08C  F02D         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 10043  0003C8  C08D  F02E         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 10044  0003CC  ECE1  F011         	call	_dtoa	;wreg free
 10045  0003D0  C025  F04C         	movff	?_dtoa,?_vfpfcnvrt
 10046  0003D4  C026  F04D         	movff	?_dtoa+1,?_vfpfcnvrt+1
 10047  0003D8  0012               	return	
 10048  0003DA                     l8012:
 10049                           
 10050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
 10051  0003DA  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10052  0003DE  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10053  0003E2  CFDE FFF6          	movff	postinc2,tblptrl
 10054  0003E6  CFDD FFF7          	movff	postdec2,tblptrh
 10055  0003EA                     	if	0	;tblptru may be non-zero
 10056  0003EA                     	endif
 10057  0003EA                     	if	0	;tblptru may be non-zero
 10058  0003EA                     	endif
 10059  0003EA  0008               	tblrd		*
 10060  0003EC  50F5               	movf	tablat,w,c
 10061  0003EE  0A73               	xorlw	115
 10062  0003F0  A4D8               	btfss	status,2,c
 10063  0003F2  D02A               	goto	l8020
 10064                           
 10065                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
 10066  0003F4  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10067  0003F8  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10068  0003FC  2ADE               	incf	postinc2,f,c
 10069  0003FE  0E00               	movlw	0
 10070  000400  22DD               	addwfc	postdec2,f,c
 10071                           
 10072                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
 10073  000402  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 10074  000406  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 10075  00040A  CFDF F052          	movff	indf2,??_vfpfcnvrt
 10076  00040E  0E02               	movlw	2
 10077  000410  26DE               	addwf	postinc2,f,c
 10078  000412  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
 10079  000416  0E00               	movlw	0
 10080  000418  22DD               	addwfc	postdec2,f,c
 10081  00041A  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
 10082  00041E  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 10083  000422  CFDE F080          	movff	postinc2,vfpfcnvrt@cp
 10084  000426  CFDD F081          	movff	postdec2,vfpfcnvrt@cp+1
 10085                           
 10086                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
 10087  00042A  C04C  F013         	movff	vfpfcnvrt@fp,stoa@fp
 10088  00042E  C04D  F014         	movff	vfpfcnvrt@fp+1,stoa@fp+1
 10089  000432  C080  F015         	movff	vfpfcnvrt@cp,stoa@s
 10090  000436  C081  F016         	movff	vfpfcnvrt@cp+1,stoa@s+1
 10091  00043A  EC9C  F016         	call	_stoa	;wreg free
 10092  00043E  C013  F04C         	movff	?_stoa,?_vfpfcnvrt
 10093  000442  C014  F04D         	movff	?_stoa+1,?_vfpfcnvrt+1
 10094  000446  0012               	return	
 10095  000448                     l8020:
 10096                           
 10097                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
 10098  000448  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10099  00044C  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10100  000450  CFDE FFF6          	movff	postinc2,tblptrl
 10101  000454  CFDD FFF7          	movff	postdec2,tblptrh
 10102  000458                     	if	0	;tblptru may be non-zero
 10103  000458                     	endif
 10104  000458                     	if	0	;tblptru may be non-zero
 10105  000458                     	endif
 10106  000458  0008               	tblrd		*
 10107  00045A  50F5               	movf	tablat,w,c
 10108  00045C  0A75               	xorlw	117
 10109  00045E  A4D8               	btfss	status,2,c
 10110  000460  D041               	goto	l8028
 10111                           
 10112                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
 10113  000462  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10114  000466  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10115  00046A  2ADE               	incf	postinc2,f,c
 10116  00046C  0E00               	movlw	0
 10117  00046E  22DD               	addwfc	postdec2,f,c
 10118                           
 10119                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
 10120  000470  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 10121  000474  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 10122  000478  CFDF F052          	movff	indf2,??_vfpfcnvrt
 10123  00047C  0E02               	movlw	2
 10124  00047E  26DE               	addwf	postinc2,f,c
 10125  000480  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
 10126  000484  0E00               	movlw	0
 10127  000486  22DD               	addwfc	postdec2,f,c
 10128  000488  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
 10129  00048C  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 10130  000490  CFDE F054          	movff	postinc2,??_vfpfcnvrt+2
 10131  000494  CFDD F055          	movff	postdec2,??_vfpfcnvrt+3
 10132  000498  C054  F08F         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
 10133  00049C  C055  F090         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
 10134  0004A0  0100               	movlb	0	; () banked
 10135  0004A2  6B91               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
 10136  0004A4  6B92               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
 10137  0004A6  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 10138  0004A8  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 10139  0004AA  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 10140  0004AC  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 10141                           
 10142                           ; BSR set to: 0
 10143                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
 10144  0004AE  C04C  F025         	movff	vfpfcnvrt@fp,utoa@fp
 10145  0004B2  C04D  F026         	movff	vfpfcnvrt@fp+1,utoa@fp+1
 10146  0004B6  C08F  F027         	movff	vfpfcnvrt@llu,utoa@d
 10147  0004BA  C090  F028         	movff	vfpfcnvrt@llu+1,utoa@d+1
 10148  0004BE  C091  F029         	movff	vfpfcnvrt@llu+2,utoa@d+2
 10149  0004C2  C092  F02A         	movff	vfpfcnvrt@llu+3,utoa@d+3
 10150  0004C6  C093  F02B         	movff	vfpfcnvrt@llu+4,utoa@d+4
 10151  0004CA  C094  F02C         	movff	vfpfcnvrt@llu+5,utoa@d+5
 10152  0004CE  C095  F02D         	movff	vfpfcnvrt@llu+6,utoa@d+6
 10153  0004D2  C096  F02E         	movff	vfpfcnvrt@llu+7,utoa@d+7
 10154  0004D6  EC1F  F015         	call	_utoa	;wreg free
 10155  0004DA  C025  F04C         	movff	?_utoa,?_vfpfcnvrt
 10156  0004DE  C026  F04D         	movff	?_utoa+1,?_vfpfcnvrt+1
 10157  0004E2  0012               	return	
 10158  0004E4                     l8028:
 10159                           
 10160                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1192:      
      +                             if (!strncmp(*fmt, "lu", ((sizeof("lu")/sizeof("lu"[0]))-1))) {
 10161  0004E4  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10162  0004E8  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10163  0004EC  CFDE F006          	movff	postinc2,strncmp@_l
 10164  0004F0  CFDD F007          	movff	postdec2,strncmp@_l+1
 10165  0004F4  0EED               	movlw	low (STR_20+1)
 10166  0004F6  6E08               	movwf	strncmp@_r,c
 10167  0004F8  0EFF               	movlw	high (STR_20+1)
 10168  0004FA  6E09               	movwf	strncmp@_r+1,c
 10169  0004FC  0E00               	movlw	0
 10170  0004FE  6E0B               	movwf	strncmp@n+1,c
 10171  000500  0E02               	movlw	2
 10172  000502  6E0A               	movwf	strncmp@n,c
 10173  000504  ECED  F01A         	call	_strncmp	;wreg free
 10174  000508  5006               	movf	?_strncmp,w,c
 10175  00050A  1007               	iorwf	?_strncmp+1,w,c
 10176  00050C  A4D8               	btfss	status,2,c
 10177  00050E  D048               	goto	l8036
 10178                           
 10179                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1194:      
      +                                 *fmt += ((sizeof("lu")/sizeof("lu"[0]))-1);
 10180  000510  0E02               	movlw	2
 10181  000512  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10182  000516  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10183  00051A  26DE               	addwf	postinc2,f,c
 10184  00051C  0E00               	movlw	0
 10185  00051E  22DD               	addwfc	postdec2,f,c
 10186                           
 10187                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1195:      
      +                                 llu = (unsigned long long)(*(unsigned long *)__va_arg(*(unsigned long **)ap, (uns
      +                          igned long)0));
 10188  000520  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 10189  000524  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 10190  000528  CFDF F052          	movff	indf2,??_vfpfcnvrt
 10191  00052C  0E04               	movlw	4
 10192  00052E  26DE               	addwf	postinc2,f,c
 10193  000530  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
 10194  000534  0E00               	movlw	0
 10195  000536  22DD               	addwfc	postdec2,f,c
 10196  000538  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
 10197  00053C  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 10198  000540  CFDE F054          	movff	postinc2,??_vfpfcnvrt+2
 10199  000544  CFDE F055          	movff	postinc2,??_vfpfcnvrt+3
 10200  000548  CFDE F056          	movff	postinc2,??_vfpfcnvrt+4
 10201  00054C  CFDE F057          	movff	postinc2,??_vfpfcnvrt+5
 10202  000550  5054               	movf	??_vfpfcnvrt+2,w,c
 10203  000552  0100               	movlb	0	; () banked
 10204  000554  6F8F               	movwf	vfpfcnvrt@llu& (0+255),b
 10205  000556  5055               	movf	??_vfpfcnvrt+3,w,c
 10206  000558  6F90               	movwf	(vfpfcnvrt@llu+1)& (0+255),b
 10207  00055A  5056               	movf	??_vfpfcnvrt+4,w,c
 10208  00055C  6F91               	movwf	(vfpfcnvrt@llu+2)& (0+255),b
 10209  00055E  5057               	movf	??_vfpfcnvrt+5,w,c
 10210  000560  6F92               	movwf	(vfpfcnvrt@llu+3)& (0+255),b
 10211  000562  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 10212  000564  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 10213  000566  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 10214  000568  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1197:      
      +                                 return utoa(fp, llu);
 10218  00056A  C04C  F025         	movff	vfpfcnvrt@fp,utoa@fp
 10219  00056E  C04D  F026         	movff	vfpfcnvrt@fp+1,utoa@fp+1
 10220  000572  C08F  F027         	movff	vfpfcnvrt@llu,utoa@d
 10221  000576  C090  F028         	movff	vfpfcnvrt@llu+1,utoa@d+1
 10222  00057A  C091  F029         	movff	vfpfcnvrt@llu+2,utoa@d+2
 10223  00057E  C092  F02A         	movff	vfpfcnvrt@llu+3,utoa@d+3
 10224  000582  C093  F02B         	movff	vfpfcnvrt@llu+4,utoa@d+4
 10225  000586  C094  F02C         	movff	vfpfcnvrt@llu+5,utoa@d+5
 10226  00058A  C095  F02D         	movff	vfpfcnvrt@llu+6,utoa@d+6
 10227  00058E  C096  F02E         	movff	vfpfcnvrt@llu+7,utoa@d+7
 10228  000592  EC1F  F015         	call	_utoa	;wreg free
 10229  000596  C025  F04C         	movff	?_utoa,?_vfpfcnvrt
 10230  00059A  C026  F04D         	movff	?_utoa+1,?_vfpfcnvrt+1
 10231  00059E  0012               	return	
 10232  0005A0                     l8036:
 10233                           
 10234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1274:      
      +                             if ((*fmt[0] == 'x') || (*fmt[0] == 'X')) {
 10235  0005A0  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10236  0005A4  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10237  0005A8  CFDE FFF6          	movff	postinc2,tblptrl
 10238  0005AC  CFDD FFF7          	movff	postdec2,tblptrh
 10239  0005B0                     	if	0	;tblptru may be non-zero
 10240  0005B0                     	endif
 10241  0005B0                     	if	0	;tblptru may be non-zero
 10242  0005B0                     	endif
 10243  0005B0  0008               	tblrd		*
 10244  0005B2  50F5               	movf	tablat,w,c
 10245  0005B4  0A78               	xorlw	120
 10246  0005B6  B4D8               	btfsc	status,2,c
 10247  0005B8  D00D               	goto	u9450
 10248  0005BA  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10249  0005BE  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10250  0005C2  CFDE FFF6          	movff	postinc2,tblptrl
 10251  0005C6  CFDD FFF7          	movff	postdec2,tblptrh
 10252  0005CA                     	if	0	;tblptru may be non-zero
 10253  0005CA                     	endif
 10254  0005CA                     	if	0	;tblptru may be non-zero
 10255  0005CA                     	endif
 10256  0005CA  0008               	tblrd		*
 10257  0005CC  50F5               	movf	tablat,w,c
 10258  0005CE  0A58               	xorlw	88
 10259  0005D0  A4D8               	btfss	status,2,c
 10260  0005D2  D04E               	goto	l8050
 10261  0005D4                     u9450:
 10262                           
 10263                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1276:      
      +                                 c = (*fmt)[0];
 10264  0005D4  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10265  0005D8  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10266  0005DC  CFDE FFF6          	movff	postinc2,tblptrl
 10267  0005E0  CFDD FFF7          	movff	postdec2,tblptrh
 10268  0005E4                     	if	0	;tblptru may be non-zero
 10269  0005E4                     	endif
 10270  0005E4                     	if	0	;tblptru may be non-zero
 10271  0005E4                     	endif
 10272  0005E4  0008               	tblrd		*
 10273  0005E6  CFF5 F08E          	movff	tablat,vfpfcnvrt@c
 10274                           
 10275                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1277:      
      +                                 ++*fmt;
 10276  0005EA  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10277  0005EE  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10278  0005F2  2ADE               	incf	postinc2,f,c
 10279  0005F4  0E00               	movlw	0
 10280  0005F6  22DD               	addwfc	postdec2,f,c
 10281                           
 10282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1278:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
 10283  0005F8  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 10284  0005FC  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 10285  000600  CFDF F052          	movff	indf2,??_vfpfcnvrt
 10286  000604  0E02               	movlw	2
 10287  000606  26DE               	addwf	postinc2,f,c
 10288  000608  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
 10289  00060C  0E00               	movlw	0
 10290  00060E  22DD               	addwfc	postdec2,f,c
 10291  000610  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
 10292  000614  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 10293  000618  CFDE F054          	movff	postinc2,??_vfpfcnvrt+2
 10294  00061C  CFDD F055          	movff	postdec2,??_vfpfcnvrt+3
 10295  000620  C054  F08F         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
 10296  000624  C055  F090         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
 10297  000628  0100               	movlb	0	; () banked
 10298  00062A  6B91               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
 10299  00062C  6B92               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
 10300  00062E  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 10301  000630  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 10302  000632  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 10303  000634  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1280:      
      +                                 return xtoa(fp, llu, c);
 10307  000636  C04C  F025         	movff	vfpfcnvrt@fp,xtoa@fp
 10308  00063A  C04D  F026         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
 10309  00063E  C08F  F027         	movff	vfpfcnvrt@llu,xtoa@d
 10310  000642  C090  F028         	movff	vfpfcnvrt@llu+1,xtoa@d+1
 10311  000646  C091  F029         	movff	vfpfcnvrt@llu+2,xtoa@d+2
 10312  00064A  C092  F02A         	movff	vfpfcnvrt@llu+3,xtoa@d+3
 10313  00064E  C093  F02B         	movff	vfpfcnvrt@llu+4,xtoa@d+4
 10314  000652  C094  F02C         	movff	vfpfcnvrt@llu+5,xtoa@d+5
 10315  000656  C095  F02D         	movff	vfpfcnvrt@llu+6,xtoa@d+6
 10316  00065A  C096  F02E         	movff	vfpfcnvrt@llu+7,xtoa@d+7
 10317  00065E  C08E  F02F         	movff	vfpfcnvrt@c,xtoa@x
 10318  000662  EC05  F013         	call	_xtoa	;wreg free
 10319  000666  C025  F04C         	movff	?_xtoa,?_vfpfcnvrt
 10320  00066A  C026  F04D         	movff	?_xtoa+1,?_vfpfcnvrt+1
 10321  00066E  0012               	return	
 10322  000670                     l8050:
 10323                           
 10324                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1285:      
      +                             if (!strncmp(*fmt, "lx", ((sizeof("lx")/sizeof("lx"[0]))-1)) || !strncmp(*fmt, "lX", 
      +                          ((sizeof("lX")/sizeof("lX"[0]))-1))) {
 10325  000670  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10326  000674  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10327  000678  CFDE F006          	movff	postinc2,strncmp@_l
 10328  00067C  CFDD F007          	movff	postdec2,strncmp@_l+1
 10329  000680  0EF9               	movlw	low STR_71
 10330  000682  6E08               	movwf	strncmp@_r,c
 10331  000684  0EFF               	movlw	high STR_71
 10332  000686  6E09               	movwf	strncmp@_r+1,c
 10333  000688  0E00               	movlw	0
 10334  00068A  6E0B               	movwf	strncmp@n+1,c
 10335  00068C  0E02               	movlw	2
 10336  00068E  6E0A               	movwf	strncmp@n,c
 10337  000690  ECED  F01A         	call	_strncmp	;wreg free
 10338  000694  5006               	movf	?_strncmp,w,c
 10339  000696  1007               	iorwf	?_strncmp+1,w,c
 10340  000698  B4D8               	btfsc	status,2,c
 10341  00069A  D016               	goto	u9470
 10342  00069C  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10343  0006A0  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10344  0006A4  CFDE F006          	movff	postinc2,strncmp@_l
 10345  0006A8  CFDD F007          	movff	postdec2,strncmp@_l+1
 10346  0006AC  0EF0               	movlw	low STR_75
 10347  0006AE  6E08               	movwf	strncmp@_r,c
 10348  0006B0  0EFF               	movlw	high STR_75
 10349  0006B2  6E09               	movwf	strncmp@_r+1,c
 10350  0006B4  0E00               	movlw	0
 10351  0006B6  6E0B               	movwf	strncmp@n+1,c
 10352  0006B8  0E02               	movlw	2
 10353  0006BA  6E0A               	movwf	strncmp@n,c
 10354  0006BC  ECED  F01A         	call	_strncmp	;wreg free
 10355  0006C0  5006               	movf	?_strncmp,w,c
 10356  0006C2  1007               	iorwf	?_strncmp+1,w,c
 10357  0006C4  A4D8               	btfss	status,2,c
 10358  0006C6  D05D               	goto	l8064
 10359  0006C8                     u9470:
 10360                           
 10361                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1286: ;C:\P
      +                          rogram Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1288:           
      +                            c = (*fmt)[1];
 10362  0006C8  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10363  0006CC  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10364  0006D0  CFDE F052          	movff	postinc2,??_vfpfcnvrt
 10365  0006D4  CFDD F053          	movff	postdec2,??_vfpfcnvrt+1
 10366  0006D8  0E01               	movlw	1
 10367  0006DA  2652               	addwf	??_vfpfcnvrt,f,c
 10368  0006DC  0E00               	movlw	0
 10369  0006DE  2253               	addwfc	??_vfpfcnvrt+1,f,c
 10370  0006E0  C052  FFF6         	movff	??_vfpfcnvrt,tblptrl
 10371  0006E4  C053  FFF7         	movff	??_vfpfcnvrt+1,tblptrh
 10372  0006E8                     	if	0	;tblptru may be non-zero
 10373  0006E8                     	endif
 10374  0006E8                     	if	0	;tblptru may be non-zero
 10375  0006E8                     	endif
 10376  0006E8  0008               	tblrd		*
 10377  0006EA  CFF5 F08E          	movff	tablat,vfpfcnvrt@c
 10378                           
 10379                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1289:      
      +                                 *fmt += ((sizeof("lx")/sizeof("lx"[0]))-1);
 10380  0006EE  0E02               	movlw	2
 10381  0006F0  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10382  0006F4  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10383  0006F8  26DE               	addwf	postinc2,f,c
 10384  0006FA  0E00               	movlw	0
 10385  0006FC  22DD               	addwfc	postdec2,f,c
 10386                           
 10387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1290:      
      +                                 llu = (unsigned long long)(*(unsigned long *)__va_arg(*(unsigned long **)ap, (uns
      +                          igned long)0));
 10388  0006FE  C050  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 10389  000702  C051  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 10390  000706  CFDF F052          	movff	indf2,??_vfpfcnvrt
 10391  00070A  0E04               	movlw	4
 10392  00070C  26DE               	addwf	postinc2,f,c
 10393  00070E  CFDF F053          	movff	indf2,??_vfpfcnvrt+1
 10394  000712  0E00               	movlw	0
 10395  000714  22DD               	addwfc	postdec2,f,c
 10396  000716  C052  FFD9         	movff	??_vfpfcnvrt,fsr2l
 10397  00071A  C053  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 10398  00071E  CFDE F054          	movff	postinc2,??_vfpfcnvrt+2
 10399  000722  CFDE F055          	movff	postinc2,??_vfpfcnvrt+3
 10400  000726  CFDE F056          	movff	postinc2,??_vfpfcnvrt+4
 10401  00072A  CFDE F057          	movff	postinc2,??_vfpfcnvrt+5
 10402  00072E  5054               	movf	??_vfpfcnvrt+2,w,c
 10403  000730  0100               	movlb	0	; () banked
 10404  000732  6F8F               	movwf	vfpfcnvrt@llu& (0+255),b
 10405  000734  5055               	movf	??_vfpfcnvrt+3,w,c
 10406  000736  6F90               	movwf	(vfpfcnvrt@llu+1)& (0+255),b
 10407  000738  5056               	movf	??_vfpfcnvrt+4,w,c
 10408  00073A  6F91               	movwf	(vfpfcnvrt@llu+2)& (0+255),b
 10409  00073C  5057               	movf	??_vfpfcnvrt+5,w,c
 10410  00073E  6F92               	movwf	(vfpfcnvrt@llu+3)& (0+255),b
 10411  000740  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 10412  000742  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 10413  000744  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 10414  000746  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 10415                           
 10416                           ; BSR set to: 0
 10417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1292:      
      +                                 return xtoa(fp, llu, c);
 10418  000748  C04C  F025         	movff	vfpfcnvrt@fp,xtoa@fp
 10419  00074C  C04D  F026         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
 10420  000750  C08F  F027         	movff	vfpfcnvrt@llu,xtoa@d
 10421  000754  C090  F028         	movff	vfpfcnvrt@llu+1,xtoa@d+1
 10422  000758  C091  F029         	movff	vfpfcnvrt@llu+2,xtoa@d+2
 10423  00075C  C092  F02A         	movff	vfpfcnvrt@llu+3,xtoa@d+3
 10424  000760  C093  F02B         	movff	vfpfcnvrt@llu+4,xtoa@d+4
 10425  000764  C094  F02C         	movff	vfpfcnvrt@llu+5,xtoa@d+5
 10426  000768  C095  F02D         	movff	vfpfcnvrt@llu+6,xtoa@d+6
 10427  00076C  C096  F02E         	movff	vfpfcnvrt@llu+7,xtoa@d+7
 10428  000770  C08E  F02F         	movff	vfpfcnvrt@c,xtoa@x
 10429  000774  EC05  F013         	call	_xtoa	;wreg free
 10430  000778  C025  F04C         	movff	?_xtoa,?_vfpfcnvrt
 10431  00077C  C026  F04D         	movff	?_xtoa+1,?_vfpfcnvrt+1
 10432  000780  0012               	return	
 10433  000782                     l8064:
 10434                           
 10435                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 10436  000782  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10437  000786  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10438  00078A  CFDE FFF6          	movff	postinc2,tblptrl
 10439  00078E  CFDD FFF7          	movff	postdec2,tblptrh
 10440  000792                     	if	0	;tblptru may be non-zero
 10441  000792                     	endif
 10442  000792                     	if	0	;tblptru may be non-zero
 10443  000792                     	endif
 10444  000792  0008               	tblrd		*
 10445  000794  50F5               	movf	tablat,w,c
 10446  000796  0A25               	xorlw	37
 10447  000798  A4D8               	btfss	status,2,c
 10448  00079A  D016               	goto	l8074
 10449                           
 10450                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 10451  00079C  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10452  0007A0  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10453  0007A4  2ADE               	incf	postinc2,f,c
 10454  0007A6  0E00               	movlw	0
 10455  0007A8  22DD               	addwfc	postdec2,f,c
 10456                           
 10457                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 10458  0007AA  0E00               	movlw	0
 10459  0007AC  6E0B               	movwf	fputc@c+1,c
 10460  0007AE  0E25               	movlw	37
 10461  0007B0  6E0A               	movwf	fputc@c,c
 10462  0007B2  C04C  F00C         	movff	vfpfcnvrt@fp,fputc@fp
 10463  0007B6  C04D  F00D         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 10464  0007BA  ECCF  F01C         	call	_fputc	;wreg free
 10465  0007BE                     l8070:
 10466                           
 10467                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 10468  0007BE  0E00               	movlw	0
 10469  0007C0  6E4D               	movwf	?_vfpfcnvrt+1,c
 10470  0007C2  0E01               	movlw	1
 10471  0007C4  6E4C               	movwf	?_vfpfcnvrt,c
 10472  0007C6  0012               	return	
 10473  0007C8                     l8074:
 10474                           
 10475                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 10476  0007C8  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10477  0007CC  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10478  0007D0  2ADE               	incf	postinc2,f,c
 10479  0007D2  0E00               	movlw	0
 10480  0007D4  22DD               	addwfc	postdec2,f,c
 10481                           
 10482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 10483  0007D6  0E00               	movlw	0
 10484  0007D8  6E4D               	movwf	?_vfpfcnvrt+1,c
 10485  0007DA  0E00               	movlw	0
 10486  0007DC  6E4C               	movwf	?_vfpfcnvrt,c
 10487  0007DE  0012               	return	
 10488  0007E0                     l8080:
 10489                           
 10490                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 10491  0007E0  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10492  0007E4  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10493  0007E8  CFDE FFF6          	movff	postinc2,tblptrl
 10494  0007EC  CFDD FFF7          	movff	postdec2,tblptrh
 10495  0007F0                     	if	0	;tblptru may be non-zero
 10496  0007F0                     	endif
 10497  0007F0                     	if	0	;tblptru may be non-zero
 10498  0007F0                     	endif
 10499  0007F0  0008               	tblrd		*
 10500  0007F2  50F5               	movf	tablat,w,c
 10501  0007F4  6E0A               	movwf	fputc@c,c
 10502  0007F6  6A0B               	clrf	fputc@c+1,c
 10503  0007F8  C04C  F00C         	movff	vfpfcnvrt@fp,fputc@fp
 10504  0007FC  C04D  F00D         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 10505  000800  ECCF  F01C         	call	_fputc	;wreg free
 10506                           
 10507                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 10508  000804  C04E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10509  000808  C04F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10510  00080C  2ADE               	incf	postinc2,f,c
 10511  00080E  0E00               	movlw	0
 10512  000810  22DD               	addwfc	postdec2,f,c
 10513  000812  D7D5               	goto	l8070
 10514  000814                     __end_of_vfpfcnvrt:
 10515                           	opt callstack 0
 10516                           
 10517 ;; *************** function _xtoa *****************
 10518 ;; Defined at:
 10519 ;;		line 623 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
 10522 ;;		 -> NULL(0), 
 10523 ;;  d               8   38[COMRAM] unsigned long long 
 10524 ;;  x               1   46[COMRAM] unsigned char 
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;  n               8   63[COMRAM] unsigned long long 
 10527 ;;  c               2   73[COMRAM] int 
 10528 ;;  i               2   71[COMRAM] int 
 10529 ;;  w               2   61[COMRAM] int 
 10530 ;;  p               2   59[COMRAM] int 
 10531 ;; Return value:  Size  Location     Type
 10532 ;;                  2   36[COMRAM] int 
 10533 ;; Registers used:
 10534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10540 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;Total ram usage:       39 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    9
 10547 ;; This function calls:
 10548 ;;		_isalpha
 10549 ;;		_isupper
 10550 ;;		_pad
 10551 ;;		_toupper
 10552 ;; This function is called by:
 10553 ;;		_vfpfcnvrt
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           	psect	text38
 10558  00260A                     __ptext38:
 10559                           	opt callstack 0
 10560  00260A                     _xtoa:
 10561                           	opt callstack 18
 10562                           
 10563                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 623: static
      +                           int xtoa(FILE *fp, unsigned long long d, char x);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 624: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 625:     int c, i, p, w;;C:\Program Files (x86)\Microch
      +                          ip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 626:     unsigned long long n;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 629:     if (!(prec < 0
      +                          )) {
 10564                           
 10565                           ;incstack = 0
 10566  00260A  0100               	movlb	0	; () banked
 10567  00260C  AFD4               	btfss	(_prec+1)& (0+255),7,b
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 630:       
      +                            flags &= ~(1 << 1);
 10571  00260E  93D5               	bcf	_flags& (0+255),1,b
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 632:     p 
      +                          = (0 < prec) ? prec : 1;
 10575  002610  BFD4               	btfsc	(_prec+1)& (0+255),7,b
 10576  002612  D005               	goto	u8280
 10577  002614  51D4               	movf	(_prec+1)& (0+255),w,b
 10578  002616  E108               	bnz	l651
 10579  002618  05D3               	decf	_prec& (0+255),w,b
 10580  00261A  B0D8               	btfsc	status,0,c
 10581  00261C  D005               	goto	l651
 10582  00261E                     u8280:
 10583                           
 10584                           ; BSR set to: 0
 10585  00261E  0E00               	movlw	0
 10586  002620  6E3D               	movwf	xtoa@p+1,c
 10587  002622  0E01               	movlw	1
 10588  002624  6E3C               	movwf	xtoa@p,c
 10589  002626  D004               	goto	l653
 10590  002628                     l651:
 10591                           
 10592                           ; BSR set to: 0
 10593  002628  C0D3  F03C         	movff	_prec,xtoa@p
 10594  00262C  C0D4  F03D         	movff	_prec+1,xtoa@p+1
 10595  002630                     l653:
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 633:     w 
      +                          = width;
 10599  002630  C149  F03E         	movff	_width,xtoa@w
 10600  002634  C14A  F03F         	movff	_width+1,xtoa@w+1
 10601                           
 10602                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 634:     if
      +                           (flags & (1 << 4)) {
 10603  002638  A9D5               	btfss	_flags& (0+255),4,b
 10604  00263A  D004               	goto	l7402
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 635:       
      +                            w -= 2;
 10608  00263C  0EFE               	movlw	254
 10609  00263E  263E               	addwf	xtoa@w,f,c
 10610  002640  0EFF               	movlw	255
 10611  002642  223F               	addwfc	xtoa@w+1,f,c
 10612  002644                     l7402:
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 639:     n 
      +                          = d;
 10616  002644  C027  F040         	movff	xtoa@d,xtoa@n
 10617  002648  C028  F041         	movff	xtoa@d+1,xtoa@n+1
 10618  00264C  C029  F042         	movff	xtoa@d+2,xtoa@n+2
 10619  002650  C02A  F043         	movff	xtoa@d+3,xtoa@n+3
 10620  002654  C02B  F044         	movff	xtoa@d+4,xtoa@n+4
 10621  002658  C02C  F045         	movff	xtoa@d+5,xtoa@n+5
 10622  00265C  C02D  F046         	movff	xtoa@d+6,xtoa@n+6
 10623  002660  C02E  F047         	movff	xtoa@d+7,xtoa@n+7
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 640:     i 
      +                          = sizeof(dbuf) - 1;
 10627  002664  0E00               	movlw	0
 10628  002666  6E49               	movwf	xtoa@i+1,c
 10629  002668  0E1F               	movlw	31
 10630  00266A  6E48               	movwf	xtoa@i,c
 10631                           
 10632                           ; BSR set to: 0
 10633                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 641:     db
      +                          uf[i] = '\0';
 10634  00266C  0E00               	movlw	0
 10635  00266E  0101               	movlb	1	; () banked
 10636  002670  6F6F               	movwf	(_dbuf+31)& (0+255),b
 10637                           
 10638                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10639  002672  D093               	goto	l7438
 10640  002674                     l7408:
 10641                           
 10642                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 643:       
      +                            --i;
 10643  002674  0648               	decf	xtoa@i,f,c
 10644  002676  A0D8               	btfss	status,0,c
 10645  002678  0649               	decf	xtoa@i+1,f,c
 10646                           
 10647                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 644:       
      +                            c = n & 0x0f;
 10648  00267A  0E0F               	movlw	15
 10649  00267C  1440               	andwf	xtoa@n,w,c
 10650  00267E  6E4A               	movwf	xtoa@c,c
 10651  002680  6A4B               	clrf	xtoa@c+1,c
 10652                           
 10653                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 645:       
      +                            c = (c < 10) ? '0' + c : 'a' + (c - 10);
 10654  002682  BE4B               	btfsc	xtoa@c+1,7,c
 10655  002684  D008               	goto	l7416
 10656  002686  504B               	movf	xtoa@c+1,w,c
 10657  002688  E104               	bnz	u8300
 10658  00268A  0E0A               	movlw	10
 10659  00268C  5C4A               	subwf	xtoa@c,w,c
 10660  00268E  A0D8               	btfss	status,0,c
 10661  002690  D002               	goto	l7416
 10662  002692                     u8300:
 10663  002692  0E57               	movlw	87
 10664  002694  D001               	goto	L17
 10665  002696                     l7416:
 10666  002696  0E30               	movlw	48
 10667  002698                     L17:
 10668  002698  244A               	addwf	xtoa@c,w,c
 10669  00269A  6E4A               	movwf	xtoa@c,c
 10670  00269C  0E00               	movlw	0
 10671  00269E  204B               	addwfc	xtoa@c+1,w,c
 10672  0026A0  6E4B               	movwf	xtoa@c+1,c
 10673                           
 10674                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 646:       
      +                            if ((0 ? isupper((int)x) : ((unsigned)((int)x)-'A') < 26) && (0 ? isalpha(c) : (((unsi
      +                          gned)(c)|32)-'a') < 26)) {
 10675  0026A2  0EBF               	movlw	191
 10676  0026A4  6E30               	movwf	??_xtoa& (0+255),c
 10677  0026A6  0EFF               	movlw	255
 10678  0026A8  6E31               	movwf	(??_xtoa+1)& (0+255),c
 10679  0026AA  502F               	movf	xtoa@x,w,c
 10680  0026AC  6E32               	movwf	(??_xtoa+2)& (0+255),c
 10681  0026AE  6A33               	clrf	(??_xtoa+3)& (0+255),c
 10682  0026B0  5030               	movf	??_xtoa,w,c
 10683  0026B2  2632               	addwf	??_xtoa+2,f,c
 10684  0026B4  5031               	movf	??_xtoa+1,w,c
 10685  0026B6  2233               	addwfc	??_xtoa+3,f,c
 10686  0026B8  5033               	movf	??_xtoa+3,w,c
 10687  0026BA  E106               	bnz	u8310
 10688  0026BC  0E1A               	movlw	26
 10689  0026BE  5C32               	subwf	??_xtoa+2,w,c
 10690  0026C0  B0D8               	btfsc	status,0,c
 10691  0026C2  D002               	goto	u8310
 10692  0026C4  0E01               	movlw	1
 10693  0026C6  D001               	goto	u8320
 10694  0026C8                     u8310:
 10695  0026C8  0E00               	movlw	0
 10696  0026CA                     u8320:
 10697  0026CA  6E38               	movwf	_xtoa$1370,c
 10698  0026CC  6A39               	clrf	_xtoa$1370+1,c
 10699  0026CE  5038               	movf	_xtoa$1370,w,c
 10700  0026D0  1039               	iorwf	_xtoa$1370+1,w,c
 10701  0026D2  B4D8               	btfsc	status,2,c
 10702  0026D4  D027               	goto	l7430
 10703  0026D6  0E9F               	movlw	159
 10704  0026D8  6E30               	movwf	??_xtoa& (0+255),c
 10705  0026DA  0EFF               	movlw	255
 10706  0026DC  6E31               	movwf	(??_xtoa+1)& (0+255),c
 10707  0026DE  0E20               	movlw	32
 10708  0026E0  104A               	iorwf	xtoa@c,w,c
 10709  0026E2  6E32               	movwf	(??_xtoa+2)& (0+255),c
 10710  0026E4  0E00               	movlw	0
 10711  0026E6  104B               	iorwf	xtoa@c+1,w,c
 10712  0026E8  6E33               	movwf	(??_xtoa+3)& (0+255),c
 10713  0026EA  5030               	movf	??_xtoa,w,c
 10714  0026EC  2632               	addwf	??_xtoa+2,f,c
 10715  0026EE  5031               	movf	??_xtoa+1,w,c
 10716  0026F0  2233               	addwfc	??_xtoa+3,f,c
 10717  0026F2  5033               	movf	??_xtoa+3,w,c
 10718  0026F4  E106               	bnz	u8340
 10719  0026F6  0E1A               	movlw	26
 10720  0026F8  5C32               	subwf	??_xtoa+2,w,c
 10721  0026FA  B0D8               	btfsc	status,0,c
 10722  0026FC  D002               	goto	u8340
 10723  0026FE  0E01               	movlw	1
 10724  002700  D001               	goto	u8350
 10725  002702                     u8340:
 10726  002702  0E00               	movlw	0
 10727  002704                     u8350:
 10728  002704  6E3A               	movwf	_xtoa$1371,c
 10729  002706  6A3B               	clrf	_xtoa$1371+1,c
 10730  002708  503A               	movf	_xtoa$1371,w,c
 10731  00270A  103B               	iorwf	_xtoa$1371+1,w,c
 10732  00270C  B4D8               	btfsc	status,2,c
 10733  00270E  D00A               	goto	l7430
 10734                           
 10735                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 647:       
      +                                c = toupper(c);
 10736  002710  C04A  F00C         	movff	xtoa@c,toupper@c
 10737  002714  C04B  F00D         	movff	xtoa@c+1,toupper@c+1
 10738  002718  EC45  F01E         	call	_toupper	;wreg free
 10739  00271C  C00C  F04A         	movff	?_toupper,xtoa@c
 10740  002720  C00D  F04B         	movff	?_toupper+1,xtoa@c+1
 10741  002724                     l7430:
 10742                           
 10743                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 649:       
      +                            dbuf[i] = (char)c;
 10744  002724  0E50               	movlw	low _dbuf
 10745  002726  2448               	addwf	xtoa@i,w,c
 10746  002728  6ED9               	movwf	fsr2l,c
 10747  00272A  0E01               	movlw	high _dbuf
 10748  00272C  2049               	addwfc	xtoa@i+1,w,c
 10749  00272E  6EDA               	movwf	fsr2h,c
 10750  002730  C04A  FFDF         	movff	xtoa@c,indf2
 10751                           
 10752                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 650:       
      +                            --p;
 10753  002734  063C               	decf	xtoa@p,f,c
 10754  002736  A0D8               	btfss	status,0,c
 10755  002738  063D               	decf	xtoa@p+1,f,c
 10756                           
 10757                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 651:       
      +                            --w;
 10758  00273A  063E               	decf	xtoa@w,f,c
 10759  00273C  A0D8               	btfss	status,0,c
 10760  00273E  063F               	decf	xtoa@w+1,f,c
 10761                           
 10762                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 652:       
      +                            n = n >> 4;
 10763  002740  C040  F030         	movff	xtoa@n,??_xtoa
 10764  002744  C041  F031         	movff	xtoa@n+1,??_xtoa+1
 10765  002748  C042  F032         	movff	xtoa@n+2,??_xtoa+2
 10766  00274C  C043  F033         	movff	xtoa@n+3,??_xtoa+3
 10767  002750  C044  F034         	movff	xtoa@n+4,??_xtoa+4
 10768  002754  C045  F035         	movff	xtoa@n+5,??_xtoa+5
 10769  002758  C046  F036         	movff	xtoa@n+6,??_xtoa+6
 10770  00275C  C047  F037         	movff	xtoa@n+7,??_xtoa+7
 10771  002760  0E05               	movlw	5
 10772  002762  D009               	goto	u8370
 10773  002764                     u8375:
 10774  002764  90D8               	bcf	status,0,c
 10775  002766  3237               	rrcf	??_xtoa+7,f,c
 10776  002768  3236               	rrcf	??_xtoa+6,f,c
 10777  00276A  3235               	rrcf	??_xtoa+5,f,c
 10778  00276C  3234               	rrcf	??_xtoa+4,f,c
 10779  00276E  3233               	rrcf	??_xtoa+3,f,c
 10780  002770  3232               	rrcf	??_xtoa+2,f,c
 10781  002772  3231               	rrcf	??_xtoa+1,f,c
 10782  002774  3230               	rrcf	??_xtoa,f,c
 10783  002776                     u8370:
 10784  002776  2EE8               	decfsz	wreg,f,c
 10785  002778  D7F5               	goto	u8375
 10786  00277A  C030  F040         	movff	??_xtoa,xtoa@n
 10787  00277E  C031  F041         	movff	??_xtoa+1,xtoa@n+1
 10788  002782  C032  F042         	movff	??_xtoa+2,xtoa@n+2
 10789  002786  C033  F043         	movff	??_xtoa+3,xtoa@n+3
 10790  00278A  C034  F044         	movff	??_xtoa+4,xtoa@n+4
 10791  00278E  C035  F045         	movff	??_xtoa+5,xtoa@n+5
 10792  002792  C036  F046         	movff	??_xtoa+6,xtoa@n+6
 10793  002796  C037  F047         	movff	??_xtoa+7,xtoa@n+7
 10794  00279A                     l7438:
 10795                           
 10796                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10797  00279A  BE49               	btfsc	xtoa@i+1,7,c
 10798  00279C  D021               	goto	u8420
 10799  00279E  5049               	movf	xtoa@i+1,w,c
 10800  0027A0  E104               	bnz	u8380
 10801  0027A2  0E02               	movlw	2
 10802  0027A4  5C48               	subwf	xtoa@i,w,c
 10803  0027A6  A0D8               	btfss	status,0,c
 10804  0027A8  D01B               	goto	u8420
 10805  0027AA                     u8380:
 10806  0027AA  5040               	movf	xtoa@n,w,c
 10807  0027AC  1041               	iorwf	xtoa@n+1,w,c
 10808  0027AE  1042               	iorwf	xtoa@n+2,w,c
 10809  0027B0  1043               	iorwf	xtoa@n+3,w,c
 10810  0027B2  1044               	iorwf	xtoa@n+4,w,c
 10811  0027B4  1045               	iorwf	xtoa@n+5,w,c
 10812  0027B6  1046               	iorwf	xtoa@n+6,w,c
 10813  0027B8  1047               	iorwf	xtoa@n+7,w,c
 10814  0027BA  A4D8               	btfss	status,2,c
 10815  0027BC  D75B               	goto	l7408
 10816  0027BE  BE3D               	btfsc	xtoa@p+1,7,c
 10817  0027C0  D005               	goto	u8400
 10818  0027C2  503D               	movf	xtoa@p+1,w,c
 10819  0027C4  E102               	bnz	u8401
 10820  0027C6  043C               	decf	xtoa@p,w,c
 10821  0027C8  B0D8               	btfsc	status,0,c
 10822  0027CA                     u8401:
 10823  0027CA  D754               	goto	l7408
 10824  0027CC                     u8400:
 10825  0027CC  BE3F               	btfsc	xtoa@w+1,7,c
 10826  0027CE  D008               	goto	u8420
 10827  0027D0  503F               	movf	xtoa@w+1,w,c
 10828  0027D2  E103               	bnz	u8410
 10829  0027D4  043E               	decf	xtoa@w,w,c
 10830  0027D6  A0D8               	btfss	status,0,c
 10831  0027D8  D003               	goto	u8420
 10832  0027DA                     u8410:
 10833  0027DA  0100               	movlb	0	; () banked
 10834  0027DC  B3D5               	btfsc	_flags& (0+255),1,b
 10835  0027DE  D74A               	goto	l7408
 10836  0027E0                     u8420:
 10837                           
 10838                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 656:     if
      +                           (flags & (1 << 4)) {
 10839  0027E0  0100               	movlb	0	; () banked
 10840  0027E2  A9D5               	btfss	_flags& (0+255),4,b
 10841  0027E4  D016               	goto	l7454
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 657:       
      +                            --i;
 10845  0027E6  0648               	decf	xtoa@i,f,c
 10846  0027E8  A0D8               	btfss	status,0,c
 10847  0027EA  0649               	decf	xtoa@i+1,f,c
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 658:       
      +                            dbuf[i] = x;
 10851  0027EC  0E50               	movlw	low _dbuf
 10852  0027EE  2448               	addwf	xtoa@i,w,c
 10853  0027F0  6ED9               	movwf	fsr2l,c
 10854  0027F2  0E01               	movlw	high _dbuf
 10855  0027F4  2049               	addwfc	xtoa@i+1,w,c
 10856  0027F6  6EDA               	movwf	fsr2h,c
 10857  0027F8  C02F  FFDF         	movff	xtoa@x,indf2
 10858                           
 10859                           ; BSR set to: 0
 10860                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 659:       
      +                            --i;
 10861  0027FC  0648               	decf	xtoa@i,f,c
 10862  0027FE  A0D8               	btfss	status,0,c
 10863  002800  0649               	decf	xtoa@i+1,f,c
 10864                           
 10865                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 660:       
      +                            dbuf[i] = '0';
 10866  002802  0E50               	movlw	low _dbuf
 10867  002804  2448               	addwf	xtoa@i,w,c
 10868  002806  6ED9               	movwf	fsr2l,c
 10869  002808  0E01               	movlw	high _dbuf
 10870  00280A  2049               	addwfc	xtoa@i+1,w,c
 10871  00280C  6EDA               	movwf	fsr2h,c
 10872  00280E  0E30               	movlw	48
 10873  002810  6EDF               	movwf	indf2,c
 10874  002812                     l7454:
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 664:     re
      +                          turn pad(fp, &dbuf[i], w);
 10878  002812  C025  F01A         	movff	xtoa@fp,pad@fp
 10879  002816  C026  F01B         	movff	xtoa@fp+1,pad@fp+1
 10880  00281A  0E50               	movlw	low _dbuf
 10881  00281C  2448               	addwf	xtoa@i,w,c
 10882  00281E  6E1C               	movwf	pad@buf,c
 10883  002820  0E01               	movlw	high _dbuf
 10884  002822  2049               	addwfc	xtoa@i+1,w,c
 10885  002824  6E1D               	movwf	pad@buf+1,c
 10886  002826  C03E  F01E         	movff	xtoa@w,pad@p
 10887  00282A  C03F  F01F         	movff	xtoa@w+1,pad@p+1
 10888  00282E  EC42  F01B         	call	_pad	;wreg free
 10889  002832  C01A  F025         	movff	?_pad,?_xtoa
 10890  002836  C01B  F026         	movff	?_pad+1,?_xtoa+1
 10891  00283A  0012               	return		;funcret
 10892  00283C                     __end_of_xtoa:
 10893                           	opt callstack 0
 10894                           
 10895 ;; *************** function _toupper *****************
 10896 ;; Defined at:
 10897 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\toupper.c"
 10898 ;; Parameters:    Size  Location     Type
 10899 ;;  c               2   11[COMRAM] int 
 10900 ;; Auto vars:     Size  Location     Type
 10901 ;;		None
 10902 ;; Return value:  Size  Location     Type
 10903 ;;                  2   11[COMRAM] int 
 10904 ;; Registers used:
 10905 ;;		wreg, status,2, status,0
 10906 ;; Tracked objects:
 10907 ;;		On entry : 0/0
 10908 ;;		On exit  : 0/0
 10909 ;;		Unchanged: 0/0
 10910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10911 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;Total ram usage:        8 bytes
 10916 ;; Hardware stack levels used:    1
 10917 ;; Hardware stack levels required when called:    3
 10918 ;; This function calls:
 10919 ;;		_islower
 10920 ;; This function is called by:
 10921 ;;		_xtoa
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           	psect	text39
 10926  003C8A                     __ptext39:
 10927                           	opt callstack 0
 10928  003C8A                     _toupper:
 10929                           	opt callstack 23
 10930                           
 10931                           ;incstack = 0
 10932  003C8A  0E9F               	movlw	159
 10933  003C8C  6E0E               	movwf	??_toupper& (0+255),c
 10934  003C8E  0EFF               	movlw	255
 10935  003C90  6E0F               	movwf	(??_toupper+1)& (0+255),c
 10936  003C92  C00C  F010         	movff	toupper@c,??_toupper+2
 10937  003C96  C00D  F011         	movff	toupper@c+1,??_toupper+3
 10938  003C9A  500E               	movf	??_toupper,w,c
 10939  003C9C  2610               	addwf	??_toupper+2,f,c
 10940  003C9E  500F               	movf	??_toupper+1,w,c
 10941  003CA0  2211               	addwfc	??_toupper+3,f,c
 10942  003CA2  5011               	movf	??_toupper+3,w,c
 10943  003CA4  E106               	bnz	u7670
 10944  003CA6  0E1A               	movlw	26
 10945  003CA8  5C10               	subwf	??_toupper+2,w,c
 10946  003CAA  B0D8               	btfsc	status,0,c
 10947  003CAC  D002               	goto	u7670
 10948  003CAE  0E01               	movlw	1
 10949  003CB0  D001               	goto	u7680
 10950  003CB2                     u7670:
 10951  003CB2  0E00               	movlw	0
 10952  003CB4                     u7680:
 10953  003CB4  6E12               	movwf	_toupper$1966,c
 10954  003CB6  6A13               	clrf	_toupper$1966+1,c
 10955  003CB8  5012               	movf	_toupper$1966,w,c
 10956  003CBA  1013               	iorwf	_toupper$1966+1,w,c
 10957  003CBC  B4D8               	btfsc	status,2,c
 10958  003CBE  D005               	goto	l1510
 10959  003CC0  0E5F               	movlw	95
 10960  003CC2  140C               	andwf	toupper@c,w,c
 10961  003CC4  6E0C               	movwf	?_toupper,c
 10962  003CC6  6A0D               	clrf	?_toupper+1,c
 10963  003CC8  0012               	return	
 10964  003CCA                     l1510:
 10965  003CCA  C00C  F00C         	movff	toupper@c,?_toupper
 10966  003CCE  C00D  F00D         	movff	toupper@c+1,?_toupper+1
 10967  003CD2  0012               	return		;funcret
 10968  003CD4                     __end_of_toupper:
 10969                           	opt callstack 0
 10970                           
 10971 ;; *************** function _islower *****************
 10972 ;; Defined at:
 10973 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\islower.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;  c               2    5[COMRAM] int 
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;		None
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  2    5[COMRAM] int 
 10980 ;; Registers used:
 10981 ;;		wreg, status,2, status,0
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10987 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10989 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10990 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;Total ram usage:        6 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    2
 10994 ;; This function calls:
 10995 ;;		Nothing
 10996 ;; This function is called by:
 10997 ;;		_toupper
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           	psect	text40
 11002  003F48                     __ptext40:
 11003                           	opt callstack 0
 11004  003F48                     _islower:
 11005                           	opt callstack 23
 11006                           
 11007                           ;incstack = 0
 11008  003F48  0E9F               	movlw	159
 11009  003F4A  6E08               	movwf	??_islower& (0+255),c
 11010  003F4C  0EFF               	movlw	255
 11011  003F4E  6E09               	movwf	(??_islower+1)& (0+255),c
 11012  003F50  C006  F00A         	movff	islower@c,??_islower+2
 11013  003F54  C007  F00B         	movff	islower@c+1,??_islower+3
 11014  003F58  5008               	movf	??_islower,w,c
 11015  003F5A  260A               	addwf	??_islower+2,f,c
 11016  003F5C  5009               	movf	??_islower+1,w,c
 11017  003F5E  220B               	addwfc	??_islower+3,f,c
 11018  003F60  500B               	movf	??_islower+3,w,c
 11019  003F62  E106               	bnz	u7560
 11020  003F64  0E1A               	movlw	26
 11021  003F66  5C0A               	subwf	??_islower+2,w,c
 11022  003F68  B0D8               	btfsc	status,0,c
 11023  003F6A  D002               	goto	u7560
 11024  003F6C  0E01               	movlw	1
 11025  003F6E  D001               	goto	u7570
 11026  003F70                     u7560:
 11027  003F70  0E00               	movlw	0
 11028  003F72                     u7570:
 11029  003F72  6E06               	movwf	?_islower,c
 11030  003F74  6A07               	clrf	?_islower+1,c
 11031  003F76  0012               	return		;funcret
 11032  003F78                     __end_of_islower:
 11033                           	opt callstack 0
 11034                           
 11035 ;; *************** function _isupper *****************
 11036 ;; Defined at:
 11037 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isupper.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;  c               2    5[COMRAM] int 
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;		None
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  2    5[COMRAM] int 
 11044 ;; Registers used:
 11045 ;;		wreg, status,2, status,0
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11053 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11054 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;Total ram usage:        6 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    2
 11058 ;; This function calls:
 11059 ;;		Nothing
 11060 ;; This function is called by:
 11061 ;;		_xtoa
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           	psect	text41
 11066  003F78                     __ptext41:
 11067                           	opt callstack 0
 11068  003F78                     _isupper:
 11069                           	opt callstack 24
 11070                           
 11071                           ;incstack = 0
 11072  003F78  0EBF               	movlw	191
 11073  003F7A  6E08               	movwf	??_isupper& (0+255),c
 11074  003F7C  0EFF               	movlw	255
 11075  003F7E  6E09               	movwf	(??_isupper+1)& (0+255),c
 11076  003F80  C006  F00A         	movff	isupper@c,??_isupper+2
 11077  003F84  C007  F00B         	movff	isupper@c+1,??_isupper+3
 11078  003F88  5008               	movf	??_isupper,w,c
 11079  003F8A  260A               	addwf	??_isupper+2,f,c
 11080  003F8C  5009               	movf	??_isupper+1,w,c
 11081  003F8E  220B               	addwfc	??_isupper+3,f,c
 11082  003F90  500B               	movf	??_isupper+3,w,c
 11083  003F92  E106               	bnz	u7630
 11084  003F94  0E1A               	movlw	26
 11085  003F96  5C0A               	subwf	??_isupper+2,w,c
 11086  003F98  B0D8               	btfsc	status,0,c
 11087  003F9A  D002               	goto	u7630
 11088  003F9C  0E01               	movlw	1
 11089  003F9E  D001               	goto	u7640
 11090  003FA0                     u7630:
 11091  003FA0  0E00               	movlw	0
 11092  003FA2                     u7640:
 11093  003FA2  6E06               	movwf	?_isupper,c
 11094  003FA4  6A07               	clrf	?_isupper+1,c
 11095  003FA6  0012               	return		;funcret
 11096  003FA8                     __end_of_isupper:
 11097                           	opt callstack 0
 11098                           
 11099 ;; *************** function _isalpha *****************
 11100 ;; Defined at:
 11101 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isalpha.c"
 11102 ;; Parameters:    Size  Location     Type
 11103 ;;  c               2    5[COMRAM] int 
 11104 ;; Auto vars:     Size  Location     Type
 11105 ;;		None
 11106 ;; Return value:  Size  Location     Type
 11107 ;;                  2    5[COMRAM] int 
 11108 ;; Registers used:
 11109 ;;		wreg, status,2, status,0
 11110 ;; Tracked objects:
 11111 ;;		On entry : 0/0
 11112 ;;		On exit  : 0/0
 11113 ;;		Unchanged: 0/0
 11114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;Total ram usage:        6 bytes
 11120 ;; Hardware stack levels used:    1
 11121 ;; Hardware stack levels required when called:    2
 11122 ;; This function calls:
 11123 ;;		Nothing
 11124 ;; This function is called by:
 11125 ;;		_xtoa
 11126 ;; This function uses a non-reentrant model
 11127 ;;
 11128                           
 11129                           	psect	text42
 11130  003EE2                     __ptext42:
 11131                           	opt callstack 0
 11132  003EE2                     _isalpha:
 11133                           	opt callstack 24
 11134                           
 11135                           ;incstack = 0
 11136  003EE2  0E9F               	movlw	159
 11137  003EE4  6E08               	movwf	??_isalpha& (0+255),c
 11138  003EE6  0EFF               	movlw	255
 11139  003EE8  6E09               	movwf	(??_isalpha+1)& (0+255),c
 11140  003EEA  0E20               	movlw	32
 11141  003EEC  1006               	iorwf	isalpha@c,w,c
 11142  003EEE  6E0A               	movwf	(??_isalpha+2)& (0+255),c
 11143  003EF0  0E00               	movlw	0
 11144  003EF2  1007               	iorwf	isalpha@c+1,w,c
 11145  003EF4  6E0B               	movwf	(??_isalpha+3)& (0+255),c
 11146  003EF6  5008               	movf	??_isalpha,w,c
 11147  003EF8  260A               	addwf	??_isalpha+2,f,c
 11148  003EFA  5009               	movf	??_isalpha+1,w,c
 11149  003EFC  220B               	addwfc	??_isalpha+3,f,c
 11150  003EFE  500B               	movf	??_isalpha+3,w,c
 11151  003F00  E106               	bnz	u7650
 11152  003F02  0E1A               	movlw	26
 11153  003F04  5C0A               	subwf	??_isalpha+2,w,c
 11154  003F06  B0D8               	btfsc	status,0,c
 11155  003F08  D002               	goto	u7650
 11156  003F0A  0E01               	movlw	1
 11157  003F0C  D001               	goto	u7660
 11158  003F0E                     u7650:
 11159  003F0E  0E00               	movlw	0
 11160  003F10                     u7660:
 11161  003F10  6E06               	movwf	?_isalpha,c
 11162  003F12  6A07               	clrf	?_isalpha+1,c
 11163  003F14  0012               	return		;funcret
 11164  003F16                     __end_of_isalpha:
 11165                           	opt callstack 0
 11166                           
 11167 ;; *************** function _utoa *****************
 11168 ;; Defined at:
 11169 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
 11172 ;;		 -> NULL(0), 
 11173 ;;  d               8   38[COMRAM] unsigned long long 
 11174 ;; Auto vars:     Size  Location     Type
 11175 ;;  n               8   58[COMRAM] unsigned long long 
 11176 ;;  i               2   66[COMRAM] int 
 11177 ;;  w               2   56[COMRAM] int 
 11178 ;;  p               2   54[COMRAM] int 
 11179 ;; Return value:  Size  Location     Type
 11180 ;;                  2   36[COMRAM] int 
 11181 ;; Registers used:
 11182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11183 ;; Tracked objects:
 11184 ;;		On entry : 0/0
 11185 ;;		On exit  : 0/0
 11186 ;;		Unchanged: 0/0
 11187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11188 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11189 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11190 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11191 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11192 ;;Total ram usage:       32 bytes
 11193 ;; Hardware stack levels used:    1
 11194 ;; Hardware stack levels required when called:    9
 11195 ;; This function calls:
 11196 ;;		___lodiv
 11197 ;;		___lomod
 11198 ;;		_pad
 11199 ;; This function is called by:
 11200 ;;		_vfpfcnvrt
 11201 ;; This function uses a non-reentrant model
 11202 ;;
 11203                           
 11204                           	psect	text43
 11205  002A3E                     __ptext43:
 11206                           	opt callstack 0
 11207  002A3E                     _utoa:
 11208                           	opt callstack 18
 11209                           
 11210                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
 11211                           
 11212                           ;incstack = 0
 11213  002A3E  0100               	movlb	0	; () banked
 11214  002A40  AFD4               	btfss	(_prec+1)& (0+255),7,b
 11215                           
 11216                           ; BSR set to: 0
 11217                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
 11218  002A42  93D5               	bcf	_flags& (0+255),1,b
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
 11222  002A44  BFD4               	btfsc	(_prec+1)& (0+255),7,b
 11223  002A46  D005               	goto	u8210
 11224  002A48  51D4               	movf	(_prec+1)& (0+255),w,b
 11225  002A4A  E108               	bnz	l636
 11226  002A4C  05D3               	decf	_prec& (0+255),w,b
 11227  002A4E  B0D8               	btfsc	status,0,c
 11228  002A50  D005               	goto	l636
 11229  002A52                     u8210:
 11230                           
 11231                           ; BSR set to: 0
 11232  002A52  0E00               	movlw	0
 11233  002A54  6E38               	movwf	utoa@p+1,c
 11234  002A56  0E01               	movlw	1
 11235  002A58  6E37               	movwf	utoa@p,c
 11236  002A5A  D004               	goto	l638
 11237  002A5C                     l636:
 11238                           
 11239                           ; BSR set to: 0
 11240  002A5C  C0D3  F037         	movff	_prec,utoa@p
 11241  002A60  C0D4  F038         	movff	_prec+1,utoa@p+1
 11242  002A64                     l638:
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
 11246  002A64  C149  F039         	movff	_width,utoa@w
 11247  002A68  C14A  F03A         	movff	_width+1,utoa@w+1
 11248                           
 11249                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
 11250  002A6C  C027  F03B         	movff	utoa@d,utoa@n
 11251  002A70  C028  F03C         	movff	utoa@d+1,utoa@n+1
 11252  002A74  C029  F03D         	movff	utoa@d+2,utoa@n+2
 11253  002A78  C02A  F03E         	movff	utoa@d+3,utoa@n+3
 11254  002A7C  C02B  F03F         	movff	utoa@d+4,utoa@n+4
 11255  002A80  C02C  F040         	movff	utoa@d+5,utoa@n+5
 11256  002A84  C02D  F041         	movff	utoa@d+6,utoa@n+6
 11257  002A88  C02E  F042         	movff	utoa@d+7,utoa@n+7
 11258                           
 11259                           ; BSR set to: 0
 11260                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
 11261  002A8C  0E00               	movlw	0
 11262  002A8E  6E44               	movwf	utoa@i+1,c
 11263  002A90  0E1F               	movlw	31
 11264  002A92  6E43               	movwf	utoa@i,c
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
 11268  002A94  0E00               	movlw	0
 11269  002A96  0101               	movlb	1	; () banked
 11270  002A98  6F6F               	movwf	(_dbuf+31)& (0+255),b
 11271                           
 11272                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 11273  002A9A  D076               	goto	l7378
 11274  002A9C                     l7368:
 11275                           
 11276                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
 11277  002A9C  0643               	decf	utoa@i,f,c
 11278  002A9E  A0D8               	btfss	status,0,c
 11279  002AA0  0644               	decf	utoa@i+1,f,c
 11280                           
 11281                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
 11282  002AA2  0E50               	movlw	low _dbuf
 11283  002AA4  2443               	addwf	utoa@i,w,c
 11284  002AA6  6ED9               	movwf	fsr2l,c
 11285  002AA8  0E01               	movlw	high _dbuf
 11286  002AAA  2044               	addwfc	utoa@i+1,w,c
 11287  002AAC  6EDA               	movwf	fsr2h,c
 11288  002AAE  C03B  F006         	movff	utoa@n,___lomod@dividend
 11289  002AB2  C03C  F007         	movff	utoa@n+1,___lomod@dividend+1
 11290  002AB6  C03D  F008         	movff	utoa@n+2,___lomod@dividend+2
 11291  002ABA  C03E  F009         	movff	utoa@n+3,___lomod@dividend+3
 11292  002ABE  C03F  F00A         	movff	utoa@n+4,___lomod@dividend+4
 11293  002AC2  C040  F00B         	movff	utoa@n+5,___lomod@dividend+5
 11294  002AC6  C041  F00C         	movff	utoa@n+6,___lomod@dividend+6
 11295  002ACA  C042  F00D         	movff	utoa@n+7,___lomod@dividend+7
 11296  002ACE  0E0A               	movlw	10
 11297  002AD0  6E0E               	movwf	___lomod@divisor,c
 11298  002AD2  0E00               	movlw	0
 11299  002AD4  6E0F               	movwf	___lomod@divisor+1,c
 11300  002AD6  0E00               	movlw	0
 11301  002AD8  6E10               	movwf	___lomod@divisor+2,c
 11302  002ADA  0E00               	movlw	0
 11303  002ADC  6E11               	movwf	___lomod@divisor+3,c
 11304  002ADE  0E00               	movlw	0
 11305  002AE0  6E12               	movwf	___lomod@divisor+4,c
 11306  002AE2  0E00               	movlw	0
 11307  002AE4  6E13               	movwf	___lomod@divisor+5,c
 11308  002AE6  0E00               	movlw	0
 11309  002AE8  6E14               	movwf	___lomod@divisor+6,c
 11310  002AEA  0E00               	movlw	0
 11311  002AEC  6E15               	movwf	___lomod@divisor+7,c
 11312  002AEE  EC96  F01A         	call	___lomod	;wreg free
 11313  002AF2  C006  F02F         	movff	?___lomod,??_utoa
 11314  002AF6  C007  F030         	movff	?___lomod+1,??_utoa+1
 11315  002AFA  C008  F031         	movff	?___lomod+2,??_utoa+2
 11316  002AFE  C009  F032         	movff	?___lomod+3,??_utoa+3
 11317  002B02  C00A  F033         	movff	?___lomod+4,??_utoa+4
 11318  002B06  C00B  F034         	movff	?___lomod+5,??_utoa+5
 11319  002B0A  C00C  F035         	movff	?___lomod+6,??_utoa+6
 11320  002B0E  C00D  F036         	movff	?___lomod+7,??_utoa+7
 11321  002B12  502F               	movf	??_utoa,w,c
 11322  002B14  0F30               	addlw	48
 11323  002B16  6EDF               	movwf	indf2,c
 11324                           
 11325                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
 11326  002B18  0637               	decf	utoa@p,f,c
 11327  002B1A  A0D8               	btfss	status,0,c
 11328  002B1C  0638               	decf	utoa@p+1,f,c
 11329                           
 11330                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
 11331  002B1E  0639               	decf	utoa@w,f,c
 11332  002B20  A0D8               	btfss	status,0,c
 11333  002B22  063A               	decf	utoa@w+1,f,c
 11334                           
 11335                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
 11336  002B24  C03B  F006         	movff	utoa@n,___lodiv@dividend
 11337  002B28  C03C  F007         	movff	utoa@n+1,___lodiv@dividend+1
 11338  002B2C  C03D  F008         	movff	utoa@n+2,___lodiv@dividend+2
 11339  002B30  C03E  F009         	movff	utoa@n+3,___lodiv@dividend+3
 11340  002B34  C03F  F00A         	movff	utoa@n+4,___lodiv@dividend+4
 11341  002B38  C040  F00B         	movff	utoa@n+5,___lodiv@dividend+5
 11342  002B3C  C041  F00C         	movff	utoa@n+6,___lodiv@dividend+6
 11343  002B40  C042  F00D         	movff	utoa@n+7,___lodiv@dividend+7
 11344  002B44  0E0A               	movlw	10
 11345  002B46  6E0E               	movwf	___lodiv@divisor,c
 11346  002B48  0E00               	movlw	0
 11347  002B4A  6E0F               	movwf	___lodiv@divisor+1,c
 11348  002B4C  0E00               	movlw	0
 11349  002B4E  6E10               	movwf	___lodiv@divisor+2,c
 11350  002B50  0E00               	movlw	0
 11351  002B52  6E11               	movwf	___lodiv@divisor+3,c
 11352  002B54  0E00               	movlw	0
 11353  002B56  6E12               	movwf	___lodiv@divisor+4,c
 11354  002B58  0E00               	movlw	0
 11355  002B5A  6E13               	movwf	___lodiv@divisor+5,c
 11356  002B5C  0E00               	movlw	0
 11357  002B5E  6E14               	movwf	___lodiv@divisor+6,c
 11358  002B60  0E00               	movlw	0
 11359  002B62  6E15               	movwf	___lodiv@divisor+7,c
 11360  002B64  EC78  F019         	call	___lodiv	;wreg free
 11361  002B68  C006  F03B         	movff	?___lodiv,utoa@n
 11362  002B6C  C007  F03C         	movff	?___lodiv+1,utoa@n+1
 11363  002B70  C008  F03D         	movff	?___lodiv+2,utoa@n+2
 11364  002B74  C009  F03E         	movff	?___lodiv+3,utoa@n+3
 11365  002B78  C00A  F03F         	movff	?___lodiv+4,utoa@n+4
 11366  002B7C  C00B  F040         	movff	?___lodiv+5,utoa@n+5
 11367  002B80  C00C  F041         	movff	?___lodiv+6,utoa@n+6
 11368  002B84  C00D  F042         	movff	?___lodiv+7,utoa@n+7
 11369  002B88                     l7378:
 11370                           
 11371                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 11372  002B88  5043               	movf	utoa@i,w,c
 11373  002B8A  1044               	iorwf	utoa@i+1,w,c
 11374  002B8C  B4D8               	btfsc	status,2,c
 11375  002B8E  D01B               	goto	u8260
 11376  002B90  503B               	movf	utoa@n,w,c
 11377  002B92  103C               	iorwf	utoa@n+1,w,c
 11378  002B94  103D               	iorwf	utoa@n+2,w,c
 11379  002B96  103E               	iorwf	utoa@n+3,w,c
 11380  002B98  103F               	iorwf	utoa@n+4,w,c
 11381  002B9A  1040               	iorwf	utoa@n+5,w,c
 11382  002B9C  1041               	iorwf	utoa@n+6,w,c
 11383  002B9E  1042               	iorwf	utoa@n+7,w,c
 11384  002BA0  A4D8               	btfss	status,2,c
 11385  002BA2  D77C               	goto	l7368
 11386  002BA4  BE38               	btfsc	utoa@p+1,7,c
 11387  002BA6  D005               	goto	u8240
 11388  002BA8  5038               	movf	utoa@p+1,w,c
 11389  002BAA  E102               	bnz	u8241
 11390  002BAC  0437               	decf	utoa@p,w,c
 11391  002BAE  B0D8               	btfsc	status,0,c
 11392  002BB0                     u8241:
 11393  002BB0  D775               	goto	l7368
 11394  002BB2                     u8240:
 11395  002BB2  BE3A               	btfsc	utoa@w+1,7,c
 11396  002BB4  D008               	goto	u8260
 11397  002BB6  503A               	movf	utoa@w+1,w,c
 11398  002BB8  E103               	bnz	u8250
 11399  002BBA  0439               	decf	utoa@w,w,c
 11400  002BBC  A0D8               	btfss	status,0,c
 11401  002BBE  D003               	goto	u8260
 11402  002BC0                     u8250:
 11403  002BC0  0100               	movlb	0	; () banked
 11404  002BC2  B3D5               	btfsc	_flags& (0+255),1,b
 11405  002BC4  D76B               	goto	l7368
 11406  002BC6                     u8260:
 11407                           
 11408                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
 11409  002BC6  C025  F01A         	movff	utoa@fp,pad@fp
 11410  002BCA  C026  F01B         	movff	utoa@fp+1,pad@fp+1
 11411  002BCE  0E50               	movlw	low _dbuf
 11412  002BD0  2443               	addwf	utoa@i,w,c
 11413  002BD2  6E1C               	movwf	pad@buf,c
 11414  002BD4  0E01               	movlw	high _dbuf
 11415  002BD6  2044               	addwfc	utoa@i+1,w,c
 11416  002BD8  6E1D               	movwf	pad@buf+1,c
 11417  002BDA  C039  F01E         	movff	utoa@w,pad@p
 11418  002BDE  C03A  F01F         	movff	utoa@w+1,pad@p+1
 11419  002BE2  EC42  F01B         	call	_pad	;wreg free
 11420  002BE6  C01A  F025         	movff	?_pad,?_utoa
 11421  002BEA  C01B  F026         	movff	?_pad+1,?_utoa+1
 11422  002BEE  0012               	return		;funcret
 11423  002BF0                     __end_of_utoa:
 11424                           	opt callstack 0
 11425                           
 11426 ;; *************** function ___lomod *****************
 11427 ;; Defined at:
 11428 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  dividend        8    5[COMRAM] unsigned long long 
 11431 ;;  divisor         8   13[COMRAM] unsigned long long 
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  counter         1   21[COMRAM] unsigned char 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  8    5[COMRAM] unsigned long long 
 11436 ;; Registers used:
 11437 ;;		wreg, status,2, status,0
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11443 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;Total ram usage:       17 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    2
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_utoa
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           	psect	text44
 11458  00352C                     __ptext44:
 11459                           	opt callstack 0
 11460  00352C                     ___lomod:
 11461                           	opt callstack 24
 11462                           
 11463                           ;incstack = 0
 11464  00352C  500E               	movf	___lomod@divisor,w,c
 11465  00352E  100F               	iorwf	___lomod@divisor+1,w,c
 11466  003530  1010               	iorwf	___lomod@divisor+2,w,c
 11467  003532  1011               	iorwf	___lomod@divisor+3,w,c
 11468  003534  1012               	iorwf	___lomod@divisor+4,w,c
 11469  003536  1013               	iorwf	___lomod@divisor+5,w,c
 11470  003538  1014               	iorwf	___lomod@divisor+6,w,c
 11471  00353A  1015               	iorwf	___lomod@divisor+7,w,c
 11472  00353C  B4D8               	btfsc	status,2,c
 11473  00353E  D03C               	goto	l1176
 11474  003540  0E01               	movlw	1
 11475  003542  6E16               	movwf	___lomod@counter,c
 11476  003544  D00A               	goto	l7216
 11477  003546                     l7214:
 11478  003546  90D8               	bcf	status,0,c
 11479  003548  360E               	rlcf	___lomod@divisor,f,c
 11480  00354A  360F               	rlcf	___lomod@divisor+1,f,c
 11481  00354C  3610               	rlcf	___lomod@divisor+2,f,c
 11482  00354E  3611               	rlcf	___lomod@divisor+3,f,c
 11483  003550  3612               	rlcf	___lomod@divisor+4,f,c
 11484  003552  3613               	rlcf	___lomod@divisor+5,f,c
 11485  003554  3614               	rlcf	___lomod@divisor+6,f,c
 11486  003556  3615               	rlcf	___lomod@divisor+7,f,c
 11487  003558  2A16               	incf	___lomod@counter,f,c
 11488  00355A                     l7216:
 11489  00355A  AE15               	btfss	___lomod@divisor+7,7,c
 11490  00355C  D7F4               	goto	l7214
 11491  00355E                     u7900:
 11492  00355E  500E               	movf	___lomod@divisor,w,c
 11493  003560  5C06               	subwf	___lomod@dividend,w,c
 11494  003562  500F               	movf	___lomod@divisor+1,w,c
 11495  003564  5807               	subwfb	___lomod@dividend+1,w,c
 11496  003566  5010               	movf	___lomod@divisor+2,w,c
 11497  003568  5808               	subwfb	___lomod@dividend+2,w,c
 11498  00356A  5011               	movf	___lomod@divisor+3,w,c
 11499  00356C  5809               	subwfb	___lomod@dividend+3,w,c
 11500  00356E  5012               	movf	___lomod@divisor+4,w,c
 11501  003570  580A               	subwfb	___lomod@dividend+4,w,c
 11502  003572  5013               	movf	___lomod@divisor+5,w,c
 11503  003574  580B               	subwfb	___lomod@dividend+5,w,c
 11504  003576  5014               	movf	___lomod@divisor+6,w,c
 11505  003578  580C               	subwfb	___lomod@dividend+6,w,c
 11506  00357A  5015               	movf	___lomod@divisor+7,w,c
 11507  00357C  580D               	subwfb	___lomod@dividend+7,w,c
 11508  00357E  A0D8               	btfss	status,0,c
 11509  003580  D010               	goto	l7222
 11510  003582  500E               	movf	___lomod@divisor,w,c
 11511  003584  5E06               	subwf	___lomod@dividend,f,c
 11512  003586  500F               	movf	___lomod@divisor+1,w,c
 11513  003588  5A07               	subwfb	___lomod@dividend+1,f,c
 11514  00358A  5010               	movf	___lomod@divisor+2,w,c
 11515  00358C  5A08               	subwfb	___lomod@dividend+2,f,c
 11516  00358E  5011               	movf	___lomod@divisor+3,w,c
 11517  003590  5A09               	subwfb	___lomod@dividend+3,f,c
 11518  003592  5012               	movf	___lomod@divisor+4,w,c
 11519  003594  5A0A               	subwfb	___lomod@dividend+4,f,c
 11520  003596  5013               	movf	___lomod@divisor+5,w,c
 11521  003598  5A0B               	subwfb	___lomod@dividend+5,f,c
 11522  00359A  5014               	movf	___lomod@divisor+6,w,c
 11523  00359C  5A0C               	subwfb	___lomod@dividend+6,f,c
 11524  00359E  5015               	movf	___lomod@divisor+7,w,c
 11525  0035A0  5A0D               	subwfb	___lomod@dividend+7,f,c
 11526  0035A2                     l7222:
 11527  0035A2  90D8               	bcf	status,0,c
 11528  0035A4  3215               	rrcf	___lomod@divisor+7,f,c
 11529  0035A6  3214               	rrcf	___lomod@divisor+6,f,c
 11530  0035A8  3213               	rrcf	___lomod@divisor+5,f,c
 11531  0035AA  3212               	rrcf	___lomod@divisor+4,f,c
 11532  0035AC  3211               	rrcf	___lomod@divisor+3,f,c
 11533  0035AE  3210               	rrcf	___lomod@divisor+2,f,c
 11534  0035B0  320F               	rrcf	___lomod@divisor+1,f,c
 11535  0035B2  320E               	rrcf	___lomod@divisor,f,c
 11536  0035B4  2E16               	decfsz	___lomod@counter,f,c
 11537  0035B6  D7D3               	goto	u7900
 11538  0035B8                     l1176:
 11539  0035B8  C006  F006         	movff	___lomod@dividend,?___lomod
 11540  0035BC  C007  F007         	movff	___lomod@dividend+1,?___lomod+1
 11541  0035C0  C008  F008         	movff	___lomod@dividend+2,?___lomod+2
 11542  0035C4  C009  F009         	movff	___lomod@dividend+3,?___lomod+3
 11543  0035C8  C00A  F00A         	movff	___lomod@dividend+4,?___lomod+4
 11544  0035CC  C00B  F00B         	movff	___lomod@dividend+5,?___lomod+5
 11545  0035D0  C00C  F00C         	movff	___lomod@dividend+6,?___lomod+6
 11546  0035D4  C00D  F00D         	movff	___lomod@dividend+7,?___lomod+7
 11547  0035D8  0012               	return		;funcret
 11548  0035DA                     __end_of___lomod:
 11549                           	opt callstack 0
 11550                           
 11551 ;; *************** function ___lodiv *****************
 11552 ;; Defined at:
 11553 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;  dividend        8    5[COMRAM] unsigned long long 
 11556 ;;  divisor         8   13[COMRAM] unsigned long long 
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;  quotient        8   21[COMRAM] unsigned long long 
 11559 ;;  counter         1   29[COMRAM] unsigned char 
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  8    5[COMRAM] unsigned long long 
 11562 ;; Registers used:
 11563 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11569 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11570 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11572 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11573 ;;Total ram usage:       25 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    2
 11576 ;; This function calls:
 11577 ;;		Nothing
 11578 ;; This function is called by:
 11579 ;;		_utoa
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           	psect	text45
 11584  0032F0                     __ptext45:
 11585                           	opt callstack 0
 11586  0032F0                     ___lodiv:
 11587                           	opt callstack 24
 11588                           
 11589                           ;incstack = 0
 11590  0032F0  EE20  F016         	lfsr	2,___lodiv@quotient
 11591  0032F4  0E07               	movlw	7
 11592  0032F6                     u7851:
 11593  0032F6  6ADE               	clrf	postinc2,c
 11594  0032F8  06E8               	decf	wreg,f,c
 11595  0032FA  E2FD               	bc	u7851
 11596  0032FC  500E               	movf	___lodiv@divisor,w,c
 11597  0032FE  100F               	iorwf	___lodiv@divisor+1,w,c
 11598  003300  1010               	iorwf	___lodiv@divisor+2,w,c
 11599  003302  1011               	iorwf	___lodiv@divisor+3,w,c
 11600  003304  1012               	iorwf	___lodiv@divisor+4,w,c
 11601  003306  1013               	iorwf	___lodiv@divisor+5,w,c
 11602  003308  1014               	iorwf	___lodiv@divisor+6,w,c
 11603  00330A  1015               	iorwf	___lodiv@divisor+7,w,c
 11604  00330C  B4D8               	btfsc	status,2,c
 11605  00330E  D046               	goto	l1166
 11606  003310  0E01               	movlw	1
 11607  003312  6E1E               	movwf	___lodiv@counter,c
 11608  003314  D00A               	goto	l7196
 11609  003316                     l7194:
 11610  003316  90D8               	bcf	status,0,c
 11611  003318  360E               	rlcf	___lodiv@divisor,f,c
 11612  00331A  360F               	rlcf	___lodiv@divisor+1,f,c
 11613  00331C  3610               	rlcf	___lodiv@divisor+2,f,c
 11614  00331E  3611               	rlcf	___lodiv@divisor+3,f,c
 11615  003320  3612               	rlcf	___lodiv@divisor+4,f,c
 11616  003322  3613               	rlcf	___lodiv@divisor+5,f,c
 11617  003324  3614               	rlcf	___lodiv@divisor+6,f,c
 11618  003326  3615               	rlcf	___lodiv@divisor+7,f,c
 11619  003328  2A1E               	incf	___lodiv@counter,f,c
 11620  00332A                     l7196:
 11621  00332A  AE15               	btfss	___lodiv@divisor+7,7,c
 11622  00332C  D7F4               	goto	l7194
 11623  00332E                     u7870:
 11624  00332E  90D8               	bcf	status,0,c
 11625  003330  3616               	rlcf	___lodiv@quotient,f,c
 11626  003332  3617               	rlcf	___lodiv@quotient+1,f,c
 11627  003334  3618               	rlcf	___lodiv@quotient+2,f,c
 11628  003336  3619               	rlcf	___lodiv@quotient+3,f,c
 11629  003338  361A               	rlcf	___lodiv@quotient+4,f,c
 11630  00333A  361B               	rlcf	___lodiv@quotient+5,f,c
 11631  00333C  361C               	rlcf	___lodiv@quotient+6,f,c
 11632  00333E  361D               	rlcf	___lodiv@quotient+7,f,c
 11633  003340  500E               	movf	___lodiv@divisor,w,c
 11634  003342  5C06               	subwf	___lodiv@dividend,w,c
 11635  003344  500F               	movf	___lodiv@divisor+1,w,c
 11636  003346  5807               	subwfb	___lodiv@dividend+1,w,c
 11637  003348  5010               	movf	___lodiv@divisor+2,w,c
 11638  00334A  5808               	subwfb	___lodiv@dividend+2,w,c
 11639  00334C  5011               	movf	___lodiv@divisor+3,w,c
 11640  00334E  5809               	subwfb	___lodiv@dividend+3,w,c
 11641  003350  5012               	movf	___lodiv@divisor+4,w,c
 11642  003352  580A               	subwfb	___lodiv@dividend+4,w,c
 11643  003354  5013               	movf	___lodiv@divisor+5,w,c
 11644  003356  580B               	subwfb	___lodiv@dividend+5,w,c
 11645  003358  5014               	movf	___lodiv@divisor+6,w,c
 11646  00335A  580C               	subwfb	___lodiv@dividend+6,w,c
 11647  00335C  5015               	movf	___lodiv@divisor+7,w,c
 11648  00335E  580D               	subwfb	___lodiv@dividend+7,w,c
 11649  003360  A0D8               	btfss	status,0,c
 11650  003362  D011               	goto	l7206
 11651  003364  500E               	movf	___lodiv@divisor,w,c
 11652  003366  5E06               	subwf	___lodiv@dividend,f,c
 11653  003368  500F               	movf	___lodiv@divisor+1,w,c
 11654  00336A  5A07               	subwfb	___lodiv@dividend+1,f,c
 11655  00336C  5010               	movf	___lodiv@divisor+2,w,c
 11656  00336E  5A08               	subwfb	___lodiv@dividend+2,f,c
 11657  003370  5011               	movf	___lodiv@divisor+3,w,c
 11658  003372  5A09               	subwfb	___lodiv@dividend+3,f,c
 11659  003374  5012               	movf	___lodiv@divisor+4,w,c
 11660  003376  5A0A               	subwfb	___lodiv@dividend+4,f,c
 11661  003378  5013               	movf	___lodiv@divisor+5,w,c
 11662  00337A  5A0B               	subwfb	___lodiv@dividend+5,f,c
 11663  00337C  5014               	movf	___lodiv@divisor+6,w,c
 11664  00337E  5A0C               	subwfb	___lodiv@dividend+6,f,c
 11665  003380  5015               	movf	___lodiv@divisor+7,w,c
 11666  003382  5A0D               	subwfb	___lodiv@dividend+7,f,c
 11667  003384  8016               	bsf	___lodiv@quotient,0,c
 11668  003386                     l7206:
 11669  003386  90D8               	bcf	status,0,c
 11670  003388  3215               	rrcf	___lodiv@divisor+7,f,c
 11671  00338A  3214               	rrcf	___lodiv@divisor+6,f,c
 11672  00338C  3213               	rrcf	___lodiv@divisor+5,f,c
 11673  00338E  3212               	rrcf	___lodiv@divisor+4,f,c
 11674  003390  3211               	rrcf	___lodiv@divisor+3,f,c
 11675  003392  3210               	rrcf	___lodiv@divisor+2,f,c
 11676  003394  320F               	rrcf	___lodiv@divisor+1,f,c
 11677  003396  320E               	rrcf	___lodiv@divisor,f,c
 11678  003398  2E1E               	decfsz	___lodiv@counter,f,c
 11679  00339A  D7C9               	goto	u7870
 11680  00339C                     l1166:
 11681  00339C  C016  F006         	movff	___lodiv@quotient,?___lodiv
 11682  0033A0  C017  F007         	movff	___lodiv@quotient+1,?___lodiv+1
 11683  0033A4  C018  F008         	movff	___lodiv@quotient+2,?___lodiv+2
 11684  0033A8  C019  F009         	movff	___lodiv@quotient+3,?___lodiv+3
 11685  0033AC  C01A  F00A         	movff	___lodiv@quotient+4,?___lodiv+4
 11686  0033B0  C01B  F00B         	movff	___lodiv@quotient+5,?___lodiv+5
 11687  0033B4  C01C  F00C         	movff	___lodiv@quotient+6,?___lodiv+6
 11688  0033B8  C01D  F00D         	movff	___lodiv@quotient+7,?___lodiv+7
 11689  0033BC  0012               	return		;funcret
 11690  0033BE                     __end_of___lodiv:
 11691                           	opt callstack 0
 11692                           
 11693 ;; *************** function _strncmp *****************
 11694 ;; Defined at:
 11695 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strncmp.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;  _l              2    5[COMRAM] PTR const unsigned char 
 11698 ;;		 -> STR_56(11), STR_55(11), STR_54(10), STR_53(13), 
 11699 ;;		 -> STR_51(3), STR_49(3), STR_47(3), STR_45(3), 
 11700 ;;		 -> STR_43(3), STR_41(3), STR_39(3), STR_37(3), 
 11701 ;;		 -> STR_35(3), STR_33(3), STR_31(3), STR_30(15), 
 11702 ;;		 -> STR_29(15), STR_27(3), STR_26(13), STR_25(11), 
 11703 ;;		 -> STR_24(10), STR_23(6), STR_22(6), STR_21(3), 
 11704 ;;		 -> STR_20(4), STR_19(17), STR_17(3), STR_15(5), 
 11705 ;;		 -> STR_13(5), STR_10(9), STR_8(3), STR_6(3), 
 11706 ;;		 -> STR_4(5), STR_1(7), 
 11707 ;;  _r              2    7[COMRAM] PTR const unsigned char 
 11708 ;;		 -> STR_77(3), STR_73(3), STR_68(3), STR_63(3), 
 11709 ;;		 -> STR_59(3), 
 11710 ;;  n               2    9[COMRAM] unsigned int 
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;  r               2   14[COMRAM] PTR const unsigned char 
 11713 ;;		 -> STR_77(3), STR_73(3), STR_68(3), STR_63(3), 
 11714 ;;		 -> STR_59(3), 
 11715 ;;  l               2   12[COMRAM] PTR const unsigned char 
 11716 ;;		 -> STR_56(11), STR_55(11), STR_54(10), STR_53(13), 
 11717 ;;		 -> STR_51(3), STR_49(3), STR_47(3), STR_45(3), 
 11718 ;;		 -> STR_43(3), STR_41(3), STR_39(3), STR_37(3), 
 11719 ;;		 -> STR_35(3), STR_33(3), STR_31(3), STR_30(15), 
 11720 ;;		 -> STR_29(15), STR_27(3), STR_26(13), STR_25(11), 
 11721 ;;		 -> STR_24(10), STR_23(6), STR_22(6), STR_21(3), 
 11722 ;;		 -> STR_20(4), STR_19(17), STR_17(3), STR_15(5), 
 11723 ;;		 -> STR_13(5), STR_10(9), STR_8(3), STR_6(3), 
 11724 ;;		 -> STR_4(5), STR_1(7), 
 11725 ;; Return value:  Size  Location     Type
 11726 ;;                  2    5[COMRAM] int 
 11727 ;; Registers used:
 11728 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11729 ;; Tracked objects:
 11730 ;;		On entry : 0/0
 11731 ;;		On exit  : 0/0
 11732 ;;		Unchanged: 0/0
 11733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11734 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11735 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11737 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11738 ;;Total ram usage:       11 bytes
 11739 ;; Hardware stack levels used:    1
 11740 ;; Hardware stack levels required when called:    2
 11741 ;; This function calls:
 11742 ;;		Nothing
 11743 ;; This function is called by:
 11744 ;;		_vfpfcnvrt
 11745 ;; This function uses a non-reentrant model
 11746 ;;
 11747                           
 11748                           	psect	text46
 11749  0035DA                     __ptext46:
 11750                           	opt callstack 0
 11751  0035DA                     _strncmp:
 11752                           	opt callstack 25
 11753                           
 11754                           ;incstack = 0
 11755  0035DA  C006  F00D         	movff	strncmp@_l,strncmp@l
 11756  0035DE  C007  F00E         	movff	strncmp@_l+1,strncmp@l+1
 11757  0035E2  C008  F00F         	movff	strncmp@_r,strncmp@r
 11758  0035E6  C009  F010         	movff	strncmp@_r+1,strncmp@r+1
 11759  0035EA  060A               	decf	strncmp@n,f,c
 11760  0035EC  A0D8               	btfss	status,0,c
 11761  0035EE  060B               	decf	strncmp@n+1,f,c
 11762  0035F0  280A               	incf	strncmp@n,w,c
 11763  0035F2  E10F               	bnz	l7508
 11764  0035F4  280B               	incf	strncmp@n+1,w,c
 11765  0035F6  A4D8               	btfss	status,2,c
 11766  0035F8  D00C               	goto	l7508
 11767  0035FA  0E00               	movlw	0
 11768  0035FC  6E07               	movwf	?_strncmp+1,c
 11769  0035FE  0E00               	movlw	0
 11770  003600  6E06               	movwf	?_strncmp,c
 11771  003602  0012               	return	
 11772  003604                     l7506:
 11773  003604  4A0D               	infsnz	strncmp@l,f,c
 11774  003606  2A0E               	incf	strncmp@l+1,f,c
 11775  003608  4A0F               	infsnz	strncmp@r,f,c
 11776  00360A  2A10               	incf	strncmp@r+1,f,c
 11777  00360C  060A               	decf	strncmp@n,f,c
 11778  00360E  A0D8               	btfss	status,0,c
 11779  003610  060B               	decf	strncmp@n+1,f,c
 11780  003612                     l7508:
 11781  003612  C00D  FFF6         	movff	strncmp@l,tblptrl
 11782  003616  C00E  FFF7         	movff	strncmp@l+1,tblptrh
 11783  00361A                     	if	0	;tblptru may be non-zero
 11784  00361A                     	endif
 11785  00361A                     	if	0	;tblptru may be non-zero
 11786  00361A                     	endif
 11787  00361A  0008               	tblrd		*
 11788  00361C  50F5               	movf	tablat,w,c
 11789  00361E  0900               	iorlw	0
 11790  003620  B4D8               	btfsc	status,2,c
 11791  003622  D01D               	goto	u8550
 11792  003624  C00F  FFF6         	movff	strncmp@r,tblptrl
 11793  003628  C010  FFF7         	movff	strncmp@r+1,tblptrh
 11794  00362C                     	if	0	;tblptru may be non-zero
 11795  00362C                     	endif
 11796  00362C                     	if	0	;tblptru may be non-zero
 11797  00362C                     	endif
 11798  00362C  0008               	tblrd		*
 11799  00362E  50F5               	movf	tablat,w,c
 11800  003630  0900               	iorlw	0
 11801  003632  B4D8               	btfsc	status,2,c
 11802  003634  D014               	goto	u8550
 11803  003636  500A               	movf	strncmp@n,w,c
 11804  003638  100B               	iorwf	strncmp@n+1,w,c
 11805  00363A  B4D8               	btfsc	status,2,c
 11806  00363C  D010               	goto	u8550
 11807  00363E  C00D  FFF6         	movff	strncmp@l,tblptrl
 11808  003642  C00E  FFF7         	movff	strncmp@l+1,tblptrh
 11809  003646                     	if	0	;tblptru may be non-zero
 11810  003646                     	endif
 11811  003646                     	if	0	;tblptru may be non-zero
 11812  003646                     	endif
 11813  003646  0008               	tblrd		*
 11814  003648  CFF5 F00C          	movff	tablat,??_strncmp
 11815  00364C  C00F  FFF6         	movff	strncmp@r,tblptrl
 11816  003650  C010  FFF7         	movff	strncmp@r+1,tblptrh
 11817  003654                     	if	0	;tblptru may be non-zero
 11818  003654                     	endif
 11819  003654                     	if	0	;tblptru may be non-zero
 11820  003654                     	endif
 11821  003654  0008               	tblrd		*
 11822  003656  50F5               	movf	tablat,w,c
 11823  003658  180C               	xorwf	??_strncmp,w,c
 11824  00365A  B4D8               	btfsc	status,2,c
 11825  00365C  D7D3               	goto	l7506
 11826  00365E                     u8550:
 11827  00365E  C00D  FFF6         	movff	strncmp@l,tblptrl
 11828  003662  C00E  FFF7         	movff	strncmp@l+1,tblptrh
 11829  003666                     	if	0	;tblptru may be non-zero
 11830  003666                     	endif
 11831  003666                     	if	0	;tblptru may be non-zero
 11832  003666                     	endif
 11833  003666  0008               	tblrd		*
 11834  003668  CFF5 F00C          	movff	tablat,??_strncmp
 11835  00366C  C00F  FFF6         	movff	strncmp@r,tblptrl
 11836  003670  C010  FFF7         	movff	strncmp@r+1,tblptrh
 11837  003674                     	if	0	;tblptru may be non-zero
 11838  003674                     	endif
 11839  003674                     	if	0	;tblptru may be non-zero
 11840  003674                     	endif
 11841  003674  0008               	tblrd		*
 11842  003676  50F5               	movf	tablat,w,c
 11843  003678  5C0C               	subwf	??_strncmp,w,c
 11844  00367A  6E06               	movwf	?_strncmp,c
 11845  00367C  6A07               	clrf	?_strncmp+1,c
 11846  00367E  A0D8               	btfss	status,0,c
 11847  003680  0607               	decf	?_strncmp+1,f,c
 11848  003682  0012               	return		;funcret
 11849  003684                     __end_of_strncmp:
 11850                           	opt callstack 0
 11851                           
 11852 ;; *************** function _stoa *****************
 11853 ;; Defined at:
 11854 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
 11857 ;;		 -> NULL(0), 
 11858 ;;  s               2   20[COMRAM] PTR unsigned char 
 11859 ;;		 -> ?_printf(2), STR_52(16), STR_50(14), STR_48(11), 
 11860 ;;		 -> STR_46(9), STR_44(16), STR_42(13), STR_40(13), 
 11861 ;;		 -> STR_38(9), STR_36(13), STR_34(14), STR_32(10), 
 11862 ;;		 -> STR_28(9), STR_18(14), STR_16(16), STR_14(14), 
 11863 ;;		 -> STR_12(2), STR_11(6), STR_9(16), STR_7(14), 
 11864 ;;		 -> STR_5(15), STR_3(2), STR_2(10), 
 11865 ;; Auto vars:     Size  Location     Type
 11866 ;;  nuls            7   23[COMRAM] unsigned char [7]
 11867 ;;  l               2   38[COMRAM] int 
 11868 ;;  p               2   36[COMRAM] int 
 11869 ;;  cp              2   34[COMRAM] PTR unsigned char 
 11870 ;;		 -> ?_printf(2), stoa@nuls(7), STR_52(16), STR_50(14), 
 11871 ;;		 -> STR_48(11), STR_46(9), STR_44(16), STR_42(13), 
 11872 ;;		 -> STR_40(13), STR_38(9), STR_36(13), STR_34(14), 
 11873 ;;		 -> STR_32(10), STR_28(9), STR_18(14), STR_16(16), 
 11874 ;;		 -> STR_14(14), STR_12(2), STR_11(6), STR_9(16), 
 11875 ;;		 -> STR_7(14), STR_5(15), STR_3(2), STR_2(10), 
 11876 ;;  w               2   32[COMRAM] int 
 11877 ;;  i               2   30[COMRAM] int 
 11878 ;; Return value:  Size  Location     Type
 11879 ;;                  2   18[COMRAM] int 
 11880 ;; Registers used:
 11881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11882 ;; Tracked objects:
 11883 ;;		On entry : 0/0
 11884 ;;		On exit  : 0/0
 11885 ;;		Unchanged: 0/0
 11886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11887 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11888 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11890 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11891 ;;Total ram usage:       22 bytes
 11892 ;; Hardware stack levels used:    1
 11893 ;; Hardware stack levels required when called:    7
 11894 ;; This function calls:
 11895 ;;		_fputc
 11896 ;;		_strlen
 11897 ;; This function is called by:
 11898 ;;		_vfpfcnvrt
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           	psect	text47
 11903  002D38                     __ptext47:
 11904                           	opt callstack 0
 11905  002D38                     _stoa:
 11906                           	opt callstack 20
 11907                           
 11908                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
 11909                           
 11910                           ;incstack = 0
 11911  002D38  EE21  F070         	lfsr	2,stoa@F1144
 11912  002D3C  EE10  F018         	lfsr	1,stoa@nuls
 11913  002D40  0E06               	movlw	6
 11914  002D42                     u8101:
 11915  002D42  CFDB FFE3          	movff	plusw2,plusw1
 11916  002D46  06E8               	decf	wreg,f,c
 11917  002D48  E2FC               	bc	u8101
 11918                           
 11919                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
 11920  002D4A  C015  F023         	movff	stoa@s,stoa@cp
 11921  002D4E  C016  F024         	movff	stoa@s+1,stoa@cp+1
 11922                           
 11923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
 11924  002D52  5023               	movf	stoa@cp,w,c
 11925  002D54  1024               	iorwf	stoa@cp+1,w,c
 11926  002D56  A4D8               	btfss	status,2,c
 11927  002D58  D004               	goto	l7322
 11928                           
 11929                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
 11930  002D5A  0E18               	movlw	low stoa@nuls
 11931  002D5C  6E23               	movwf	stoa@cp,c
 11932  002D5E  0E00               	movlw	high stoa@nuls
 11933  002D60  6E24               	movwf	stoa@cp+1,c
 11934  002D62                     l7322:
 11935                           
 11936                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
 11937  002D62  C023  F006         	movff	stoa@cp,strlen@s
 11938  002D66  C024  F007         	movff	stoa@cp+1,strlen@s+1
 11939  002D6A  ECB0  F01E         	call	_strlen	;wreg free
 11940  002D6E  C006  F027         	movff	?_strlen,stoa@l
 11941  002D72  C007  F028         	movff	?_strlen+1,stoa@l+1
 11942                           
 11943                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
 11944  002D76  C0D3  F025         	movff	_prec,stoa@p
 11945  002D7A  C0D4  F026         	movff	_prec+1,stoa@p+1
 11946                           
 11947                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
 11948  002D7E  BE26               	btfsc	stoa@p+1,7,c
 11949  002D80  D00E               	goto	l617
 11950  002D82  5027               	movf	stoa@l,w,c
 11951  002D84  5C25               	subwf	stoa@p,w,c
 11952  002D86  5026               	movf	stoa@p+1,w,c
 11953  002D88  0A80               	xorlw	128
 11954  002D8A  6E17               	movwf	??_stoa& (0+255),c
 11955  002D8C  5028               	movf	stoa@l+1,w,c
 11956  002D8E  0A80               	xorlw	128
 11957  002D90  5817               	subwfb	??_stoa& (0+255),w,c
 11958  002D92  B0D8               	btfsc	status,0,c
 11959  002D94  D004               	goto	l617
 11960  002D96  C025  F027         	movff	stoa@p,stoa@l
 11961  002D9A  C026  F028         	movff	stoa@p+1,stoa@l+1
 11962  002D9E                     l617:
 11963                           
 11964                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
 11965  002D9E  C027  F025         	movff	stoa@l,stoa@p
 11966  002DA2  C028  F026         	movff	stoa@l+1,stoa@p+1
 11967                           
 11968                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
 11969  002DA6  C149  F021         	movff	_width,stoa@w
 11970  002DAA  C14A  F022         	movff	_width+1,stoa@w+1
 11971                           
 11972                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
 11973  002DAE  0100               	movlb	0	; () banked
 11974  002DB0  A1D5               	btfss	_flags& (0+255),0,b
 11975  002DB2  D00D               	goto	l7336
 11976  002DB4  D016               	goto	u8150
 11977  002DB6                     l7332:
 11978                           
 11979                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
 11980  002DB6  0E00               	movlw	0
 11981  002DB8  6E0B               	movwf	fputc@c+1,c
 11982  002DBA  0E20               	movlw	32
 11983  002DBC  6E0A               	movwf	fputc@c,c
 11984  002DBE  C013  F00C         	movff	stoa@fp,fputc@fp
 11985  002DC2  C014  F00D         	movff	stoa@fp+1,fputc@fp+1
 11986  002DC6  ECCF  F01C         	call	_fputc	;wreg free
 11987                           
 11988                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
 11989  002DCA  4A27               	infsnz	stoa@l,f,c
 11990  002DCC  2A28               	incf	stoa@l+1,f,c
 11991  002DCE                     l7336:
 11992                           
 11993                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
 11994  002DCE  5021               	movf	stoa@w,w,c
 11995  002DD0  5C27               	subwf	stoa@l,w,c
 11996  002DD2  5028               	movf	stoa@l+1,w,c
 11997  002DD4  0A80               	xorlw	128
 11998  002DD6  6E17               	movwf	??_stoa& (0+255),c
 11999  002DD8  5022               	movf	stoa@w+1,w,c
 12000  002DDA  0A80               	xorlw	128
 12001  002DDC  5817               	subwfb	??_stoa& (0+255),w,c
 12002  002DDE  A0D8               	btfss	status,0,c
 12003  002DE0  D7EA               	goto	l7332
 12004  002DE2                     u8150:
 12005                           
 12006                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
 12007  002DE2  0E00               	movlw	0
 12008  002DE4  6E20               	movwf	stoa@i+1,c
 12009  002DE6  0E00               	movlw	0
 12010  002DE8  6E1F               	movwf	stoa@i,c
 12011                           
 12012                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 12013  002DEA  D01F               	goto	l7346
 12014  002DEC                     l7340:
 12015                           
 12016                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
 12017  002DEC  C023  FFF6         	movff	stoa@cp,tblptrl
 12018  002DF0  C024  FFF7         	movff	stoa@cp+1,tblptrh
 12019  002DF4  0E00               	movlw	low (__mediumconst shr (0+16))
 12020  002DF6  6EF8               	movwf	tblptru,c
 12021  002DF8  0E0F               	movlw	(high __ramtop+-1)
 12022  002DFA  64F7               	cpfsgt	tblptrh,c
 12023  002DFC  D003               	bra	u8167
 12024  002DFE  0008               	tblrd		*
 12025  002E00  50F5               	movf	tablat,w,c
 12026  002E02  D005               	bra	u8160
 12027  002E04                     u8167:
 12028  002E04  CFF6 FFE1          	movff	tblptrl,fsr1l
 12029  002E08  CFF7 FFE2          	movff	tblptrh,fsr1h
 12030  002E0C  50E7               	movf	indf1,w,c
 12031  002E0E                     u8160:
 12032  002E0E  6E17               	movwf	??_stoa& (0+255),c
 12033  002E10  5017               	movf	??_stoa,w,c
 12034  002E12  6E0A               	movwf	fputc@c,c
 12035  002E14  6A0B               	clrf	fputc@c+1,c
 12036  002E16  C013  F00C         	movff	stoa@fp,fputc@fp
 12037  002E1A  C014  F00D         	movff	stoa@fp+1,fputc@fp+1
 12038  002E1E  ECCF  F01C         	call	_fputc	;wreg free
 12039                           
 12040                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
 12041  002E22  4A23               	infsnz	stoa@cp,f,c
 12042  002E24  2A24               	incf	stoa@cp+1,f,c
 12043                           
 12044                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
 12045  002E26  4A1F               	infsnz	stoa@i,f,c
 12046  002E28  2A20               	incf	stoa@i+1,f,c
 12047  002E2A                     l7346:
 12048                           
 12049                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 12050  002E2A  5025               	movf	stoa@p,w,c
 12051  002E2C  5C1F               	subwf	stoa@i,w,c
 12052  002E2E  5020               	movf	stoa@i+1,w,c
 12053  002E30  0A80               	xorlw	128
 12054  002E32  6E17               	movwf	??_stoa& (0+255),c
 12055  002E34  5026               	movf	stoa@p+1,w,c
 12056  002E36  0A80               	xorlw	128
 12057  002E38  5817               	subwfb	??_stoa& (0+255),w,c
 12058  002E3A  A0D8               	btfss	status,0,c
 12059  002E3C  D7D7               	goto	l7340
 12060                           
 12061                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
 12062  002E3E  0100               	movlb	0	; () banked
 12063  002E40  B1D5               	btfsc	_flags& (0+255),0,b
 12064  002E42  D00D               	goto	l7354
 12065  002E44  D016               	goto	u8190
 12066  002E46                     l7350:
 12067                           
 12068                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
 12069  002E46  0E00               	movlw	0
 12070  002E48  6E0B               	movwf	fputc@c+1,c
 12071  002E4A  0E20               	movlw	32
 12072  002E4C  6E0A               	movwf	fputc@c,c
 12073  002E4E  C013  F00C         	movff	stoa@fp,fputc@fp
 12074  002E52  C014  F00D         	movff	stoa@fp+1,fputc@fp+1
 12075  002E56  ECCF  F01C         	call	_fputc	;wreg free
 12076                           
 12077                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
 12078  002E5A  4A27               	infsnz	stoa@l,f,c
 12079  002E5C  2A28               	incf	stoa@l+1,f,c
 12080  002E5E                     l7354:
 12081                           
 12082                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
 12083  002E5E  5021               	movf	stoa@w,w,c
 12084  002E60  5C27               	subwf	stoa@l,w,c
 12085  002E62  5028               	movf	stoa@l+1,w,c
 12086  002E64  0A80               	xorlw	128
 12087  002E66  6E17               	movwf	??_stoa& (0+255),c
 12088  002E68  5022               	movf	stoa@w+1,w,c
 12089  002E6A  0A80               	xorlw	128
 12090  002E6C  5817               	subwfb	??_stoa& (0+255),w,c
 12091  002E6E  A0D8               	btfss	status,0,c
 12092  002E70  D7EA               	goto	l7350
 12093  002E72                     u8190:
 12094                           
 12095                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
 12096                           
 12097                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 586:     }
 12098  002E72  C027  F013         	movff	stoa@l,?_stoa
 12099  002E76  C028  F014         	movff	stoa@l+1,?_stoa+1
 12100  002E7A  0012               	return		;funcret
 12101  002E7C                     __end_of_stoa:
 12102                           	opt callstack 0
 12103                           
 12104 ;; *************** function _dtoa *****************
 12105 ;; Defined at:
 12106 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
 12109 ;;		 -> NULL(0), 
 12110 ;;  d               8   38[COMRAM] long long 
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;  n               8   62[COMRAM] long long 
 12113 ;;  i               2   70[COMRAM] int 
 12114 ;;  s               2   60[COMRAM] int 
 12115 ;;  w               2   58[COMRAM] int 
 12116 ;;  p               2   56[COMRAM] int 
 12117 ;; Return value:  Size  Location     Type
 12118 ;;                  2   36[COMRAM] int 
 12119 ;; Registers used:
 12120 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12121 ;; Tracked objects:
 12122 ;;		On entry : 0/0
 12123 ;;		On exit  : 0/0
 12124 ;;		Unchanged: 0/0
 12125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12126 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;Total ram usage:       36 bytes
 12131 ;; Hardware stack levels used:    1
 12132 ;; Hardware stack levels required when called:    9
 12133 ;; This function calls:
 12134 ;;		___aodiv
 12135 ;;		___aomod
 12136 ;;		_abs
 12137 ;;		_pad
 12138 ;; This function is called by:
 12139 ;;		_vfpfcnvrt
 12140 ;; This function uses a non-reentrant model
 12141 ;;
 12142                           
 12143                           	psect	text48
 12144  0023C2                     __ptext48:
 12145                           	opt callstack 0
 12146  0023C2                     _dtoa:
 12147                           	opt callstack 18
 12148                           
 12149                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
 12150                           
 12151                           ;incstack = 0
 12152  0023C2  C027  F03F         	movff	dtoa@d,dtoa@n
 12153  0023C6  C028  F040         	movff	dtoa@d+1,dtoa@n+1
 12154  0023CA  C029  F041         	movff	dtoa@d+2,dtoa@n+2
 12155  0023CE  C02A  F042         	movff	dtoa@d+3,dtoa@n+3
 12156  0023D2  C02B  F043         	movff	dtoa@d+4,dtoa@n+4
 12157  0023D6  C02C  F044         	movff	dtoa@d+5,dtoa@n+5
 12158  0023DA  C02D  F045         	movff	dtoa@d+6,dtoa@n+6
 12159  0023DE  C02E  F046         	movff	dtoa@d+7,dtoa@n+7
 12160                           
 12161                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 12162  0023E2  AE46               	btfss	dtoa@n+7,7,c
 12163  0023E4  D002               	goto	u7950
 12164  0023E6  0E01               	movlw	1
 12165  0023E8  D001               	goto	u7960
 12166  0023EA                     u7950:
 12167  0023EA  0E00               	movlw	0
 12168  0023EC                     u7960:
 12169  0023EC  6E3D               	movwf	dtoa@s,c
 12170  0023EE  6A3E               	clrf	dtoa@s+1,c
 12171                           
 12172                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 12173  0023F0  503D               	movf	dtoa@s,w,c
 12174  0023F2  103E               	iorwf	dtoa@s+1,w,c
 12175  0023F4  B4D8               	btfsc	status,2,c
 12176  0023F6  D010               	goto	l7258
 12177                           
 12178                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 12179  0023F8  1E46               	comf	dtoa@n+7,f,c
 12180  0023FA  1E45               	comf	dtoa@n+6,f,c
 12181  0023FC  1E44               	comf	dtoa@n+5,f,c
 12182  0023FE  1E43               	comf	dtoa@n+4,f,c
 12183  002400  1E42               	comf	dtoa@n+3,f,c
 12184  002402  1E41               	comf	dtoa@n+2,f,c
 12185  002404  1E40               	comf	dtoa@n+1,f,c
 12186  002406  6C3F               	negf	dtoa@n,c
 12187  002408  0E00               	movlw	0
 12188  00240A  2240               	addwfc	dtoa@n+1,f,c
 12189  00240C  2241               	addwfc	dtoa@n+2,f,c
 12190  00240E  2242               	addwfc	dtoa@n+3,f,c
 12191  002410  2243               	addwfc	dtoa@n+4,f,c
 12192  002412  2244               	addwfc	dtoa@n+5,f,c
 12193  002414  2245               	addwfc	dtoa@n+6,f,c
 12194  002416  2246               	addwfc	dtoa@n+7,f,c
 12195  002418                     l7258:
 12196                           
 12197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 12198  002418  0100               	movlb	0	; () banked
 12199  00241A  AFD4               	btfss	(_prec+1)& (0+255),7,b
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 12203  00241C  93D5               	bcf	_flags& (0+255),1,b
 12204                           
 12205                           ; BSR set to: 0
 12206                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 12207  00241E  BFD4               	btfsc	(_prec+1)& (0+255),7,b
 12208  002420  D005               	goto	u7990
 12209  002422  51D4               	movf	(_prec+1)& (0+255),w,b
 12210  002424  E108               	bnz	l588
 12211  002426  05D3               	decf	_prec& (0+255),w,b
 12212  002428  B0D8               	btfsc	status,0,c
 12213  00242A  D005               	goto	l588
 12214  00242C                     u7990:
 12215                           
 12216                           ; BSR set to: 0
 12217  00242C  0E00               	movlw	0
 12218  00242E  6E3A               	movwf	dtoa@p+1,c
 12219  002430  0E01               	movlw	1
 12220  002432  6E39               	movwf	dtoa@p,c
 12221  002434  D004               	goto	l590
 12222  002436                     l588:
 12223                           
 12224                           ; BSR set to: 0
 12225  002436  C0D3  F039         	movff	_prec,dtoa@p
 12226  00243A  C0D4  F03A         	movff	_prec+1,dtoa@p+1
 12227  00243E                     l590:
 12228                           
 12229                           ; BSR set to: 0
 12230                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 12231  00243E  C149  F03B         	movff	_width,dtoa@w
 12232  002442  C14A  F03C         	movff	_width+1,dtoa@w+1
 12233                           
 12234                           ; BSR set to: 0
 12235                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 12236  002446  503D               	movf	dtoa@s,w,c
 12237  002448  103E               	iorwf	dtoa@s+1,w,c
 12238  00244A  A4D8               	btfss	status,2,c
 12239  00244C  D002               	goto	u8010
 12240                           
 12241                           ; BSR set to: 0
 12242  00244E  A5D5               	btfss	_flags& (0+255),2,b
 12243  002450  D003               	goto	l7272
 12244  002452                     u8010:
 12245                           
 12246                           ; BSR set to: 0
 12247                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 12248  002452  063B               	decf	dtoa@w,f,c
 12249  002454  A0D8               	btfss	status,0,c
 12250  002456  063C               	decf	dtoa@w+1,f,c
 12251  002458                     l7272:
 12252                           
 12253                           ; BSR set to: 0
 12254                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 12255  002458  0E00               	movlw	0
 12256  00245A  6E48               	movwf	dtoa@i+1,c
 12257  00245C  0E1F               	movlw	31
 12258  00245E  6E47               	movwf	dtoa@i,c
 12259                           
 12260                           ; BSR set to: 0
 12261                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 12262  002460  0E00               	movlw	0
 12263  002462  0101               	movlb	1	; () banked
 12264  002464  6F6F               	movwf	(_dbuf+31)& (0+255),b
 12265                           
 12266                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 12267  002466  D07C               	goto	l7286
 12268  002468                     l7276:
 12269                           
 12270                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 12271  002468  0647               	decf	dtoa@i,f,c
 12272  00246A  A0D8               	btfss	status,0,c
 12273  00246C  0648               	decf	dtoa@i+1,f,c
 12274                           
 12275                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 12276  00246E  0E50               	movlw	low _dbuf
 12277  002470  2447               	addwf	dtoa@i,w,c
 12278  002472  6ED9               	movwf	fsr2l,c
 12279  002474  0E01               	movlw	high _dbuf
 12280  002476  2048               	addwfc	dtoa@i+1,w,c
 12281  002478  6EDA               	movwf	fsr2h,c
 12282  00247A  C03F  F006         	movff	dtoa@n,___aomod@dividend
 12283  00247E  C040  F007         	movff	dtoa@n+1,___aomod@dividend+1
 12284  002482  C041  F008         	movff	dtoa@n+2,___aomod@dividend+2
 12285  002486  C042  F009         	movff	dtoa@n+3,___aomod@dividend+3
 12286  00248A  C043  F00A         	movff	dtoa@n+4,___aomod@dividend+4
 12287  00248E  C044  F00B         	movff	dtoa@n+5,___aomod@dividend+5
 12288  002492  C045  F00C         	movff	dtoa@n+6,___aomod@dividend+6
 12289  002496  C046  F00D         	movff	dtoa@n+7,___aomod@dividend+7
 12290  00249A  0E0A               	movlw	10
 12291  00249C  6E0E               	movwf	___aomod@divisor,c
 12292  00249E  0E00               	movlw	0
 12293  0024A0  6E0F               	movwf	___aomod@divisor+1,c
 12294  0024A2  0E00               	movlw	0
 12295  0024A4  6E10               	movwf	___aomod@divisor+2,c
 12296  0024A6  0E00               	movlw	0
 12297  0024A8  6E11               	movwf	___aomod@divisor+3,c
 12298  0024AA  0E00               	movlw	0
 12299  0024AC  6E12               	movwf	___aomod@divisor+4,c
 12300  0024AE  0E00               	movlw	0
 12301  0024B0  6E13               	movwf	___aomod@divisor+5,c
 12302  0024B2  0E00               	movlw	0
 12303  0024B4  6E14               	movwf	___aomod@divisor+6,c
 12304  0024B6  0E00               	movlw	0
 12305  0024B8  6E15               	movwf	___aomod@divisor+7,c
 12306  0024BA  EC7E  F018         	call	___aomod	;wreg free
 12307  0024BE  C006  F02F         	movff	?___aomod,??_dtoa
 12308  0024C2  C007  F030         	movff	?___aomod+1,??_dtoa+1
 12309  0024C6  C008  F031         	movff	?___aomod+2,??_dtoa+2
 12310  0024CA  C009  F032         	movff	?___aomod+3,??_dtoa+3
 12311  0024CE  C00A  F033         	movff	?___aomod+4,??_dtoa+4
 12312  0024D2  C00B  F034         	movff	?___aomod+5,??_dtoa+5
 12313  0024D6  C00C  F035         	movff	?___aomod+6,??_dtoa+6
 12314  0024DA  C00D  F036         	movff	?___aomod+7,??_dtoa+7
 12315  0024DE  C02F  F018         	movff	??_dtoa,abs@a
 12316  0024E2  C031  F019         	movff	??_dtoa+2,abs@a+1
 12317  0024E6  EC8B  F01F         	call	_abs	;wreg free
 12318  0024EA  5018               	movf	?_abs,w,c
 12319  0024EC  0F30               	addlw	48
 12320  0024EE  6EDF               	movwf	indf2,c
 12321                           
 12322                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 12323  0024F0  0639               	decf	dtoa@p,f,c
 12324  0024F2  A0D8               	btfss	status,0,c
 12325  0024F4  063A               	decf	dtoa@p+1,f,c
 12326                           
 12327                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 12328  0024F6  063B               	decf	dtoa@w,f,c
 12329  0024F8  A0D8               	btfss	status,0,c
 12330  0024FA  063C               	decf	dtoa@w+1,f,c
 12331                           
 12332                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 12333  0024FC  C03F  F006         	movff	dtoa@n,___aodiv@dividend
 12334  002500  C040  F007         	movff	dtoa@n+1,___aodiv@dividend+1
 12335  002504  C041  F008         	movff	dtoa@n+2,___aodiv@dividend+2
 12336  002508  C042  F009         	movff	dtoa@n+3,___aodiv@dividend+3
 12337  00250C  C043  F00A         	movff	dtoa@n+4,___aodiv@dividend+4
 12338  002510  C044  F00B         	movff	dtoa@n+5,___aodiv@dividend+5
 12339  002514  C045  F00C         	movff	dtoa@n+6,___aodiv@dividend+6
 12340  002518  C046  F00D         	movff	dtoa@n+7,___aodiv@dividend+7
 12341  00251C  0E0A               	movlw	10
 12342  00251E  6E0E               	movwf	___aodiv@divisor,c
 12343  002520  0E00               	movlw	0
 12344  002522  6E0F               	movwf	___aodiv@divisor+1,c
 12345  002524  0E00               	movlw	0
 12346  002526  6E10               	movwf	___aodiv@divisor+2,c
 12347  002528  0E00               	movlw	0
 12348  00252A  6E11               	movwf	___aodiv@divisor+3,c
 12349  00252C  0E00               	movlw	0
 12350  00252E  6E12               	movwf	___aodiv@divisor+4,c
 12351  002530  0E00               	movlw	0
 12352  002532  6E13               	movwf	___aodiv@divisor+5,c
 12353  002534  0E00               	movlw	0
 12354  002536  6E14               	movwf	___aodiv@divisor+6,c
 12355  002538  0E00               	movlw	0
 12356  00253A  6E15               	movwf	___aodiv@divisor+7,c
 12357  00253C  ECF8  F015         	call	___aodiv	;wreg free
 12358  002540  C006  F03F         	movff	?___aodiv,dtoa@n
 12359  002544  C007  F040         	movff	?___aodiv+1,dtoa@n+1
 12360  002548  C008  F041         	movff	?___aodiv+2,dtoa@n+2
 12361  00254C  C009  F042         	movff	?___aodiv+3,dtoa@n+3
 12362  002550  C00A  F043         	movff	?___aodiv+4,dtoa@n+4
 12363  002554  C00B  F044         	movff	?___aodiv+5,dtoa@n+5
 12364  002558  C00C  F045         	movff	?___aodiv+6,dtoa@n+6
 12365  00255C  C00D  F046         	movff	?___aodiv+7,dtoa@n+7
 12366  002560                     l7286:
 12367                           
 12368                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 12369  002560  BE48               	btfsc	dtoa@i+1,7,c
 12370  002562  D020               	goto	u8060
 12371  002564  5048               	movf	dtoa@i+1,w,c
 12372  002566  E103               	bnz	u8020
 12373  002568  0447               	decf	dtoa@i,w,c
 12374  00256A  A0D8               	btfss	status,0,c
 12375  00256C  D01B               	goto	u8060
 12376  00256E                     u8020:
 12377  00256E  503F               	movf	dtoa@n,w,c
 12378  002570  1040               	iorwf	dtoa@n+1,w,c
 12379  002572  1041               	iorwf	dtoa@n+2,w,c
 12380  002574  1042               	iorwf	dtoa@n+3,w,c
 12381  002576  1043               	iorwf	dtoa@n+4,w,c
 12382  002578  1044               	iorwf	dtoa@n+5,w,c
 12383  00257A  1045               	iorwf	dtoa@n+6,w,c
 12384  00257C  1046               	iorwf	dtoa@n+7,w,c
 12385  00257E  A4D8               	btfss	status,2,c
 12386  002580  D773               	goto	l7276
 12387  002582  BE3A               	btfsc	dtoa@p+1,7,c
 12388  002584  D005               	goto	u8040
 12389  002586  503A               	movf	dtoa@p+1,w,c
 12390  002588  E102               	bnz	u8041
 12391  00258A  0439               	decf	dtoa@p,w,c
 12392  00258C  B0D8               	btfsc	status,0,c
 12393  00258E                     u8041:
 12394  00258E  D76C               	goto	l7276
 12395  002590                     u8040:
 12396  002590  BE3C               	btfsc	dtoa@w+1,7,c
 12397  002592  D008               	goto	u8060
 12398  002594  503C               	movf	dtoa@w+1,w,c
 12399  002596  E103               	bnz	u8050
 12400  002598  043B               	decf	dtoa@w,w,c
 12401  00259A  A0D8               	btfss	status,0,c
 12402  00259C  D003               	goto	u8060
 12403  00259E                     u8050:
 12404  00259E  0100               	movlb	0	; () banked
 12405  0025A0  B3D5               	btfsc	_flags& (0+255),1,b
 12406  0025A2  D762               	goto	l7276
 12407  0025A4                     u8060:
 12408                           
 12409                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 12410  0025A4  503D               	movf	dtoa@s,w,c
 12411  0025A6  103E               	iorwf	dtoa@s+1,w,c
 12412  0025A8  A4D8               	btfss	status,2,c
 12413  0025AA  D003               	goto	u8080
 12414  0025AC  0100               	movlb	0	; () banked
 12415  0025AE  A5D5               	btfss	_flags& (0+255),2,b
 12416  0025B0  D017               	goto	l7310
 12417  0025B2                     u8080:
 12418                           
 12419                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 12420  0025B2  0647               	decf	dtoa@i,f,c
 12421  0025B4  A0D8               	btfss	status,0,c
 12422  0025B6  0648               	decf	dtoa@i+1,f,c
 12423                           
 12424                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 12425  0025B8  503D               	movf	dtoa@s,w,c
 12426  0025BA  103E               	iorwf	dtoa@s+1,w,c
 12427  0025BC  A4D8               	btfss	status,2,c
 12428  0025BE  D004               	goto	l7306
 12429  0025C0  0E00               	movlw	0
 12430  0025C2  6E38               	movwf	_dtoa$1342+1,c
 12431  0025C4  0E2B               	movlw	43
 12432  0025C6  D003               	goto	L18
 12433  0025C8                     l7306:
 12434  0025C8  0E00               	movlw	0
 12435  0025CA  6E38               	movwf	_dtoa$1342+1,c
 12436  0025CC  0E2D               	movlw	45
 12437  0025CE                     L18:
 12438  0025CE  6E37               	movwf	_dtoa$1342,c
 12439  0025D0  0E50               	movlw	low _dbuf
 12440  0025D2  2447               	addwf	dtoa@i,w,c
 12441  0025D4  6ED9               	movwf	fsr2l,c
 12442  0025D6  0E01               	movlw	high _dbuf
 12443  0025D8  2048               	addwfc	dtoa@i+1,w,c
 12444  0025DA  6EDA               	movwf	fsr2h,c
 12445  0025DC  C037  FFDF         	movff	_dtoa$1342,indf2
 12446  0025E0                     l7310:
 12447                           
 12448                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 12449  0025E0  C025  F01A         	movff	dtoa@fp,pad@fp
 12450  0025E4  C026  F01B         	movff	dtoa@fp+1,pad@fp+1
 12451  0025E8  0E50               	movlw	low _dbuf
 12452  0025EA  2447               	addwf	dtoa@i,w,c
 12453  0025EC  6E1C               	movwf	pad@buf,c
 12454  0025EE  0E01               	movlw	high _dbuf
 12455  0025F0  2048               	addwfc	dtoa@i+1,w,c
 12456  0025F2  6E1D               	movwf	pad@buf+1,c
 12457  0025F4  C03B  F01E         	movff	dtoa@w,pad@p
 12458  0025F8  C03C  F01F         	movff	dtoa@w+1,pad@p+1
 12459  0025FC  EC42  F01B         	call	_pad	;wreg free
 12460  002600  C01A  F025         	movff	?_pad,?_dtoa
 12461  002604  C01B  F026         	movff	?_pad+1,?_dtoa+1
 12462  002608  0012               	return		;funcret
 12463  00260A                     __end_of_dtoa:
 12464                           	opt callstack 0
 12465                           
 12466 ;; *************** function _abs *****************
 12467 ;; Defined at:
 12468 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;  a               2   23[COMRAM] int 
 12471 ;; Auto vars:     Size  Location     Type
 12472 ;;		None
 12473 ;; Return value:  Size  Location     Type
 12474 ;;                  2   23[COMRAM] int 
 12475 ;; Registers used:
 12476 ;;		wreg, status,2, status,0
 12477 ;; Tracked objects:
 12478 ;;		On entry : 0/0
 12479 ;;		On exit  : 0/0
 12480 ;;		Unchanged: 0/0
 12481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12482 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12484 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12485 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12486 ;;Total ram usage:        4 bytes
 12487 ;; Hardware stack levels used:    1
 12488 ;; Hardware stack levels required when called:    2
 12489 ;; This function calls:
 12490 ;;		Nothing
 12491 ;; This function is called by:
 12492 ;;		_tirePositioning
 12493 ;;		_opErrorCorrectionDegrees
 12494 ;;		_dtoa
 12495 ;; This function uses a non-reentrant model
 12496 ;;
 12497                           
 12498                           	psect	text49
 12499  003F16                     __ptext49:
 12500                           	opt callstack 0
 12501  003F16                     _abs:
 12502                           	opt callstack 24
 12503                           
 12504                           ;incstack = 0
 12505  003F16  BE19               	btfsc	abs@a+1,7,c
 12506  003F18  D005               	goto	u7580
 12507  003F1A  5019               	movf	abs@a+1,w,c
 12508  003F1C  E110               	bnz	l1403
 12509  003F1E  0418               	decf	abs@a,w,c
 12510  003F20  B0D8               	btfsc	status,0,c
 12511  003F22  D00D               	goto	l1403
 12512  003F24                     u7580:
 12513  003F24  C018  F01A         	movff	abs@a,??_abs
 12514  003F28  C019  F01B         	movff	abs@a+1,??_abs+1
 12515  003F2C  1E1A               	comf	??_abs,f,c
 12516  003F2E  1E1B               	comf	??_abs+1,f,c
 12517  003F30  4A1A               	infsnz	??_abs,f,c
 12518  003F32  2A1B               	incf	??_abs+1,f,c
 12519  003F34  C01A  F018         	movff	??_abs,?_abs
 12520  003F38  C01B  F019         	movff	??_abs+1,?_abs+1
 12521  003F3C  0012               	return	
 12522  003F3E                     l1403:
 12523  003F3E  C018  F018         	movff	abs@a,?_abs
 12524  003F42  C019  F019         	movff	abs@a+1,?_abs+1
 12525  003F46  0012               	return		;funcret
 12526  003F48                     __end_of_abs:
 12527                           	opt callstack 0
 12528                           
 12529 ;; *************** function ___aomod *****************
 12530 ;; Defined at:
 12531 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 12532 ;; Parameters:    Size  Location     Type
 12533 ;;  dividend        8    5[COMRAM] long long 
 12534 ;;  divisor         8   13[COMRAM] long long 
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;  sign            1   22[COMRAM] unsigned char 
 12537 ;;  counter         1   21[COMRAM] unsigned char 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;                  8    5[COMRAM] long long 
 12540 ;; Registers used:
 12541 ;;		wreg, status,2, status,0
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12547 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12550 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12551 ;;Total ram usage:       18 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    2
 12554 ;; This function calls:
 12555 ;;		Nothing
 12556 ;; This function is called by:
 12557 ;;		_dtoa
 12558 ;; This function uses a non-reentrant model
 12559 ;;
 12560                           
 12561                           	psect	text50
 12562  0030FC                     __ptext50:
 12563                           	opt callstack 0
 12564  0030FC                     ___aomod:
 12565                           	opt callstack 24
 12566                           
 12567                           ;incstack = 0
 12568  0030FC  0E00               	movlw	0
 12569  0030FE  6E17               	movwf	___aomod@sign,c
 12570  003100  AE0D               	btfss	___aomod@dividend+7,7,c
 12571  003102  D012               	goto	l7160
 12572  003104  1E0D               	comf	___aomod@dividend+7,f,c
 12573  003106  1E0C               	comf	___aomod@dividend+6,f,c
 12574  003108  1E0B               	comf	___aomod@dividend+5,f,c
 12575  00310A  1E0A               	comf	___aomod@dividend+4,f,c
 12576  00310C  1E09               	comf	___aomod@dividend+3,f,c
 12577  00310E  1E08               	comf	___aomod@dividend+2,f,c
 12578  003110  1E07               	comf	___aomod@dividend+1,f,c
 12579  003112  6C06               	negf	___aomod@dividend,c
 12580  003114  0E00               	movlw	0
 12581  003116  2207               	addwfc	___aomod@dividend+1,f,c
 12582  003118  2208               	addwfc	___aomod@dividend+2,f,c
 12583  00311A  2209               	addwfc	___aomod@dividend+3,f,c
 12584  00311C  220A               	addwfc	___aomod@dividend+4,f,c
 12585  00311E  220B               	addwfc	___aomod@dividend+5,f,c
 12586  003120  220C               	addwfc	___aomod@dividend+6,f,c
 12587  003122  220D               	addwfc	___aomod@dividend+7,f,c
 12588  003124  0E01               	movlw	1
 12589  003126  6E17               	movwf	___aomod@sign,c
 12590  003128                     l7160:
 12591  003128  AE15               	btfss	___aomod@divisor+7,7,c
 12592  00312A  D010               	goto	l7164
 12593  00312C  1E15               	comf	___aomod@divisor+7,f,c
 12594  00312E  1E14               	comf	___aomod@divisor+6,f,c
 12595  003130  1E13               	comf	___aomod@divisor+5,f,c
 12596  003132  1E12               	comf	___aomod@divisor+4,f,c
 12597  003134  1E11               	comf	___aomod@divisor+3,f,c
 12598  003136  1E10               	comf	___aomod@divisor+2,f,c
 12599  003138  1E0F               	comf	___aomod@divisor+1,f,c
 12600  00313A  6C0E               	negf	___aomod@divisor,c
 12601  00313C  0E00               	movlw	0
 12602  00313E  220F               	addwfc	___aomod@divisor+1,f,c
 12603  003140  2210               	addwfc	___aomod@divisor+2,f,c
 12604  003142  2211               	addwfc	___aomod@divisor+3,f,c
 12605  003144  2212               	addwfc	___aomod@divisor+4,f,c
 12606  003146  2213               	addwfc	___aomod@divisor+5,f,c
 12607  003148  2214               	addwfc	___aomod@divisor+6,f,c
 12608  00314A  2215               	addwfc	___aomod@divisor+7,f,c
 12609  00314C                     l7164:
 12610  00314C  500E               	movf	___aomod@divisor,w,c
 12611  00314E  100F               	iorwf	___aomod@divisor+1,w,c
 12612  003150  1010               	iorwf	___aomod@divisor+2,w,c
 12613  003152  1011               	iorwf	___aomod@divisor+3,w,c
 12614  003154  1012               	iorwf	___aomod@divisor+4,w,c
 12615  003156  1013               	iorwf	___aomod@divisor+5,w,c
 12616  003158  1014               	iorwf	___aomod@divisor+6,w,c
 12617  00315A  1015               	iorwf	___aomod@divisor+7,w,c
 12618  00315C  B4D8               	btfsc	status,2,c
 12619  00315E  D03C               	goto	l7180
 12620  003160  0E01               	movlw	1
 12621  003162  6E16               	movwf	___aomod@counter,c
 12622  003164  D00A               	goto	l7170
 12623  003166                     l7168:
 12624  003166  90D8               	bcf	status,0,c
 12625  003168  360E               	rlcf	___aomod@divisor,f,c
 12626  00316A  360F               	rlcf	___aomod@divisor+1,f,c
 12627  00316C  3610               	rlcf	___aomod@divisor+2,f,c
 12628  00316E  3611               	rlcf	___aomod@divisor+3,f,c
 12629  003170  3612               	rlcf	___aomod@divisor+4,f,c
 12630  003172  3613               	rlcf	___aomod@divisor+5,f,c
 12631  003174  3614               	rlcf	___aomod@divisor+6,f,c
 12632  003176  3615               	rlcf	___aomod@divisor+7,f,c
 12633  003178  2A16               	incf	___aomod@counter,f,c
 12634  00317A                     l7170:
 12635  00317A  AE15               	btfss	___aomod@divisor+7,7,c
 12636  00317C  D7F4               	goto	l7168
 12637  00317E                     u7820:
 12638  00317E  500E               	movf	___aomod@divisor,w,c
 12639  003180  5C06               	subwf	___aomod@dividend,w,c
 12640  003182  500F               	movf	___aomod@divisor+1,w,c
 12641  003184  5807               	subwfb	___aomod@dividend+1,w,c
 12642  003186  5010               	movf	___aomod@divisor+2,w,c
 12643  003188  5808               	subwfb	___aomod@dividend+2,w,c
 12644  00318A  5011               	movf	___aomod@divisor+3,w,c
 12645  00318C  5809               	subwfb	___aomod@dividend+3,w,c
 12646  00318E  5012               	movf	___aomod@divisor+4,w,c
 12647  003190  580A               	subwfb	___aomod@dividend+4,w,c
 12648  003192  5013               	movf	___aomod@divisor+5,w,c
 12649  003194  580B               	subwfb	___aomod@dividend+5,w,c
 12650  003196  5014               	movf	___aomod@divisor+6,w,c
 12651  003198  580C               	subwfb	___aomod@dividend+6,w,c
 12652  00319A  5015               	movf	___aomod@divisor+7,w,c
 12653  00319C  580D               	subwfb	___aomod@dividend+7,w,c
 12654  00319E  A0D8               	btfss	status,0,c
 12655  0031A0  D010               	goto	l7176
 12656  0031A2  500E               	movf	___aomod@divisor,w,c
 12657  0031A4  5E06               	subwf	___aomod@dividend,f,c
 12658  0031A6  500F               	movf	___aomod@divisor+1,w,c
 12659  0031A8  5A07               	subwfb	___aomod@dividend+1,f,c
 12660  0031AA  5010               	movf	___aomod@divisor+2,w,c
 12661  0031AC  5A08               	subwfb	___aomod@dividend+2,f,c
 12662  0031AE  5011               	movf	___aomod@divisor+3,w,c
 12663  0031B0  5A09               	subwfb	___aomod@dividend+3,f,c
 12664  0031B2  5012               	movf	___aomod@divisor+4,w,c
 12665  0031B4  5A0A               	subwfb	___aomod@dividend+4,f,c
 12666  0031B6  5013               	movf	___aomod@divisor+5,w,c
 12667  0031B8  5A0B               	subwfb	___aomod@dividend+5,f,c
 12668  0031BA  5014               	movf	___aomod@divisor+6,w,c
 12669  0031BC  5A0C               	subwfb	___aomod@dividend+6,f,c
 12670  0031BE  5015               	movf	___aomod@divisor+7,w,c
 12671  0031C0  5A0D               	subwfb	___aomod@dividend+7,f,c
 12672  0031C2                     l7176:
 12673  0031C2  90D8               	bcf	status,0,c
 12674  0031C4  3215               	rrcf	___aomod@divisor+7,f,c
 12675  0031C6  3214               	rrcf	___aomod@divisor+6,f,c
 12676  0031C8  3213               	rrcf	___aomod@divisor+5,f,c
 12677  0031CA  3212               	rrcf	___aomod@divisor+4,f,c
 12678  0031CC  3211               	rrcf	___aomod@divisor+3,f,c
 12679  0031CE  3210               	rrcf	___aomod@divisor+2,f,c
 12680  0031D0  320F               	rrcf	___aomod@divisor+1,f,c
 12681  0031D2  320E               	rrcf	___aomod@divisor,f,c
 12682  0031D4  2E16               	decfsz	___aomod@counter,f,c
 12683  0031D6  D7D3               	goto	u7820
 12684  0031D8                     l7180:
 12685  0031D8  5017               	movf	___aomod@sign,w,c
 12686  0031DA  B4D8               	btfsc	status,2,c
 12687  0031DC  D010               	goto	l7184
 12688  0031DE  1E0D               	comf	___aomod@dividend+7,f,c
 12689  0031E0  1E0C               	comf	___aomod@dividend+6,f,c
 12690  0031E2  1E0B               	comf	___aomod@dividend+5,f,c
 12691  0031E4  1E0A               	comf	___aomod@dividend+4,f,c
 12692  0031E6  1E09               	comf	___aomod@dividend+3,f,c
 12693  0031E8  1E08               	comf	___aomod@dividend+2,f,c
 12694  0031EA  1E07               	comf	___aomod@dividend+1,f,c
 12695  0031EC  6C06               	negf	___aomod@dividend,c
 12696  0031EE  0E00               	movlw	0
 12697  0031F0  2207               	addwfc	___aomod@dividend+1,f,c
 12698  0031F2  2208               	addwfc	___aomod@dividend+2,f,c
 12699  0031F4  2209               	addwfc	___aomod@dividend+3,f,c
 12700  0031F6  220A               	addwfc	___aomod@dividend+4,f,c
 12701  0031F8  220B               	addwfc	___aomod@dividend+5,f,c
 12702  0031FA  220C               	addwfc	___aomod@dividend+6,f,c
 12703  0031FC  220D               	addwfc	___aomod@dividend+7,f,c
 12704  0031FE                     l7184:
 12705  0031FE  C006  F006         	movff	___aomod@dividend,?___aomod
 12706  003202  C007  F007         	movff	___aomod@dividend+1,?___aomod+1
 12707  003206  C008  F008         	movff	___aomod@dividend+2,?___aomod+2
 12708  00320A  C009  F009         	movff	___aomod@dividend+3,?___aomod+3
 12709  00320E  C00A  F00A         	movff	___aomod@dividend+4,?___aomod+4
 12710  003212  C00B  F00B         	movff	___aomod@dividend+5,?___aomod+5
 12711  003216  C00C  F00C         	movff	___aomod@dividend+6,?___aomod+6
 12712  00321A  C00D  F00D         	movff	___aomod@dividend+7,?___aomod+7
 12713  00321E  0012               	return		;funcret
 12714  003220                     __end_of___aomod:
 12715                           	opt callstack 0
 12716                           
 12717 ;; *************** function ___aodiv *****************
 12718 ;; Defined at:
 12719 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 12720 ;; Parameters:    Size  Location     Type
 12721 ;;  dividend        8    5[COMRAM] long long 
 12722 ;;  divisor         8   13[COMRAM] long long 
 12723 ;; Auto vars:     Size  Location     Type
 12724 ;;  quotient        8   23[COMRAM] long long 
 12725 ;;  sign            1   22[COMRAM] unsigned char 
 12726 ;;  counter         1   21[COMRAM] unsigned char 
 12727 ;; Return value:  Size  Location     Type
 12728 ;;                  8    5[COMRAM] long long 
 12729 ;; Registers used:
 12730 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12736 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12740 ;;Total ram usage:       26 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    2
 12743 ;; This function calls:
 12744 ;;		Nothing
 12745 ;; This function is called by:
 12746 ;;		_dtoa
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           	psect	text51
 12751  002BF0                     __ptext51:
 12752                           	opt callstack 0
 12753  002BF0                     ___aodiv:
 12754                           	opt callstack 24
 12755                           
 12756                           ;incstack = 0
 12757  002BF0  0E00               	movlw	0
 12758  002BF2  6E17               	movwf	___aodiv@sign,c
 12759  002BF4  AE15               	btfss	___aodiv@divisor+7,7,c
 12760  002BF6  D012               	goto	l7116
 12761  002BF8  1E15               	comf	___aodiv@divisor+7,f,c
 12762  002BFA  1E14               	comf	___aodiv@divisor+6,f,c
 12763  002BFC  1E13               	comf	___aodiv@divisor+5,f,c
 12764  002BFE  1E12               	comf	___aodiv@divisor+4,f,c
 12765  002C00  1E11               	comf	___aodiv@divisor+3,f,c
 12766  002C02  1E10               	comf	___aodiv@divisor+2,f,c
 12767  002C04  1E0F               	comf	___aodiv@divisor+1,f,c
 12768  002C06  6C0E               	negf	___aodiv@divisor,c
 12769  002C08  0E00               	movlw	0
 12770  002C0A  220F               	addwfc	___aodiv@divisor+1,f,c
 12771  002C0C  2210               	addwfc	___aodiv@divisor+2,f,c
 12772  002C0E  2211               	addwfc	___aodiv@divisor+3,f,c
 12773  002C10  2212               	addwfc	___aodiv@divisor+4,f,c
 12774  002C12  2213               	addwfc	___aodiv@divisor+5,f,c
 12775  002C14  2214               	addwfc	___aodiv@divisor+6,f,c
 12776  002C16  2215               	addwfc	___aodiv@divisor+7,f,c
 12777  002C18  0E01               	movlw	1
 12778  002C1A  6E17               	movwf	___aodiv@sign,c
 12779  002C1C                     l7116:
 12780  002C1C  AE0D               	btfss	___aodiv@dividend+7,7,c
 12781  002C1E  D012               	goto	l7122
 12782  002C20  1E0D               	comf	___aodiv@dividend+7,f,c
 12783  002C22  1E0C               	comf	___aodiv@dividend+6,f,c
 12784  002C24  1E0B               	comf	___aodiv@dividend+5,f,c
 12785  002C26  1E0A               	comf	___aodiv@dividend+4,f,c
 12786  002C28  1E09               	comf	___aodiv@dividend+3,f,c
 12787  002C2A  1E08               	comf	___aodiv@dividend+2,f,c
 12788  002C2C  1E07               	comf	___aodiv@dividend+1,f,c
 12789  002C2E  6C06               	negf	___aodiv@dividend,c
 12790  002C30  0E00               	movlw	0
 12791  002C32  2207               	addwfc	___aodiv@dividend+1,f,c
 12792  002C34  2208               	addwfc	___aodiv@dividend+2,f,c
 12793  002C36  2209               	addwfc	___aodiv@dividend+3,f,c
 12794  002C38  220A               	addwfc	___aodiv@dividend+4,f,c
 12795  002C3A  220B               	addwfc	___aodiv@dividend+5,f,c
 12796  002C3C  220C               	addwfc	___aodiv@dividend+6,f,c
 12797  002C3E  220D               	addwfc	___aodiv@dividend+7,f,c
 12798  002C40  0E01               	movlw	1
 12799  002C42  1A17               	xorwf	___aodiv@sign,f,c
 12800  002C44                     l7122:
 12801  002C44  EE20  F018         	lfsr	2,___aodiv@quotient
 12802  002C48  0E07               	movlw	7
 12803  002C4A                     u7741:
 12804  002C4A  6ADE               	clrf	postinc2,c
 12805  002C4C  06E8               	decf	wreg,f,c
 12806  002C4E  E2FD               	bc	u7741
 12807  002C50  500E               	movf	___aodiv@divisor,w,c
 12808  002C52  100F               	iorwf	___aodiv@divisor+1,w,c
 12809  002C54  1010               	iorwf	___aodiv@divisor+2,w,c
 12810  002C56  1011               	iorwf	___aodiv@divisor+3,w,c
 12811  002C58  1012               	iorwf	___aodiv@divisor+4,w,c
 12812  002C5A  1013               	iorwf	___aodiv@divisor+5,w,c
 12813  002C5C  1014               	iorwf	___aodiv@divisor+6,w,c
 12814  002C5E  1015               	iorwf	___aodiv@divisor+7,w,c
 12815  002C60  B4D8               	btfsc	status,2,c
 12816  002C62  D046               	goto	l7144
 12817  002C64  0E01               	movlw	1
 12818  002C66  6E16               	movwf	___aodiv@counter,c
 12819  002C68  D00A               	goto	l7130
 12820  002C6A                     l7128:
 12821  002C6A  90D8               	bcf	status,0,c
 12822  002C6C  360E               	rlcf	___aodiv@divisor,f,c
 12823  002C6E  360F               	rlcf	___aodiv@divisor+1,f,c
 12824  002C70  3610               	rlcf	___aodiv@divisor+2,f,c
 12825  002C72  3611               	rlcf	___aodiv@divisor+3,f,c
 12826  002C74  3612               	rlcf	___aodiv@divisor+4,f,c
 12827  002C76  3613               	rlcf	___aodiv@divisor+5,f,c
 12828  002C78  3614               	rlcf	___aodiv@divisor+6,f,c
 12829  002C7A  3615               	rlcf	___aodiv@divisor+7,f,c
 12830  002C7C  2A16               	incf	___aodiv@counter,f,c
 12831  002C7E                     l7130:
 12832  002C7E  AE15               	btfss	___aodiv@divisor+7,7,c
 12833  002C80  D7F4               	goto	l7128
 12834  002C82                     u7760:
 12835  002C82  90D8               	bcf	status,0,c
 12836  002C84  3618               	rlcf	___aodiv@quotient,f,c
 12837  002C86  3619               	rlcf	___aodiv@quotient+1,f,c
 12838  002C88  361A               	rlcf	___aodiv@quotient+2,f,c
 12839  002C8A  361B               	rlcf	___aodiv@quotient+3,f,c
 12840  002C8C  361C               	rlcf	___aodiv@quotient+4,f,c
 12841  002C8E  361D               	rlcf	___aodiv@quotient+5,f,c
 12842  002C90  361E               	rlcf	___aodiv@quotient+6,f,c
 12843  002C92  361F               	rlcf	___aodiv@quotient+7,f,c
 12844  002C94  500E               	movf	___aodiv@divisor,w,c
 12845  002C96  5C06               	subwf	___aodiv@dividend,w,c
 12846  002C98  500F               	movf	___aodiv@divisor+1,w,c
 12847  002C9A  5807               	subwfb	___aodiv@dividend+1,w,c
 12848  002C9C  5010               	movf	___aodiv@divisor+2,w,c
 12849  002C9E  5808               	subwfb	___aodiv@dividend+2,w,c
 12850  002CA0  5011               	movf	___aodiv@divisor+3,w,c
 12851  002CA2  5809               	subwfb	___aodiv@dividend+3,w,c
 12852  002CA4  5012               	movf	___aodiv@divisor+4,w,c
 12853  002CA6  580A               	subwfb	___aodiv@dividend+4,w,c
 12854  002CA8  5013               	movf	___aodiv@divisor+5,w,c
 12855  002CAA  580B               	subwfb	___aodiv@dividend+5,w,c
 12856  002CAC  5014               	movf	___aodiv@divisor+6,w,c
 12857  002CAE  580C               	subwfb	___aodiv@dividend+6,w,c
 12858  002CB0  5015               	movf	___aodiv@divisor+7,w,c
 12859  002CB2  580D               	subwfb	___aodiv@dividend+7,w,c
 12860  002CB4  A0D8               	btfss	status,0,c
 12861  002CB6  D011               	goto	l7140
 12862  002CB8  500E               	movf	___aodiv@divisor,w,c
 12863  002CBA  5E06               	subwf	___aodiv@dividend,f,c
 12864  002CBC  500F               	movf	___aodiv@divisor+1,w,c
 12865  002CBE  5A07               	subwfb	___aodiv@dividend+1,f,c
 12866  002CC0  5010               	movf	___aodiv@divisor+2,w,c
 12867  002CC2  5A08               	subwfb	___aodiv@dividend+2,f,c
 12868  002CC4  5011               	movf	___aodiv@divisor+3,w,c
 12869  002CC6  5A09               	subwfb	___aodiv@dividend+3,f,c
 12870  002CC8  5012               	movf	___aodiv@divisor+4,w,c
 12871  002CCA  5A0A               	subwfb	___aodiv@dividend+4,f,c
 12872  002CCC  5013               	movf	___aodiv@divisor+5,w,c
 12873  002CCE  5A0B               	subwfb	___aodiv@dividend+5,f,c
 12874  002CD0  5014               	movf	___aodiv@divisor+6,w,c
 12875  002CD2  5A0C               	subwfb	___aodiv@dividend+6,f,c
 12876  002CD4  5015               	movf	___aodiv@divisor+7,w,c
 12877  002CD6  5A0D               	subwfb	___aodiv@dividend+7,f,c
 12878  002CD8  8018               	bsf	___aodiv@quotient,0,c
 12879  002CDA                     l7140:
 12880  002CDA  90D8               	bcf	status,0,c
 12881  002CDC  3215               	rrcf	___aodiv@divisor+7,f,c
 12882  002CDE  3214               	rrcf	___aodiv@divisor+6,f,c
 12883  002CE0  3213               	rrcf	___aodiv@divisor+5,f,c
 12884  002CE2  3212               	rrcf	___aodiv@divisor+4,f,c
 12885  002CE4  3211               	rrcf	___aodiv@divisor+3,f,c
 12886  002CE6  3210               	rrcf	___aodiv@divisor+2,f,c
 12887  002CE8  320F               	rrcf	___aodiv@divisor+1,f,c
 12888  002CEA  320E               	rrcf	___aodiv@divisor,f,c
 12889  002CEC  2E16               	decfsz	___aodiv@counter,f,c
 12890  002CEE  D7C9               	goto	u7760
 12891  002CF0                     l7144:
 12892  002CF0  5017               	movf	___aodiv@sign,w,c
 12893  002CF2  B4D8               	btfsc	status,2,c
 12894  002CF4  D010               	goto	l7148
 12895  002CF6  1E1F               	comf	___aodiv@quotient+7,f,c
 12896  002CF8  1E1E               	comf	___aodiv@quotient+6,f,c
 12897  002CFA  1E1D               	comf	___aodiv@quotient+5,f,c
 12898  002CFC  1E1C               	comf	___aodiv@quotient+4,f,c
 12899  002CFE  1E1B               	comf	___aodiv@quotient+3,f,c
 12900  002D00  1E1A               	comf	___aodiv@quotient+2,f,c
 12901  002D02  1E19               	comf	___aodiv@quotient+1,f,c
 12902  002D04  6C18               	negf	___aodiv@quotient,c
 12903  002D06  0E00               	movlw	0
 12904  002D08  2219               	addwfc	___aodiv@quotient+1,f,c
 12905  002D0A  221A               	addwfc	___aodiv@quotient+2,f,c
 12906  002D0C  221B               	addwfc	___aodiv@quotient+3,f,c
 12907  002D0E  221C               	addwfc	___aodiv@quotient+4,f,c
 12908  002D10  221D               	addwfc	___aodiv@quotient+5,f,c
 12909  002D12  221E               	addwfc	___aodiv@quotient+6,f,c
 12910  002D14  221F               	addwfc	___aodiv@quotient+7,f,c
 12911  002D16                     l7148:
 12912  002D16  C018  F006         	movff	___aodiv@quotient,?___aodiv
 12913  002D1A  C019  F007         	movff	___aodiv@quotient+1,?___aodiv+1
 12914  002D1E  C01A  F008         	movff	___aodiv@quotient+2,?___aodiv+2
 12915  002D22  C01B  F009         	movff	___aodiv@quotient+3,?___aodiv+3
 12916  002D26  C01C  F00A         	movff	___aodiv@quotient+4,?___aodiv+4
 12917  002D2A  C01D  F00B         	movff	___aodiv@quotient+5,?___aodiv+5
 12918  002D2E  C01E  F00C         	movff	___aodiv@quotient+6,?___aodiv+6
 12919  002D32  C01F  F00D         	movff	___aodiv@quotient+7,?___aodiv+7
 12920  002D36  0012               	return		;funcret
 12921  002D38                     __end_of___aodiv:
 12922                           	opt callstack 0
 12923                           
 12924 ;; *************** function _ctoa *****************
 12925 ;; Defined at:
 12926 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12927 ;; Parameters:    Size  Location     Type
 12928 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
 12929 ;;		 -> NULL(0), 
 12930 ;;  c               1   38[COMRAM] unsigned char 
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;  w               2   39[COMRAM] int 
 12933 ;;  l               2    0        int 
 12934 ;; Return value:  Size  Location     Type
 12935 ;;                  2   36[COMRAM] int 
 12936 ;; Registers used:
 12937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12938 ;; Tracked objects:
 12939 ;;		On entry : 0/0
 12940 ;;		On exit  : 0/0
 12941 ;;		Unchanged: 0/0
 12942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12943 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12947 ;;Total ram usage:        5 bytes
 12948 ;; Hardware stack levels used:    1
 12949 ;; Hardware stack levels required when called:    9
 12950 ;; This function calls:
 12951 ;;		_pad
 12952 ;; This function is called by:
 12953 ;;		_vfpfcnvrt
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           	psect	text52
 12958  003BF0                     __ptext52:
 12959                           	opt callstack 0
 12960  003BF0                     _ctoa:
 12961                           	opt callstack 18
 12962                           
 12963                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
 12964                           
 12965                           ;incstack = 0
 12966  003BF0  0101               	movlb	1	; () banked
 12967  003BF2  5149               	movf	_width& (0+255),w,b
 12968  003BF4  114A               	iorwf	(_width+1)& (0+255),w,b
 12969  003BF6  A4D8               	btfss	status,2,c
 12970  003BF8  D005               	goto	l7242
 12971                           
 12972                           ; BSR set to: 1
 12973  003BFA  C149  F028         	movff	_width,ctoa@w
 12974  003BFE  C14A  F029         	movff	_width+1,ctoa@w+1
 12975  003C02  D006               	goto	l7244
 12976  003C04                     l7242:
 12977                           
 12978                           ; BSR set to: 1
 12979  003C04  0EFF               	movlw	255
 12980  003C06  2549               	addwf	_width& (0+255),w,b
 12981  003C08  6E28               	movwf	ctoa@w,c
 12982  003C0A  0EFF               	movlw	255
 12983  003C0C  214A               	addwfc	(_width+1)& (0+255),w,b
 12984  003C0E  6E29               	movwf	ctoa@w+1,c
 12985  003C10                     l7244:
 12986                           
 12987                           ; BSR set to: 1
 12988                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
 12989  003C10  C027  F150         	movff	ctoa@c,_dbuf
 12990                           
 12991                           ; BSR set to: 1
 12992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
 12993  003C14  0E00               	movlw	0
 12994  003C16  6F51               	movwf	(_dbuf+1)& (0+255),b
 12995                           
 12996                           ; BSR set to: 1
 12997                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
 12998  003C18  C025  F01A         	movff	ctoa@fp,pad@fp
 12999  003C1C  C026  F01B         	movff	ctoa@fp+1,pad@fp+1
 13000  003C20  0E50               	movlw	low _dbuf
 13001  003C22  6E1C               	movwf	pad@buf,c
 13002  003C24  0E01               	movlw	high _dbuf
 13003  003C26  6E1D               	movwf	pad@buf+1,c
 13004  003C28  C028  F01E         	movff	ctoa@w,pad@p
 13005  003C2C  C029  F01F         	movff	ctoa@w+1,pad@p+1
 13006  003C30  EC42  F01B         	call	_pad	;wreg free
 13007  003C34  C01A  F025         	movff	?_pad,?_ctoa
 13008  003C38  C01B  F026         	movff	?_pad+1,?_ctoa+1
 13009  003C3C  0012               	return		;funcret
 13010  003C3E                     __end_of_ctoa:
 13011                           	opt callstack 0
 13012                           
 13013 ;; *************** function _pad *****************
 13014 ;; Defined at:
 13015 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13016 ;; Parameters:    Size  Location     Type
 13017 ;;  fp              2   25[COMRAM] PTR struct _IO_FILE
 13018 ;;		 -> NULL(0), 
 13019 ;;  buf             2   27[COMRAM] PTR unsigned char 
 13020 ;;		 -> dbuf(32), 
 13021 ;;  p               2   29[COMRAM] int 
 13022 ;; Auto vars:     Size  Location     Type
 13023 ;;  w               2   34[COMRAM] int 
 13024 ;;  i               2   32[COMRAM] int 
 13025 ;; Return value:  Size  Location     Type
 13026 ;;                  2   25[COMRAM] int 
 13027 ;; Registers used:
 13028 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13029 ;; Tracked objects:
 13030 ;;		On entry : 0/0
 13031 ;;		On exit  : 0/0
 13032 ;;		Unchanged: 0/0
 13033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13034 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13035 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13036 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13037 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13038 ;;Total ram usage:       11 bytes
 13039 ;; Hardware stack levels used:    1
 13040 ;; Hardware stack levels required when called:    8
 13041 ;; This function calls:
 13042 ;;		_fputc
 13043 ;;		_fputs
 13044 ;;		_strlen
 13045 ;; This function is called by:
 13046 ;;		_ctoa
 13047 ;;		_dtoa
 13048 ;;		_utoa
 13049 ;;		_xtoa
 13050 ;; This function uses a non-reentrant model
 13051 ;;
 13052                           
 13053                           	psect	text53
 13054  003684                     __ptext53:
 13055                           	opt callstack 0
 13056  003684                     _pad:
 13057                           	opt callstack 18
 13058                           
 13059                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 13060                           
 13061                           ;incstack = 0
 13062  003684  0100               	movlb	0	; () banked
 13063  003686  A1D5               	btfss	_flags& (0+255),0,b
 13064  003688  D00A               	goto	l7062
 13065                           
 13066                           ; BSR set to: 0
 13067                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 13068  00368A  C01C  F013         	movff	pad@buf,fputs@s
 13069  00368E  C01D  F014         	movff	pad@buf+1,fputs@s+1
 13070  003692  C01A  F015         	movff	pad@fp,fputs@fp
 13071  003696  C01B  F016         	movff	pad@fp+1,fputs@fp+1
 13072  00369A  EC55  F01F         	call	_fputs	;wreg free
 13073  00369E                     l7062:
 13074                           
 13075                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 13076  00369E  BE1F               	btfsc	pad@p+1,7,c
 13077  0036A0  D005               	goto	l7066
 13078  0036A2  C01E  F023         	movff	pad@p,pad@w
 13079  0036A6  C01F  F024         	movff	pad@p+1,pad@w+1
 13080  0036AA  D004               	goto	l570
 13081  0036AC                     l7066:
 13082  0036AC  0E00               	movlw	0
 13083  0036AE  6E24               	movwf	pad@w+1,c
 13084  0036B0  0E00               	movlw	0
 13085  0036B2  6E23               	movwf	pad@w,c
 13086  0036B4                     l570:
 13087                           
 13088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 13089  0036B4  0E00               	movlw	0
 13090  0036B6  6E22               	movwf	pad@i+1,c
 13091  0036B8  0E00               	movlw	0
 13092  0036BA  6E21               	movwf	pad@i,c
 13093                           
 13094                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 13095  0036BC  D00C               	goto	l7072
 13096  0036BE                     l7068:
 13097                           
 13098                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 13099  0036BE  0E00               	movlw	0
 13100  0036C0  6E0B               	movwf	fputc@c+1,c
 13101  0036C2  0E20               	movlw	32
 13102  0036C4  6E0A               	movwf	fputc@c,c
 13103  0036C6  C01A  F00C         	movff	pad@fp,fputc@fp
 13104  0036CA  C01B  F00D         	movff	pad@fp+1,fputc@fp+1
 13105  0036CE  ECCF  F01C         	call	_fputc	;wreg free
 13106                           
 13107                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 13108  0036D2  4A21               	infsnz	pad@i,f,c
 13109  0036D4  2A22               	incf	pad@i+1,f,c
 13110  0036D6                     l7072:
 13111                           
 13112                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 13113  0036D6  5023               	movf	pad@w,w,c
 13114  0036D8  5C21               	subwf	pad@i,w,c
 13115  0036DA  5022               	movf	pad@i+1,w,c
 13116  0036DC  0A80               	xorlw	128
 13117  0036DE  6E20               	movwf	??_pad& (0+255),c
 13118  0036E0  5024               	movf	pad@w+1,w,c
 13119  0036E2  0A80               	xorlw	128
 13120  0036E4  5820               	subwfb	??_pad& (0+255),w,c
 13121  0036E6  A0D8               	btfss	status,0,c
 13122  0036E8  D7EA               	goto	l7068
 13123                           
 13124                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 13125  0036EA  0100               	movlb	0	; () banked
 13126  0036EC  B1D5               	btfsc	_flags& (0+255),0,b
 13127  0036EE  D00A               	goto	l7076
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 13131  0036F0  C01C  F013         	movff	pad@buf,fputs@s
 13132  0036F4  C01D  F014         	movff	pad@buf+1,fputs@s+1
 13133  0036F8  C01A  F015         	movff	pad@fp,fputs@fp
 13134  0036FC  C01B  F016         	movff	pad@fp+1,fputs@fp+1
 13135  003700  EC55  F01F         	call	_fputs	;wreg free
 13136  003704                     l7076:
 13137                           
 13138                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 13139  003704  C01C  F006         	movff	pad@buf,strlen@s
 13140  003708  C01D  F007         	movff	pad@buf+1,strlen@s+1
 13141  00370C  ECB0  F01E         	call	_strlen	;wreg free
 13142  003710  5023               	movf	pad@w,w,c
 13143  003712  2406               	addwf	?_strlen,w,c
 13144  003714  6E1A               	movwf	?_pad,c
 13145  003716  5024               	movf	pad@w+1,w,c
 13146  003718  2007               	addwfc	?_strlen+1,w,c
 13147  00371A  6E1B               	movwf	?_pad+1,c
 13148  00371C  0012               	return		;funcret
 13149  00371E                     __end_of_pad:
 13150                           	opt callstack 0
 13151                           
 13152 ;; *************** function _strlen *****************
 13153 ;; Defined at:
 13154 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;  s               2    5[COMRAM] PTR const unsigned char 
 13157 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), STR_52(16), 
 13158 ;;		 -> STR_50(14), STR_48(11), STR_46(9), STR_44(16), 
 13159 ;;		 -> STR_42(13), STR_40(13), STR_38(9), STR_36(13), 
 13160 ;;		 -> STR_34(14), STR_32(10), STR_28(9), STR_18(14), 
 13161 ;;		 -> STR_16(16), STR_14(14), STR_12(2), STR_11(6), 
 13162 ;;		 -> STR_9(16), STR_7(14), STR_5(15), STR_3(2), 
 13163 ;;		 -> STR_2(10), 
 13164 ;; Auto vars:     Size  Location     Type
 13165 ;;  a               2    7[COMRAM] PTR const unsigned char 
 13166 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), STR_52(16), 
 13167 ;;		 -> STR_50(14), STR_48(11), STR_46(9), STR_44(16), 
 13168 ;;		 -> STR_42(13), STR_40(13), STR_38(9), STR_36(13), 
 13169 ;;		 -> STR_34(14), STR_32(10), STR_28(9), STR_18(14), 
 13170 ;;		 -> STR_16(16), STR_14(14), STR_12(2), STR_11(6), 
 13171 ;;		 -> STR_9(16), STR_7(14), STR_5(15), STR_3(2), 
 13172 ;;		 -> STR_2(10), 
 13173 ;; Return value:  Size  Location     Type
 13174 ;;                  2    5[COMRAM] unsigned int 
 13175 ;; Registers used:
 13176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 13177 ;; Tracked objects:
 13178 ;;		On entry : 0/0
 13179 ;;		On exit  : 0/0
 13180 ;;		Unchanged: 0/0
 13181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13185 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13186 ;;Total ram usage:        4 bytes
 13187 ;; Hardware stack levels used:    1
 13188 ;; Hardware stack levels required when called:    2
 13189 ;; This function calls:
 13190 ;;		Nothing
 13191 ;; This function is called by:
 13192 ;;		_pad
 13193 ;;		_stoa
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           	psect	text54
 13198  003D60                     __ptext54:
 13199                           	opt callstack 0
 13200  003D60                     _strlen:
 13201                           	opt callstack 23
 13202                           
 13203                           ;incstack = 0
 13204  003D60  C006  F008         	movff	strlen@s,strlen@a
 13205  003D64  C007  F009         	movff	strlen@s+1,strlen@a+1
 13206  003D68  D002               	goto	l7044
 13207  003D6A                     l7042:
 13208  003D6A  4A06               	infsnz	strlen@s,f,c
 13209  003D6C  2A07               	incf	strlen@s+1,f,c
 13210  003D6E                     l7044:
 13211  003D6E  C006  FFF6         	movff	strlen@s,tblptrl
 13212  003D72  C007  FFF7         	movff	strlen@s+1,tblptrh
 13213  003D76  0E00               	movlw	low (__mediumconst shr (0+16))
 13214  003D78  6EF8               	movwf	tblptru,c
 13215  003D7A  0E0F               	movlw	(high __ramtop+-1)
 13216  003D7C  64F7               	cpfsgt	tblptrh,c
 13217  003D7E  D003               	bra	u7547
 13218  003D80  0008               	tblrd		*
 13219  003D82  50F5               	movf	tablat,w,c
 13220  003D84  D005               	bra	u7540
 13221  003D86                     u7547:
 13222  003D86  CFF6 FFE1          	movff	tblptrl,fsr1l
 13223  003D8A  CFF7 FFE2          	movff	tblptrh,fsr1h
 13224  003D8E  50E7               	movf	indf1,w,c
 13225  003D90                     u7540:
 13226  003D90  0900               	iorlw	0
 13227  003D92  A4D8               	btfss	status,2,c
 13228  003D94  D7EA               	goto	l7042
 13229  003D96  5008               	movf	strlen@a,w,c
 13230  003D98  5C06               	subwf	strlen@s,w,c
 13231  003D9A  6E06               	movwf	?_strlen,c
 13232  003D9C  5009               	movf	strlen@a+1,w,c
 13233  003D9E  5807               	subwfb	strlen@s+1,w,c
 13234  003DA0  6E07               	movwf	?_strlen+1,c
 13235  003DA2  0012               	return		;funcret
 13236  003DA4                     __end_of_strlen:
 13237                           	opt callstack 0
 13238                           
 13239 ;; *************** function _fputs *****************
 13240 ;; Defined at:
 13241 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 13242 ;; Parameters:    Size  Location     Type
 13243 ;;  s               2   18[COMRAM] PTR const unsigned char 
 13244 ;;		 -> dbuf(32), 
 13245 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
 13246 ;;		 -> NULL(0), 
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;  i               2   23[COMRAM] int 
 13249 ;;  c               1   22[COMRAM] unsigned char 
 13250 ;; Return value:  Size  Location     Type
 13251 ;;                  2   18[COMRAM] int 
 13252 ;; Registers used:
 13253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13254 ;; Tracked objects:
 13255 ;;		On entry : 0/0
 13256 ;;		On exit  : 0/0
 13257 ;;		Unchanged: 0/0
 13258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13262 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13263 ;;Total ram usage:        7 bytes
 13264 ;; Hardware stack levels used:    1
 13265 ;; Hardware stack levels required when called:    7
 13266 ;; This function calls:
 13267 ;;		_fputc
 13268 ;; This function is called by:
 13269 ;;		_pad
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273                           	psect	text55
 13274  003EAA                     __ptext55:
 13275                           	opt callstack 0
 13276  003EAA                     _fputs:
 13277                           	opt callstack 18
 13278                           
 13279                           ;incstack = 0
 13280  003EAA  0E00               	movlw	0
 13281  003EAC  6E19               	movwf	fputs@i+1,c
 13282  003EAE  0E00               	movlw	0
 13283  003EB0  6E18               	movwf	fputs@i,c
 13284  003EB2  D00B               	goto	l7038
 13285  003EB4                     l7034:
 13286  003EB4  C017  F00A         	movff	fputs@c,fputc@c
 13287  003EB8  6A0B               	clrf	fputc@c+1,c
 13288  003EBA  C015  F00C         	movff	fputs@fp,fputc@fp
 13289  003EBE  C016  F00D         	movff	fputs@fp+1,fputc@fp+1
 13290  003EC2  ECCF  F01C         	call	_fputc	;wreg free
 13291  003EC6  4A18               	infsnz	fputs@i,f,c
 13292  003EC8  2A19               	incf	fputs@i+1,f,c
 13293  003ECA                     l7038:
 13294  003ECA  5018               	movf	fputs@i,w,c
 13295  003ECC  2413               	addwf	fputs@s,w,c
 13296  003ECE  6ED9               	movwf	fsr2l,c
 13297  003ED0  5019               	movf	fputs@i+1,w,c
 13298  003ED2  2014               	addwfc	fputs@s+1,w,c
 13299  003ED4  6EDA               	movwf	fsr2h,c
 13300  003ED6  50DF               	movf	indf2,w,c
 13301  003ED8  6E17               	movwf	fputs@c,c
 13302  003EDA  5017               	movf	fputs@c,w,c
 13303  003EDC  B4D8               	btfsc	status,2,c
 13304  003EDE  0012               	return	
 13305  003EE0  D7E9               	goto	l7034
 13306  003EE2                     __end_of_fputs:
 13307                           	opt callstack 0
 13308                           
 13309 ;; *************** function _fputc *****************
 13310 ;; Defined at:
 13311 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 13312 ;; Parameters:    Size  Location     Type
 13313 ;;  c               2    9[COMRAM] int 
 13314 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
 13315 ;;		 -> NULL(0), 
 13316 ;; Auto vars:     Size  Location     Type
 13317 ;;		None
 13318 ;; Return value:  Size  Location     Type
 13319 ;;                  2    9[COMRAM] int 
 13320 ;; Registers used:
 13321 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13322 ;; Tracked objects:
 13323 ;;		On entry : 0/0
 13324 ;;		On exit  : 0/0
 13325 ;;		Unchanged: 0/0
 13326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13327 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13329 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13330 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13331 ;;Total ram usage:        9 bytes
 13332 ;; Hardware stack levels used:    1
 13333 ;; Hardware stack levels required when called:    6
 13334 ;; This function calls:
 13335 ;;		_putch
 13336 ;; This function is called by:
 13337 ;;		_pad
 13338 ;;		_stoa
 13339 ;;		_vfpfcnvrt
 13340 ;;		_fputs
 13341 ;; This function uses a non-reentrant model
 13342 ;;
 13343                           
 13344                           	psect	text56
 13345  00399E                     __ptext56:
 13346                           	opt callstack 0
 13347  00399E                     _fputc:
 13348                           	opt callstack 18
 13349                           
 13350                           ;incstack = 0
 13351  00399E  500C               	movf	fputc@fp,w,c
 13352  0039A0  100D               	iorwf	fputc@fp+1,w,c
 13353  0039A2  B4D8               	btfsc	status,2,c
 13354  0039A4  D004               	goto	u7500
 13355  0039A6  500C               	movf	fputc@fp,w,c
 13356  0039A8  100D               	iorwf	fputc@fp+1,w,c
 13357  0039AA  A4D8               	btfss	status,2,c
 13358  0039AC  D004               	goto	l7024
 13359  0039AE                     u7500:
 13360  0039AE  500A               	movf	fputc@c,w,c
 13361  0039B0  ECCF  F020         	call	_putch
 13362  0039B4  0012               	return	
 13363  0039B6                     l7024:
 13364  0039B6  EE20 F004          	lfsr	2,4
 13365  0039BA  500C               	movf	fputc@fp,w,c
 13366  0039BC  26D9               	addwf	fsr2l,f,c
 13367  0039BE  500D               	movf	fputc@fp+1,w,c
 13368  0039C0  22DA               	addwfc	fsr2h,f,c
 13369  0039C2  50DE               	movf	postinc2,w,c
 13370  0039C4  10DE               	iorwf	postinc2,w,c
 13371  0039C6  B4D8               	btfsc	status,2,c
 13372  0039C8  D016               	goto	u7520
 13373  0039CA  EE20 F004          	lfsr	2,4
 13374  0039CE  500C               	movf	fputc@fp,w,c
 13375  0039D0  26D9               	addwf	fsr2l,f,c
 13376  0039D2  500D               	movf	fputc@fp+1,w,c
 13377  0039D4  22DA               	addwfc	fsr2h,f,c
 13378  0039D6  EE10 F002          	lfsr	1,2
 13379  0039DA  500C               	movf	fputc@fp,w,c
 13380  0039DC  26E1               	addwf	fsr1l,f,c
 13381  0039DE  500D               	movf	fputc@fp+1,w,c
 13382  0039E0  22E2               	addwfc	fsr1h,f,c
 13383  0039E2  50DE               	movf	postinc2,w,c
 13384  0039E4  5CE6               	subwf	postinc1,w,c
 13385  0039E6  50E6               	movf	postinc1,w,c
 13386  0039E8  0A80               	xorlw	128
 13387  0039EA  6E12               	movwf	(??_fputc+4)& (0+255),c
 13388  0039EC  50DE               	movf	postinc2,w,c
 13389  0039EE  0A80               	xorlw	128
 13390  0039F0  5812               	subwfb	(??_fputc+4)& (0+255),w,c
 13391  0039F2  B0D8               	btfsc	status,0,c
 13392  0039F4  0012               	return	
 13393  0039F6                     u7520:
 13394  0039F6  EE20 F002          	lfsr	2,2
 13395  0039FA  500C               	movf	fputc@fp,w,c
 13396  0039FC  26D9               	addwf	fsr2l,f,c
 13397  0039FE  500D               	movf	fputc@fp+1,w,c
 13398  003A00  22DA               	addwfc	fsr2h,f,c
 13399  003A02  2ADE               	incf	postinc2,f,c
 13400  003A04  0E00               	movlw	0
 13401  003A06  22DD               	addwfc	postdec2,f,c
 13402  003A08  0012               	return		;funcret
 13403  003A0A                     __end_of_fputc:
 13404                           	opt callstack 0
 13405                           
 13406 ;; *************** function _putch *****************
 13407 ;; Defined at:
 13408 ;;		line 102 in file "lcd.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  data            1    wreg     unsigned char 
 13411 ;; Auto vars:     Size  Location     Type
 13412 ;;  data            1    8[COMRAM] unsigned char 
 13413 ;; Return value:  Size  Location     Type
 13414 ;;                  1    wreg      void 
 13415 ;; Registers used:
 13416 ;;		wreg, status,2, status,0, cstack
 13417 ;; Tracked objects:
 13418 ;;		On entry : 0/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13425 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13426 ;;Total ram usage:        1 bytes
 13427 ;; Hardware stack levels used:    1
 13428 ;; Hardware stack levels required when called:    5
 13429 ;; This function calls:
 13430 ;;		_send_byte
 13431 ;; This function is called by:
 13432 ;;		_fputc
 13433 ;; This function uses a non-reentrant model
 13434 ;;
 13435                           
 13436                           	psect	text57
 13437  00419E                     __ptext57:
 13438                           	opt callstack 0
 13439  00419E                     _putch:
 13440                           	opt callstack 18
 13441                           
 13442                           ;incstack = 0
 13443                           ;putch@data stored from wreg
 13444  00419E  6E09               	movwf	putch@data,c
 13445                           
 13446                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
 13447  0041A0  848C               	bsf	3980,2,c	;volatile
 13448                           
 13449                           ;lcd.c: 104:     send_byte((unsigned char)data);
 13450  0041A2  5009               	movf	putch@data,w,c
 13451  0041A4  ECC6  F020         	call	_send_byte
 13452  0041A8  0012               	return		;funcret
 13453  0041AA                     __end_of_putch:
 13454                           	opt callstack 0
 13455                           
 13456 ;; *************** function _atoi *****************
 13457 ;; Defined at:
 13458 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
 13459 ;; Parameters:    Size  Location     Type
 13460 ;;  s               2   12[COMRAM] PTR const unsigned char 
 13461 ;;		 -> STR_56(11), STR_55(11), STR_54(10), STR_53(13), 
 13462 ;;		 -> STR_51(3), STR_49(3), STR_47(3), STR_45(3), 
 13463 ;;		 -> STR_43(3), STR_41(3), STR_39(3), STR_37(3), 
 13464 ;;		 -> STR_35(3), STR_33(3), STR_31(3), STR_30(15), 
 13465 ;;		 -> STR_29(15), STR_27(3), STR_26(13), STR_25(11), 
 13466 ;;		 -> STR_24(10), STR_23(6), STR_22(6), STR_21(3), 
 13467 ;;		 -> STR_20(4), STR_19(17), STR_17(3), STR_15(5), 
 13468 ;;		 -> STR_13(5), STR_10(9), STR_8(3), STR_6(3), 
 13469 ;;		 -> STR_4(5), STR_1(7), 
 13470 ;; Auto vars:     Size  Location     Type
 13471 ;;  n               2   25[COMRAM] int 
 13472 ;;  neg             2   18[COMRAM] int 
 13473 ;; Return value:  Size  Location     Type
 13474 ;;                  2   12[COMRAM] int 
 13475 ;; Registers used:
 13476 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13477 ;; Tracked objects:
 13478 ;;		On entry : 0/0
 13479 ;;		On exit  : 0/0
 13480 ;;		Unchanged: 0/0
 13481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13482 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13484 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13485 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13486 ;;Total ram usage:       15 bytes
 13487 ;; Hardware stack levels used:    1
 13488 ;; Hardware stack levels required when called:    3
 13489 ;; This function calls:
 13490 ;;		___wmul
 13491 ;;		_isdigit
 13492 ;;		_isspace
 13493 ;; This function is called by:
 13494 ;;		_vfpfcnvrt
 13495 ;; This function uses a non-reentrant model
 13496 ;;
 13497                           
 13498                           	psect	text58
 13499  002FBC                     __ptext58:
 13500                           	opt callstack 0
 13501  002FBC                     _atoi:
 13502                           	opt callstack 24
 13503                           
 13504                           ;incstack = 0
 13505  002FBC  0E00               	movlw	0
 13506  002FBE  6E1B               	movwf	atoi@n+1,c
 13507  002FC0  0E00               	movlw	0
 13508  002FC2  6E1A               	movwf	atoi@n,c
 13509  002FC4  0E00               	movlw	0
 13510  002FC6  6E14               	movwf	atoi@neg+1,c
 13511  002FC8  0E00               	movlw	0
 13512  002FCA  6E13               	movwf	atoi@neg,c
 13513  002FCC  D002               	goto	l7462
 13514  002FCE                     l7460:
 13515  002FCE  4A0D               	infsnz	atoi@s,f,c
 13516  002FD0  2A0E               	incf	atoi@s+1,f,c
 13517  002FD2                     l7462:
 13518  002FD2  0E01               	movlw	1
 13519  002FD4  6E19               	movwf	_atoi$1870,c
 13520  002FD6  C00D  FFF6         	movff	atoi@s,tblptrl
 13521  002FDA  C00E  FFF7         	movff	atoi@s+1,tblptrh
 13522  002FDE                     	if	0	;tblptru may be non-zero
 13523  002FDE                     	endif
 13524  002FDE                     	if	0	;tblptru may be non-zero
 13525  002FDE                     	endif
 13526  002FDE  0008               	tblrd		*
 13527  002FE0  50F5               	movf	tablat,w,c
 13528  002FE2  0A20               	xorlw	32
 13529  002FE4  B4D8               	btfsc	status,2,c
 13530  002FE6  D018               	goto	l7470
 13531  002FE8  0EF7               	movlw	247
 13532  002FEA  6E0F               	movwf	??_atoi& (0+255),c
 13533  002FEC  0EFF               	movlw	255
 13534  002FEE  6E10               	movwf	(??_atoi+1)& (0+255),c
 13535  002FF0  C00D  FFF6         	movff	atoi@s,tblptrl
 13536  002FF4  C00E  FFF7         	movff	atoi@s+1,tblptrh
 13537  002FF8                     	if	0	;tblptru may be non-zero
 13538  002FF8                     	endif
 13539  002FF8                     	if	0	;tblptru may be non-zero
 13540  002FF8                     	endif
 13541  002FF8  0008               	tblrd		*
 13542  002FFA  50F5               	movf	tablat,w,c
 13543  002FFC  6E11               	movwf	(??_atoi+2)& (0+255),c
 13544  002FFE  6A12               	clrf	(??_atoi+3)& (0+255),c
 13545  003000  500F               	movf	??_atoi,w,c
 13546  003002  2611               	addwf	??_atoi+2,f,c
 13547  003004  5010               	movf	??_atoi+1,w,c
 13548  003006  2212               	addwfc	??_atoi+3,f,c
 13549  003008  5012               	movf	??_atoi+3,w,c
 13550  00300A  E104               	bnz	u8450
 13551  00300C  0E05               	movlw	5
 13552  00300E  5C11               	subwf	??_atoi+2,w,c
 13553  003010  A0D8               	btfss	status,0,c
 13554  003012  D002               	goto	l7470
 13555  003014                     u8450:
 13556  003014  0E00               	movlw	0
 13557  003016  6E19               	movwf	_atoi$1870,c
 13558  003018                     l7470:
 13559  003018  C019  F015         	movff	_atoi$1870,_atoi$1869
 13560  00301C  6A16               	clrf	_atoi$1869+1,c
 13561  00301E  5015               	movf	_atoi$1869,w,c
 13562  003020  1016               	iorwf	_atoi$1869+1,w,c
 13563  003022  B4D8               	btfsc	status,2,c
 13564  003024  D008               	goto	l7480
 13565  003026  D7D3               	goto	l7460
 13566  003028                     l7476:
 13567  003028  0E00               	movlw	0
 13568  00302A  6E14               	movwf	atoi@neg+1,c
 13569  00302C  0E01               	movlw	1
 13570  00302E  6E13               	movwf	atoi@neg,c
 13571  003030                     l7478:
 13572  003030  4A0D               	infsnz	atoi@s,f,c
 13573  003032  2A0E               	incf	atoi@s+1,f,c
 13574  003034  D02E               	goto	l7486
 13575  003036                     l7480:
 13576  003036  C00D  FFF6         	movff	atoi@s,tblptrl
 13577  00303A  C00E  FFF7         	movff	atoi@s+1,tblptrh
 13578  00303E                     	if	0	;tblptru may be non-zero
 13579  00303E                     	endif
 13580  00303E                     	if	0	;tblptru may be non-zero
 13581  00303E                     	endif
 13582  00303E  0008               	tblrd		*
 13583  003040  50F5               	movf	tablat,w,c
 13584  003042  6E0F               	movwf	??_atoi& (0+255),c
 13585  003044  6A10               	clrf	(??_atoi+1)& (0+255),c
 13586                           
 13587                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13588                           ; Switch size 1, requested type "simple"
 13589                           ; Number of cases is 1, Range of values is 0 to 0
 13590                           ; switch strategies available:
 13591                           ; Name         Instructions Cycles
 13592                           ; simple_byte            4     3 (average)
 13593                           ;	Chosen strategy is simple_byte
 13594  003046  5010               	movf	??_atoi+1,w,c
 13595  003048  0A00               	xorlw	0	; case 0
 13596  00304A  A4D8               	btfss	status,2,c
 13597  00304C  D022               	goto	l7486
 13598                           
 13599                           ; Switch size 1, requested type "simple"
 13600                           ; Number of cases is 2, Range of values is 43 to 45
 13601                           ; switch strategies available:
 13602                           ; Name         Instructions Cycles
 13603                           ; simple_byte            7     4 (average)
 13604                           ;	Chosen strategy is simple_byte
 13605  00304E  500F               	movf	??_atoi,w,c
 13606  003050  0A2B               	xorlw	43	; case 43
 13607  003052  B4D8               	btfsc	status,2,c
 13608  003054  D7ED               	goto	l7478
 13609  003056  0A06               	xorlw	6	; case 45
 13610  003058  B4D8               	btfsc	status,2,c
 13611  00305A  D7E6               	goto	l7476
 13612  00305C  D01A               	goto	l7486
 13613  00305E                     l7482:
 13614  00305E  C01A  F006         	movff	atoi@n,___wmul@multiplier
 13615  003062  C01B  F007         	movff	atoi@n+1,___wmul@multiplier+1
 13616  003066  0E00               	movlw	0
 13617  003068  6E09               	movwf	___wmul@multiplicand+1,c
 13618  00306A  0E0A               	movlw	10
 13619  00306C  6E08               	movwf	___wmul@multiplicand,c
 13620  00306E  EC3F  F020         	call	___wmul	;wreg free
 13621  003072  C00D  FFF6         	movff	atoi@s,tblptrl
 13622  003076  C00E  FFF7         	movff	atoi@s+1,tblptrh
 13623  00307A                     	if	0	;tblptru may be non-zero
 13624  00307A                     	endif
 13625  00307A                     	if	0	;tblptru may be non-zero
 13626  00307A                     	endif
 13627  00307A  0008               	tblrd		*
 13628  00307C  50F5               	movf	tablat,w,c
 13629  00307E  5E06               	subwf	?___wmul,f,c
 13630  003080  0E00               	movlw	0
 13631  003082  5A07               	subwfb	?___wmul+1,f,c
 13632  003084  0E30               	movlw	48
 13633  003086  2406               	addwf	?___wmul,w,c
 13634  003088  6E1A               	movwf	atoi@n,c
 13635  00308A  0E00               	movlw	0
 13636  00308C  2007               	addwfc	?___wmul+1,w,c
 13637  00308E  6E1B               	movwf	atoi@n+1,c
 13638  003090  D7CF               	goto	l7478
 13639  003092                     l7486:
 13640  003092  0ED0               	movlw	208
 13641  003094  6E0F               	movwf	??_atoi& (0+255),c
 13642  003096  0EFF               	movlw	255
 13643  003098  6E10               	movwf	(??_atoi+1)& (0+255),c
 13644  00309A  C00D  FFF6         	movff	atoi@s,tblptrl
 13645  00309E  C00E  FFF7         	movff	atoi@s+1,tblptrh
 13646  0030A2                     	if	0	;tblptru may be non-zero
 13647  0030A2                     	endif
 13648  0030A2                     	if	0	;tblptru may be non-zero
 13649  0030A2                     	endif
 13650  0030A2  0008               	tblrd		*
 13651  0030A4  50F5               	movf	tablat,w,c
 13652  0030A6  6E11               	movwf	(??_atoi+2)& (0+255),c
 13653  0030A8  6A12               	clrf	(??_atoi+3)& (0+255),c
 13654  0030AA  500F               	movf	??_atoi,w,c
 13655  0030AC  2611               	addwf	??_atoi+2,f,c
 13656  0030AE  5010               	movf	??_atoi+1,w,c
 13657  0030B0  2212               	addwfc	??_atoi+3,f,c
 13658  0030B2  5012               	movf	??_atoi+3,w,c
 13659  0030B4  E106               	bnz	u8470
 13660  0030B6  0E0A               	movlw	10
 13661  0030B8  5C11               	subwf	??_atoi+2,w,c
 13662  0030BA  B0D8               	btfsc	status,0,c
 13663  0030BC  D002               	goto	u8470
 13664  0030BE  0E01               	movlw	1
 13665  0030C0  D001               	goto	u8480
 13666  0030C2                     u8470:
 13667  0030C2  0E00               	movlw	0
 13668  0030C4                     u8480:
 13669  0030C4  6E17               	movwf	_atoi$1871,c
 13670  0030C6  6A18               	clrf	_atoi$1871+1,c
 13671  0030C8  5017               	movf	_atoi$1871,w,c
 13672  0030CA  1018               	iorwf	_atoi$1871+1,w,c
 13673  0030CC  A4D8               	btfss	status,2,c
 13674  0030CE  D7C7               	goto	l7482
 13675  0030D0  5013               	movf	atoi@neg,w,c
 13676  0030D2  1014               	iorwf	atoi@neg+1,w,c
 13677  0030D4  A4D8               	btfss	status,2,c
 13678  0030D6  D00D               	goto	l1434
 13679  0030D8  C01A  F00F         	movff	atoi@n,??_atoi
 13680  0030DC  C01B  F010         	movff	atoi@n+1,??_atoi+1
 13681  0030E0  1E0F               	comf	??_atoi,f,c
 13682  0030E2  1E10               	comf	??_atoi+1,f,c
 13683  0030E4  4A0F               	infsnz	??_atoi,f,c
 13684  0030E6  2A10               	incf	??_atoi+1,f,c
 13685  0030E8  C00F  F00D         	movff	??_atoi,?_atoi
 13686  0030EC  C010  F00E         	movff	??_atoi+1,?_atoi+1
 13687  0030F0  0012               	return	
 13688  0030F2                     l1434:
 13689  0030F2  C01A  F00D         	movff	atoi@n,?_atoi
 13690  0030F6  C01B  F00E         	movff	atoi@n+1,?_atoi+1
 13691  0030FA  0012               	return		;funcret
 13692  0030FC                     __end_of_atoi:
 13693                           	opt callstack 0
 13694                           
 13695 ;; *************** function _isspace *****************
 13696 ;; Defined at:
 13697 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;  c               2    5[COMRAM] int 
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;		None
 13702 ;; Return value:  Size  Location     Type
 13703 ;;                  2    5[COMRAM] int 
 13704 ;; Registers used:
 13705 ;;		wreg, status,2, status,0
 13706 ;; Tracked objects:
 13707 ;;		On entry : 0/0
 13708 ;;		On exit  : 0/0
 13709 ;;		Unchanged: 0/0
 13710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13711 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;Total ram usage:        7 bytes
 13716 ;; Hardware stack levels used:    1
 13717 ;; Hardware stack levels required when called:    2
 13718 ;; This function calls:
 13719 ;;		Nothing
 13720 ;; This function is called by:
 13721 ;;		_atoi
 13722 ;; This function uses a non-reentrant model
 13723 ;;
 13724                           
 13725                           	psect	text59
 13726  003E6C                     __ptext59:
 13727                           	opt callstack 0
 13728  003E6C                     _isspace:
 13729                           	opt callstack 24
 13730                           
 13731                           ;incstack = 0
 13732  003E6C  0E01               	movlw	1
 13733  003E6E  6E0C               	movwf	_isspace$1896,c
 13734  003E70  0E20               	movlw	32
 13735  003E72  1806               	xorwf	isspace@c,w,c
 13736  003E74  1007               	iorwf	isspace@c+1,w,c
 13737  003E76  B4D8               	btfsc	status,2,c
 13738  003E78  D014               	goto	l7234
 13739  003E7A  0EF7               	movlw	247
 13740  003E7C  6E08               	movwf	??_isspace& (0+255),c
 13741  003E7E  0EFF               	movlw	255
 13742  003E80  6E09               	movwf	(??_isspace+1)& (0+255),c
 13743  003E82  C006  F00A         	movff	isspace@c,??_isspace+2
 13744  003E86  C007  F00B         	movff	isspace@c+1,??_isspace+3
 13745  003E8A  5008               	movf	??_isspace,w,c
 13746  003E8C  260A               	addwf	??_isspace+2,f,c
 13747  003E8E  5009               	movf	??_isspace+1,w,c
 13748  003E90  220B               	addwfc	??_isspace+3,f,c
 13749  003E92  500B               	movf	??_isspace+3,w,c
 13750  003E94  E104               	bnz	u7930
 13751  003E96  0E05               	movlw	5
 13752  003E98  5C0A               	subwf	??_isspace+2,w,c
 13753  003E9A  A0D8               	btfss	status,0,c
 13754  003E9C  D002               	goto	l7234
 13755  003E9E                     u7930:
 13756  003E9E  0E00               	movlw	0
 13757  003EA0  6E0C               	movwf	_isspace$1896,c
 13758  003EA2                     l7234:
 13759  003EA2  C00C  F006         	movff	_isspace$1896,?_isspace
 13760  003EA6  6A07               	clrf	?_isspace+1,c
 13761  003EA8  0012               	return		;funcret
 13762  003EAA                     __end_of_isspace:
 13763                           	opt callstack 0
 13764                           
 13765 ;; *************** function _isdigit *****************
 13766 ;; Defined at:
 13767 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
 13768 ;; Parameters:    Size  Location     Type
 13769 ;;  c               2    5[COMRAM] int 
 13770 ;; Auto vars:     Size  Location     Type
 13771 ;;		None
 13772 ;; Return value:  Size  Location     Type
 13773 ;;                  2    5[COMRAM] int 
 13774 ;; Registers used:
 13775 ;;		wreg, status,2, status,0
 13776 ;; Tracked objects:
 13777 ;;		On entry : 0/0
 13778 ;;		On exit  : 0/0
 13779 ;;		Unchanged: 0/0
 13780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13781 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13783 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13784 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13785 ;;Total ram usage:        6 bytes
 13786 ;; Hardware stack levels used:    1
 13787 ;; Hardware stack levels required when called:    2
 13788 ;; This function calls:
 13789 ;;		Nothing
 13790 ;; This function is called by:
 13791 ;;		_vfpfcnvrt
 13792 ;;		_atoi
 13793 ;; This function uses a non-reentrant model
 13794 ;;
 13795                           
 13796                           	psect	text60
 13797  003FA8                     __ptext60:
 13798                           	opt callstack 0
 13799  003FA8                     _isdigit:
 13800                           	opt callstack 25
 13801                           
 13802                           ;incstack = 0
 13803  003FA8  0ED0               	movlw	208
 13804  003FAA  6E08               	movwf	??_isdigit& (0+255),c
 13805  003FAC  0EFF               	movlw	255
 13806  003FAE  6E09               	movwf	(??_isdigit+1)& (0+255),c
 13807  003FB0  C006  F00A         	movff	isdigit@c,??_isdigit+2
 13808  003FB4  C007  F00B         	movff	isdigit@c+1,??_isdigit+3
 13809  003FB8  5008               	movf	??_isdigit,w,c
 13810  003FBA  260A               	addwf	??_isdigit+2,f,c
 13811  003FBC  5009               	movf	??_isdigit+1,w,c
 13812  003FBE  220B               	addwfc	??_isdigit+3,f,c
 13813  003FC0  500B               	movf	??_isdigit+3,w,c
 13814  003FC2  E106               	bnz	u7700
 13815  003FC4  0E0A               	movlw	10
 13816  003FC6  5C0A               	subwf	??_isdigit+2,w,c
 13817  003FC8  B0D8               	btfsc	status,0,c
 13818  003FCA  D002               	goto	u7700
 13819  003FCC  0E01               	movlw	1
 13820  003FCE  D001               	goto	u7710
 13821  003FD0                     u7700:
 13822  003FD0  0E00               	movlw	0
 13823  003FD2                     u7710:
 13824  003FD2  6E06               	movwf	?_isdigit,c
 13825  003FD4  6A07               	clrf	?_isdigit+1,c
 13826  003FD6  0012               	return		;funcret
 13827  003FD8                     __end_of_isdigit:
 13828                           	opt callstack 0
 13829                           
 13830 ;; *************** function ___wmul *****************
 13831 ;; Defined at:
 13832 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 13833 ;; Parameters:    Size  Location     Type
 13834 ;;  multiplier      2    5[COMRAM] unsigned int 
 13835 ;;  multiplicand    2    7[COMRAM] unsigned int 
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;  product         2    9[COMRAM] unsigned int 
 13838 ;; Return value:  Size  Location     Type
 13839 ;;                  2    5[COMRAM] unsigned int 
 13840 ;; Registers used:
 13841 ;;		wreg, status,2, status,0, prodl, prodh
 13842 ;; Tracked objects:
 13843 ;;		On entry : 0/0
 13844 ;;		On exit  : 0/0
 13845 ;;		Unchanged: 0/0
 13846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13850 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13851 ;;Total ram usage:        6 bytes
 13852 ;; Hardware stack levels used:    1
 13853 ;; Hardware stack levels required when called:    2
 13854 ;; This function calls:
 13855 ;;		Nothing
 13856 ;; This function is called by:
 13857 ;;		_doDisplayLog
 13858 ;;		_atoi
 13859 ;; This function uses a non-reentrant model
 13860 ;;
 13861                           
 13862                           	psect	text61
 13863  00407E                     __ptext61:
 13864                           	opt callstack 0
 13865  00407E                     ___wmul:
 13866                           	opt callstack 24
 13867                           
 13868                           ;incstack = 0
 13869  00407E  5006               	movf	___wmul@multiplier,w,c
 13870  004080  0208               	mulwf	___wmul@multiplicand,c
 13871  004082  CFF3 F00A          	movff	prodl,___wmul@product
 13872  004086  CFF4 F00B          	movff	prodh,___wmul@product+1
 13873  00408A  5006               	movf	___wmul@multiplier,w,c
 13874  00408C  0209               	mulwf	___wmul@multiplicand+1,c
 13875  00408E  50F3               	movf	prodl,w,c
 13876  004090  260B               	addwf	___wmul@product+1,f,c
 13877  004092  5007               	movf	___wmul@multiplier+1,w,c
 13878  004094  0208               	mulwf	___wmul@multiplicand,c
 13879  004096  50F3               	movf	prodl,w,c
 13880  004098  260B               	addwf	___wmul@product+1,f,c
 13881  00409A  C00A  F006         	movff	___wmul@product,?___wmul
 13882  00409E  C00B  F007         	movff	___wmul@product+1,?___wmul+1
 13883  0040A2  0012               	return		;funcret
 13884  0040A4                     __end_of___wmul:
 13885                           	opt callstack 0
 13886                           
 13887 ;; *************** function _lcdInst *****************
 13888 ;; Defined at:
 13889 ;;		line 64 in file "lcd.c"
 13890 ;; Parameters:    Size  Location     Type
 13891 ;;  data            1    wreg     unsigned char 
 13892 ;; Auto vars:     Size  Location     Type
 13893 ;;  data            1    8[COMRAM] unsigned char 
 13894 ;; Return value:  Size  Location     Type
 13895 ;;                  1    wreg      void 
 13896 ;; Registers used:
 13897 ;;		wreg, status,2, status,0, cstack
 13898 ;; Tracked objects:
 13899 ;;		On entry : 0/0
 13900 ;;		On exit  : 0/0
 13901 ;;		Unchanged: 0/0
 13902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13906 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13907 ;;Total ram usage:        1 bytes
 13908 ;; Hardware stack levels used:    1
 13909 ;; Hardware stack levels required when called:    5
 13910 ;; This function calls:
 13911 ;;		_send_byte
 13912 ;; This function is called by:
 13913 ;;		_doDisplayLog
 13914 ;;		_tirePositioning
 13915 ;;		_doOperation
 13916 ;;		_main
 13917 ;;		_initLCD
 13918 ;;		_mainEEPROM
 13919 ;;		_lcd_shift_cursor
 13920 ;;		_lcd_shift_display
 13921 ;; This function uses a non-reentrant model
 13922 ;;
 13923                           
 13924                           	psect	text62
 13925  0041AA                     __ptext62:
 13926                           	opt callstack 0
 13927  0041AA                     _lcdInst:
 13928                           	opt callstack 23
 13929                           
 13930                           ;incstack = 0
 13931                           ;lcdInst@data stored from wreg
 13932  0041AA  6E09               	movwf	lcdInst@data,c
 13933                           
 13934                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
 13935  0041AC  948C               	bcf	3980,2,c	;volatile
 13936                           
 13937                           ;lcd.c: 66:     send_byte(data);
 13938  0041AE  5009               	movf	lcdInst@data,w,c
 13939  0041B0  ECC6  F020         	call	_send_byte
 13940  0041B4  0012               	return		;funcret
 13941  0041B6                     __end_of_lcdInst:
 13942                           	opt callstack 0
 13943                           
 13944 ;; *************** function _send_byte *****************
 13945 ;; Defined at:
 13946 ;;		line 55 in file "lcd.c"
 13947 ;; Parameters:    Size  Location     Type
 13948 ;;  data            1    wreg     unsigned char 
 13949 ;; Auto vars:     Size  Location     Type
 13950 ;;  data            1    7[COMRAM] unsigned char 
 13951 ;; Return value:  Size  Location     Type
 13952 ;;                  1    wreg      void 
 13953 ;; Registers used:
 13954 ;;		wreg, status,2, status,0, cstack
 13955 ;; Tracked objects:
 13956 ;;		On entry : 0/0
 13957 ;;		On exit  : 0/0
 13958 ;;		Unchanged: 0/0
 13959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13963 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13964 ;;Total ram usage:        1 bytes
 13965 ;; Hardware stack levels used:    1
 13966 ;; Hardware stack levels required when called:    4
 13967 ;; This function calls:
 13968 ;;		_send_nibble
 13969 ;; This function is called by:
 13970 ;;		_lcdInst
 13971 ;;		_initLCD
 13972 ;;		_putch
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           	psect	text63
 13977  00418C                     __ptext63:
 13978                           	opt callstack 0
 13979  00418C                     _send_byte:
 13980                           	opt callstack 24
 13981                           
 13982                           ;incstack = 0
 13983                           ;send_byte@data stored from wreg
 13984  00418C  6E08               	movwf	send_byte@data,c
 13985                           
 13986                           ;lcd.c: 57:     send_nibble(data >> 4);
 13987  00418E  3808               	swapf	send_byte@data,w,c
 13988  004190  0B0F               	andlw	15
 13989  004192  ECB2  F020         	call	_send_nibble
 13990                           
 13991                           ;lcd.c: 60:     send_nibble(data);
 13992  004196  5008               	movf	send_byte@data,w,c
 13993  004198  ECB2  F020         	call	_send_nibble
 13994  00419C  0012               	return		;funcret
 13995  00419E                     __end_of_send_byte:
 13996                           	opt callstack 0
 13997                           
 13998 ;; *************** function _send_nibble *****************
 13999 ;; Defined at:
 14000 ;;		line 44 in file "lcd.c"
 14001 ;; Parameters:    Size  Location     Type
 14002 ;;  data            1    wreg     unsigned char 
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;  data            1    6[COMRAM] unsigned char 
 14005 ;; Return value:  Size  Location     Type
 14006 ;;                  1    wreg      void 
 14007 ;; Registers used:
 14008 ;;		wreg, status,2, status,0, cstack
 14009 ;; Tracked objects:
 14010 ;;		On entry : 0/0
 14011 ;;		On exit  : 0/0
 14012 ;;		Unchanged: 0/0
 14013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14018 ;;Total ram usage:        1 bytes
 14019 ;; Hardware stack levels used:    1
 14020 ;; Hardware stack levels required when called:    3
 14021 ;; This function calls:
 14022 ;;		_pulse_e
 14023 ;; This function is called by:
 14024 ;;		_send_byte
 14025 ;;		_initLCD
 14026 ;; This function uses a non-reentrant model
 14027 ;;
 14028                           
 14029                           	psect	text64
 14030  004164                     __ptext64:
 14031                           	opt callstack 0
 14032  004164                     _send_nibble:
 14033                           	opt callstack 25
 14034                           
 14035                           ;incstack = 0
 14036                           ;send_nibble@data stored from wreg
 14037  004164  6E07               	movwf	send_nibble@data,c
 14038                           
 14039                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
 14040  004166  508C               	movf	3980,w,c	;volatile
 14041  004168  0B0F               	andlw	15
 14042  00416A  6E8C               	movwf	3980,c	;volatile
 14043                           
 14044                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
 14045  00416C  3807               	swapf	send_nibble@data,w,c
 14046  00416E  0BF0               	andlw	240
 14047  004170  108C               	iorwf	3980,w,c	;volatile
 14048  004172  6E8C               	movwf	3980,c	;volatile
 14049                           
 14050                           ;lcd.c: 48:     pulse_e();
 14051  004174  EC02  F020         	call	_pulse_e	;wreg free
 14052  004178  0012               	return		;funcret
 14053  00417A                     __end_of_send_nibble:
 14054                           	opt callstack 0
 14055                           
 14056 ;; *************** function _pulse_e *****************
 14057 ;; Defined at:
 14058 ;;		line 28 in file "lcd.c"
 14059 ;; Parameters:    Size  Location     Type
 14060 ;;		None
 14061 ;; Auto vars:     Size  Location     Type
 14062 ;;  interruptSta    1    5[COMRAM] unsigned char 
 14063 ;; Return value:  Size  Location     Type
 14064 ;;                  1    wreg      void 
 14065 ;; Registers used:
 14066 ;;		wreg
 14067 ;; Tracked objects:
 14068 ;;		On entry : 0/0
 14069 ;;		On exit  : 0/0
 14070 ;;		Unchanged: 0/0
 14071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14075 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14076 ;;Total ram usage:        1 bytes
 14077 ;; Hardware stack levels used:    1
 14078 ;; Hardware stack levels required when called:    2
 14079 ;; This function calls:
 14080 ;;		Nothing
 14081 ;; This function is called by:
 14082 ;;		_send_nibble
 14083 ;; This function uses a non-reentrant model
 14084 ;;
 14085                           
 14086                           	psect	text65
 14087  004004                     __ptext65:
 14088                           	opt callstack 0
 14089  004004                     _pulse_e:
 14090                           	opt callstack 25
 14091                           
 14092                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
 14093                           
 14094                           ;incstack = 0
 14095  004004  0E00               	movlw	0
 14096  004006  BEF2               	btfsc	4082,7,c	;volatile
 14097  004008  0E01               	movlw	1
 14098  00400A  6E06               	movwf	pulse_e@interruptState,c
 14099                           
 14100                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
 14101  00400C  9EF2               	bcf	4082,7,c	;volatile
 14102                           
 14103                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
 14104  00400E  868C               	bsf	3980,3,c	;volatile
 14105                           
 14106                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
 14107  004010  0E14               	movlw	20
 14108  004012                     u11147:
 14109  004012  2EE8               	decfsz	wreg,f,c
 14110  004014  D7FE               	bra	u11147
 14111  004016  D000               	nop2	
 14112                           
 14113                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
 14114  004018  968C               	bcf	3980,3,c	;volatile
 14115                           
 14116                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
 14117  00401A  0E53               	movlw	83
 14118  00401C                     u11157:
 14119  00401C  2EE8               	decfsz	wreg,f,c
 14120  00401E  D7FE               	bra	u11157
 14121  004020  F000               	nop	
 14122                           
 14123                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
 14124  004022  B006               	btfsc	pulse_e@interruptState,0,c
 14125  004024  D002               	bra	u7485
 14126  004026  9EF2               	bcf	4082,7,c	;volatile
 14127  004028  D001               	bra	u7486
 14128  00402A                     u7485:
 14129  00402A  8EF2               	bsf	4082,7,c	;volatile
 14130  00402C                     u7486:
 14131  00402C  0012               	return		;funcret
 14132  00402E                     __end_of_pulse_e:
 14133                           	opt callstack 0
 14134                           
 14135 ;; *************** function ___llmod *****************
 14136 ;; Defined at:
 14137 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\llmod.c"
 14138 ;; Parameters:    Size  Location     Type
 14139 ;;  dividend        4    5[COMRAM] unsigned long 
 14140 ;;  divisor         4    9[COMRAM] unsigned long 
 14141 ;; Auto vars:     Size  Location     Type
 14142 ;;  counter         1   13[COMRAM] unsigned char 
 14143 ;; Return value:  Size  Location     Type
 14144 ;;                  4    5[COMRAM] unsigned long 
 14145 ;; Registers used:
 14146 ;;		wreg, status,2, status,0
 14147 ;; Tracked objects:
 14148 ;;		On entry : 0/0
 14149 ;;		On exit  : 0/0
 14150 ;;		Unchanged: 0/0
 14151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14152 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14155 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14156 ;;Total ram usage:        9 bytes
 14157 ;; Hardware stack levels used:    1
 14158 ;; Hardware stack levels required when called:    2
 14159 ;; This function calls:
 14160 ;;		Nothing
 14161 ;; This function is called by:
 14162 ;;		_main
 14163 ;; This function uses a non-reentrant model
 14164 ;;
 14165                           
 14166                           	psect	text66
 14167  003A74                     __ptext66:
 14168                           	opt callstack 0
 14169  003A74                     ___llmod:
 14170                           	opt callstack 28
 14171                           
 14172                           ;incstack = 0
 14173  003A74  500A               	movf	___llmod@divisor,w,c
 14174  003A76  100B               	iorwf	___llmod@divisor+1,w,c
 14175  003A78  100C               	iorwf	___llmod@divisor+2,w,c
 14176  003A7A  100D               	iorwf	___llmod@divisor+3,w,c
 14177  003A7C  B4D8               	btfsc	status,2,c
 14178  003A7E  D024               	goto	l1148
 14179  003A80  0E01               	movlw	1
 14180  003A82  6E0E               	movwf	___llmod@counter,c
 14181  003A84  D006               	goto	l9158
 14182  003A86                     l9156:
 14183  003A86  90D8               	bcf	status,0,c
 14184  003A88  360A               	rlcf	___llmod@divisor,f,c
 14185  003A8A  360B               	rlcf	___llmod@divisor+1,f,c
 14186  003A8C  360C               	rlcf	___llmod@divisor+2,f,c
 14187  003A8E  360D               	rlcf	___llmod@divisor+3,f,c
 14188  003A90  2A0E               	incf	___llmod@counter,f,c
 14189  003A92                     l9158:
 14190  003A92  AE0D               	btfss	___llmod@divisor+3,7,c
 14191  003A94  D7F8               	goto	l9156
 14192  003A96                     u10680:
 14193  003A96  500A               	movf	___llmod@divisor,w,c
 14194  003A98  5C06               	subwf	___llmod@dividend,w,c
 14195  003A9A  500B               	movf	___llmod@divisor+1,w,c
 14196  003A9C  5807               	subwfb	___llmod@dividend+1,w,c
 14197  003A9E  500C               	movf	___llmod@divisor+2,w,c
 14198  003AA0  5808               	subwfb	___llmod@dividend+2,w,c
 14199  003AA2  500D               	movf	___llmod@divisor+3,w,c
 14200  003AA4  5809               	subwfb	___llmod@dividend+3,w,c
 14201  003AA6  A0D8               	btfss	status,0,c
 14202  003AA8  D008               	goto	l9164
 14203  003AAA  500A               	movf	___llmod@divisor,w,c
 14204  003AAC  5E06               	subwf	___llmod@dividend,f,c
 14205  003AAE  500B               	movf	___llmod@divisor+1,w,c
 14206  003AB0  5A07               	subwfb	___llmod@dividend+1,f,c
 14207  003AB2  500C               	movf	___llmod@divisor+2,w,c
 14208  003AB4  5A08               	subwfb	___llmod@dividend+2,f,c
 14209  003AB6  500D               	movf	___llmod@divisor+3,w,c
 14210  003AB8  5A09               	subwfb	___llmod@dividend+3,f,c
 14211  003ABA                     l9164:
 14212  003ABA  90D8               	bcf	status,0,c
 14213  003ABC  320D               	rrcf	___llmod@divisor+3,f,c
 14214  003ABE  320C               	rrcf	___llmod@divisor+2,f,c
 14215  003AC0  320B               	rrcf	___llmod@divisor+1,f,c
 14216  003AC2  320A               	rrcf	___llmod@divisor,f,c
 14217  003AC4  2E0E               	decfsz	___llmod@counter,f,c
 14218  003AC6  D7E7               	goto	u10680
 14219  003AC8                     l1148:
 14220  003AC8  C006  F006         	movff	___llmod@dividend,?___llmod
 14221  003ACC  C007  F007         	movff	___llmod@dividend+1,?___llmod+1
 14222  003AD0  C008  F008         	movff	___llmod@dividend+2,?___llmod+2
 14223  003AD4  C009  F009         	movff	___llmod@dividend+3,?___llmod+3
 14224  003AD8  0012               	return		;funcret
 14225  003ADA                     __end_of___llmod:
 14226                           	opt callstack 0
 14227                           
 14228 ;; *************** function _interruptHandler *****************
 14229 ;; Defined at:
 14230 ;;		line 1205 in file "main.c"
 14231 ;; Parameters:    Size  Location     Type
 14232 ;;		None
 14233 ;; Auto vars:     Size  Location     Type
 14234 ;;		None
 14235 ;; Return value:  Size  Location     Type
 14236 ;;                  1    wreg      void 
 14237 ;; Registers used:
 14238 ;;		wreg, status,2, status,0, cstack
 14239 ;; Tracked objects:
 14240 ;;		On entry : 0/0
 14241 ;;		On exit  : 0/0
 14242 ;;		Unchanged: 0/0
 14243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14248 ;;Total ram usage:        0 bytes
 14249 ;; Hardware stack levels used:    1
 14250 ;; Hardware stack levels required when called:    1
 14251 ;; This function calls:
 14252 ;;		_updateMotorAEncoder
 14253 ;;		_updateMotorBEncoder
 14254 ;; This function is called by:
 14255 ;;		Interrupt level 2
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           	psect	intcode
 14260  000008                     __pintcode:
 14261                           	opt callstack 0
 14262  000008                     _interruptHandler:
 14263                           	opt callstack 16
 14264                           
 14265                           ;incstack = 0
 14266  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14267  00000A  ED8D  F01E         	call	int_func,f	;refresh shadow registers
 14268                           
 14269                           	psect	intcode_body
 14270  003D1A                     __pintcode_body:
 14271                           	opt callstack 16
 14272  003D1A                     int_func:
 14273                           	opt callstack 16
 14274  003D1A  0006               	pop		; remove dummy address from shadow register refresh
 14275                           
 14276                           ;main.c: 1207:     if(INT1IF){
 14277  003D1C  A0F0               	btfss	4080,0,c	;volatile
 14278  003D1E  D005               	goto	i2l433
 14279                           
 14280                           ;main.c: 1210:         keyPressed = 1;
 14281  003D20  0E01               	movlw	1
 14282  003D22  0101               	movlb	1	; () banked
 14283  003D24  6F4F               	movwf	_keyPressed& (0+255),b	;volatile
 14284                           
 14285                           ; BSR set to: 1
 14286                           ;main.c: 1211:         INT1IF = 0;
 14287  003D26  90F0               	bcf	4080,0,c	;volatile
 14288                           
 14289                           ;main.c: 1212:     } else if (TMR0IF) {
 14290  003D28  D019               	goto	i2l436
 14291  003D2A                     i2l433:
 14292  003D2A  A4F2               	btfss	4082,2,c	;volatile
 14293  003D2C  D00C               	goto	i2l435
 14294                           
 14295                           ;main.c: 1213:     INTCONbits.TMR0IF = 0;
 14296  003D2E  94F2               	bcf	4082,2,c	;volatile
 14297                           
 14298                           ;main.c: 1214:     TMR0H = (65536ul - (((10000000 / (4ul))/(2ul))/1000ul)) >> 8;
 14299  003D30  0EFB               	movlw	251
 14300  003D32  6ED7               	movwf	4055,c	;volatile
 14301                           
 14302                           ;main.c: 1215:     TMR0L = (65536ul - (((10000000 / (4ul))/(2ul))/1000ul));
 14303  003D34  0E1E               	movlw	30
 14304  003D36  6ED6               	movwf	4054,c	;volatile
 14305                           
 14306                           ;main.c: 1216:     millisecondsMeasured++;
 14307  003D38  0E01               	movlw	1
 14308  003D3A  2675               	addwf	_millisecondsMeasured,f,c	;volatile
 14309  003D3C  0E00               	movlw	0
 14310  003D3E  2276               	addwfc	_millisecondsMeasured+1,f,c	;volatile
 14311  003D40  2277               	addwfc	_millisecondsMeasured+2,f,c	;volatile
 14312  003D42  2278               	addwfc	_millisecondsMeasured+3,f,c	;volatile
 14313                           
 14314                           ;main.c: 1217:    } else if (INT2IF){
 14315  003D44  D00B               	goto	i2l436
 14316  003D46                     i2l435:
 14317  003D46  A2F0               	btfss	4080,1,c	;volatile
 14318  003D48  D004               	goto	i2l437
 14319                           
 14320                           ;main.c: 1218:        INT2IF = 0;
 14321  003D4A  92F0               	bcf	4080,1,c	;volatile
 14322                           
 14323                           ;main.c: 1219:        updateMotorBEncoder();
 14324  003D4C  ECD2  F01E         	call	_updateMotorBEncoder	;wreg free
 14325                           
 14326                           ;main.c: 1220:    } else if (INT0IF){
 14327  003D50  D005               	goto	i2l436
 14328  003D52                     i2l437:
 14329  003D52  A2F2               	btfss	4082,1,c	;volatile
 14330  003D54  D003               	goto	i2l436
 14331                           
 14332                           ;main.c: 1221:        INT0IF = 0;
 14333  003D56  92F2               	bcf	4082,1,c	;volatile
 14334                           
 14335                           ;main.c: 1222:        updateMotorAEncoder();
 14336  003D58  ECF4  F01E         	call	_updateMotorAEncoder	;wreg free
 14337  003D5C                     i2l436:
 14338  003D5C  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14339  003D5E  0011               	retfie		f
 14340  003D60                     __end_of_interruptHandler:
 14341                           	opt callstack 0
 14342                           
 14343 ;; *************** function _updateMotorBEncoder *****************
 14344 ;; Defined at:
 14345 ;;		line 149 in file "main.c"
 14346 ;; Parameters:    Size  Location     Type
 14347 ;;		None
 14348 ;; Auto vars:     Size  Location     Type
 14349 ;;  directionPin    2    3[COMRAM] int 
 14350 ;;  interruptPin    2    1[COMRAM] int 
 14351 ;; Return value:  Size  Location     Type
 14352 ;;                  1    wreg      void 
 14353 ;; Registers used:
 14354 ;;		wreg, status,2, status,0
 14355 ;; Tracked objects:
 14356 ;;		On entry : 0/0
 14357 ;;		On exit  : 0/0
 14358 ;;		Unchanged: 0/0
 14359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14361 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14363 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14364 ;;Total ram usage:        5 bytes
 14365 ;; Hardware stack levels used:    1
 14366 ;; This function calls:
 14367 ;;		Nothing
 14368 ;; This function is called by:
 14369 ;;		_interruptHandler
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text68
 14374  003DA4                     __ptext68:
 14375                           	opt callstack 0
 14376  003DA4                     _updateMotorBEncoder:
 14377                           	opt callstack 16
 14378                           
 14379                           ;main.c: 150:   int interruptPinState = PORTBbits.RB2;
 14380                           
 14381                           ;incstack = 0
 14382  003DA4  A481               	btfss	3969,2,c	;volatile
 14383  003DA6  D003               	goto	i2u675_40
 14384  003DA8  6A01               	clrf	??_updateMotorBEncoder& (0+255),c
 14385  003DAA  2A01               	incf	??_updateMotorBEncoder& (0+255),f,c
 14386  003DAC  D001               	goto	i2u675_48
 14387  003DAE                     i2u675_40:
 14388  003DAE  6A01               	clrf	??_updateMotorBEncoder& (0+255),c
 14389  003DB0                     i2u675_48:
 14390  003DB0  5001               	movf	??_updateMotorBEncoder,w,c
 14391  003DB2  6E02               	movwf	updateMotorBEncoder@interruptPinState,c
 14392  003DB4  6A03               	clrf	updateMotorBEncoder@interruptPinState+1,c
 14393                           
 14394                           ;main.c: 151:   int directionPin = PORTCbits.RC0;
 14395  003DB6  A082               	btfss	3970,0,c	;volatile
 14396  003DB8  D003               	goto	i2u676_40
 14397  003DBA  6A01               	clrf	??_updateMotorBEncoder& (0+255),c
 14398  003DBC  2A01               	incf	??_updateMotorBEncoder& (0+255),f,c
 14399  003DBE  D001               	goto	i2u676_48
 14400  003DC0                     i2u676_40:
 14401  003DC0  6A01               	clrf	??_updateMotorBEncoder& (0+255),c
 14402  003DC2                     i2u676_48:
 14403  003DC2  5001               	movf	??_updateMotorBEncoder,w,c
 14404  003DC4  6E04               	movwf	updateMotorBEncoder@directionPin,c
 14405  003DC6  6A05               	clrf	updateMotorBEncoder@directionPin+1,c
 14406                           
 14407                           ;main.c: 152:   if(directionPin == interruptPinState){
 14408  003DC8  5002               	movf	updateMotorBEncoder@interruptPinState,w,c
 14409  003DCA  1804               	xorwf	updateMotorBEncoder@directionPin,w,c
 14410  003DCC  E108               	bnz	i2l6134
 14411  003DCE  5003               	movf	updateMotorBEncoder@interruptPinState+1,w,c
 14412  003DD0  1805               	xorwf	updateMotorBEncoder@directionPin+1,w,c
 14413  003DD2  A4D8               	btfss	status,2,c
 14414  003DD4  D004               	goto	i2l6134
 14415                           
 14416                           ;main.c: 153:     motorBDistance++;
 14417  003DD6  0100               	movlb	0	; () banked
 14418  003DD8  4BD7               	infsnz	_motorBDistance& (0+255),f,b	;volatile
 14419  003DDA  2BD8               	incf	(_motorBDistance+1)& (0+255),f,b	;volatile
 14420                           
 14421                           ;main.c: 154:   } else {
 14422  003DDC  0012               	return	
 14423  003DDE                     i2l6134:
 14424                           
 14425                           ;main.c: 155:     motorBDistance--;
 14426  003DDE  0100               	movlb	0	; () banked
 14427  003DE0  07D7               	decf	_motorBDistance& (0+255),f,b	;volatile
 14428  003DE2  A0D8               	btfss	status,0,c
 14429  003DE4  07D8               	decf	(_motorBDistance+1)& (0+255),f,b	;volatile
 14430                           
 14431                           ; BSR set to: 0
 14432  003DE6  0012               	return		;funcret
 14433  003DE8                     __end_of_updateMotorBEncoder:
 14434                           	opt callstack 0
 14435                           
 14436 ;; *************** function _updateMotorAEncoder *****************
 14437 ;; Defined at:
 14438 ;;		line 180 in file "main.c"
 14439 ;; Parameters:    Size  Location     Type
 14440 ;;		None
 14441 ;; Auto vars:     Size  Location     Type
 14442 ;;  directionPin    2    3[COMRAM] int 
 14443 ;;  interruptPin    2    1[COMRAM] int 
 14444 ;; Return value:  Size  Location     Type
 14445 ;;                  1    wreg      void 
 14446 ;; Registers used:
 14447 ;;		wreg, status,2, status,0
 14448 ;; Tracked objects:
 14449 ;;		On entry : 0/0
 14450 ;;		On exit  : 0/0
 14451 ;;		Unchanged: 0/0
 14452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14454 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14455 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14456 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14457 ;;Total ram usage:        5 bytes
 14458 ;; Hardware stack levels used:    1
 14459 ;; This function calls:
 14460 ;;		Nothing
 14461 ;; This function is called by:
 14462 ;;		_interruptHandler
 14463 ;; This function uses a non-reentrant model
 14464 ;;
 14465                           
 14466                           	psect	text69
 14467  003DE8                     __ptext69:
 14468                           	opt callstack 0
 14469  003DE8                     _updateMotorAEncoder:
 14470                           	opt callstack 16
 14471                           
 14472                           ;main.c: 181:   int interruptPinState = PORTBbits.RB0;
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;incstack = 0
 14476  003DE8  A081               	btfss	3969,0,c	;volatile
 14477  003DEA  D003               	goto	i2u678_40
 14478  003DEC  6A01               	clrf	??_updateMotorAEncoder& (0+255),c
 14479  003DEE  2A01               	incf	??_updateMotorAEncoder& (0+255),f,c
 14480  003DF0  D001               	goto	i2u678_48
 14481  003DF2                     i2u678_40:
 14482  003DF2  6A01               	clrf	??_updateMotorAEncoder& (0+255),c
 14483  003DF4                     i2u678_48:
 14484  003DF4  5001               	movf	??_updateMotorAEncoder,w,c
 14485  003DF6  6E02               	movwf	updateMotorAEncoder@interruptPinState,c
 14486  003DF8  6A03               	clrf	updateMotorAEncoder@interruptPinState+1,c
 14487                           
 14488                           ;main.c: 182:   int directionPin = PORTEbits.RE1;
 14489  003DFA  A284               	btfss	3972,1,c	;volatile
 14490  003DFC  D003               	goto	i2u679_40
 14491  003DFE  6A01               	clrf	??_updateMotorAEncoder& (0+255),c
 14492  003E00  2A01               	incf	??_updateMotorAEncoder& (0+255),f,c
 14493  003E02  D001               	goto	i2u679_48
 14494  003E04                     i2u679_40:
 14495  003E04  6A01               	clrf	??_updateMotorAEncoder& (0+255),c
 14496  003E06                     i2u679_48:
 14497  003E06  5001               	movf	??_updateMotorAEncoder,w,c
 14498  003E08  6E04               	movwf	updateMotorAEncoder@directionPin,c
 14499  003E0A  6A05               	clrf	updateMotorAEncoder@directionPin+1,c
 14500                           
 14501                           ;main.c: 183:   if(directionPin == interruptPinState){
 14502  003E0C  5002               	movf	updateMotorAEncoder@interruptPinState,w,c
 14503  003E0E  1804               	xorwf	updateMotorAEncoder@directionPin,w,c
 14504  003E10  E109               	bnz	i2l6142
 14505  003E12  5003               	movf	updateMotorAEncoder@interruptPinState+1,w,c
 14506  003E14  1805               	xorwf	updateMotorAEncoder@directionPin+1,w,c
 14507  003E16  A4D8               	btfss	status,2,c
 14508  003E18  D005               	goto	i2l6142
 14509                           
 14510                           ;main.c: 184:     motorADistance--;
 14511  003E1A  0100               	movlb	0	; () banked
 14512  003E1C  07D9               	decf	_motorADistance& (0+255),f,b	;volatile
 14513  003E1E  A0D8               	btfss	status,0,c
 14514  003E20  07DA               	decf	(_motorADistance+1)& (0+255),f,b	;volatile
 14515                           
 14516                           ;main.c: 185:   } else {
 14517  003E22  0012               	return	
 14518  003E24                     i2l6142:
 14519                           
 14520                           ;main.c: 186:     motorADistance++;
 14521  003E24  0100               	movlb	0	; () banked
 14522  003E26  4BD9               	infsnz	_motorADistance& (0+255),f,b	;volatile
 14523  003E28  2BDA               	incf	(_motorADistance+1)& (0+255),f,b	;volatile
 14524                           
 14525                           ; BSR set to: 0
 14526  003E2A  0012               	return		;funcret
 14527  003E2C                     __end_of_updateMotorAEncoder:
 14528                           	opt callstack 0
 14529                           
 14530                           	psect	rparam
 14531  0000                     
 14532                           	psect	temp
 14533  00007A                     btemp:
 14534                           	opt callstack 0
 14535  00007A                     	ds	1
 14536  0000                     int$flags	set	btemp
 14537  0000                     wtemp8	set	btemp+1
 14538  0000                     ttemp5	set	btemp+1
 14539  0000                     ttemp6	set	btemp+4
 14540  0000                     ttemp7	set	btemp+8
 14541                           tosu	equ	0xFFF
 14542                           tosh	equ	0xFFE
 14543                           tosl	equ	0xFFD
 14544                           stkptr	equ	0xFFC
 14545                           pclatu	equ	0xFFB
 14546                           pclath	equ	0xFFA
 14547                           pcl	equ	0xFF9
 14548                           tblptru	equ	0xFF8
 14549                           tblptrh	equ	0xFF7
 14550                           tblptrl	equ	0xFF6
 14551                           tablat	equ	0xFF5
 14552                           prodh	equ	0xFF4
 14553                           prodl	equ	0xFF3
 14554                           indf0	equ	0xFEF
 14555                           postinc0	equ	0xFEE
 14556                           postdec0	equ	0xFED
 14557                           preinc0	equ	0xFEC
 14558                           plusw0	equ	0xFEB
 14559                           fsr0h	equ	0xFEA
 14560                           fsr0l	equ	0xFE9
 14561                           wreg	equ	0xFE8
 14562                           indf1	equ	0xFE7
 14563                           postinc1	equ	0xFE6
 14564                           postdec1	equ	0xFE5
 14565                           preinc1	equ	0xFE4
 14566                           plusw1	equ	0xFE3
 14567                           fsr1h	equ	0xFE2
 14568                           fsr1l	equ	0xFE1
 14569                           bsr	equ	0xFE0
 14570                           indf2	equ	0xFDF
 14571                           postinc2	equ	0xFDE
 14572                           postdec2	equ	0xFDD
 14573                           preinc2	equ	0xFDC
 14574                           plusw2	equ	0xFDB
 14575                           fsr2h	equ	0xFDA
 14576                           fsr2l	equ	0xFD9
 14577                           status	equ	0xFD8


Data Sizes:
    Strings     424
    Constant    35
    Data        9
    BSS         537
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    116     121
    BANK0           128     83      91
    BANK1           256     67     120
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_77(CODE[3]), STR_73(CODE[3]), STR_68(CODE[3]), STR_63(CODE[3]), 
		 -> STR_59(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_77(CODE[3]), STR_73(CODE[3]), STR_68(CODE[3]), STR_63(CODE[3]), 
		 -> STR_59(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_56(CODE[11]), STR_55(CODE[11]), STR_54(CODE[10]), STR_53(CODE[13]), 
		 -> STR_51(CODE[3]), STR_49(CODE[3]), STR_47(CODE[3]), STR_45(CODE[3]), 
		 -> STR_43(CODE[3]), STR_41(CODE[3]), STR_39(CODE[3]), STR_37(CODE[3]), 
		 -> STR_35(CODE[3]), STR_33(CODE[3]), STR_31(CODE[3]), STR_30(CODE[15]), 
		 -> STR_29(CODE[15]), STR_27(CODE[3]), STR_26(CODE[13]), STR_25(CODE[11]), 
		 -> STR_24(CODE[10]), STR_23(CODE[6]), STR_22(CODE[6]), STR_21(CODE[3]), 
		 -> STR_20(CODE[4]), STR_19(CODE[17]), STR_17(CODE[3]), STR_15(CODE[5]), 
		 -> STR_13(CODE[5]), STR_10(CODE[9]), STR_8(CODE[3]), STR_6(CODE[3]), 
		 -> STR_4(CODE[5]), STR_1(CODE[7]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_56(CODE[11]), STR_55(CODE[11]), STR_54(CODE[10]), STR_53(CODE[13]), 
		 -> STR_51(CODE[3]), STR_49(CODE[3]), STR_47(CODE[3]), STR_45(CODE[3]), 
		 -> STR_43(CODE[3]), STR_41(CODE[3]), STR_39(CODE[3]), STR_37(CODE[3]), 
		 -> STR_35(CODE[3]), STR_33(CODE[3]), STR_31(CODE[3]), STR_30(CODE[15]), 
		 -> STR_29(CODE[15]), STR_27(CODE[3]), STR_26(CODE[13]), STR_25(CODE[11]), 
		 -> STR_24(CODE[10]), STR_23(CODE[6]), STR_22(CODE[6]), STR_21(CODE[3]), 
		 -> STR_20(CODE[4]), STR_19(CODE[17]), STR_17(CODE[3]), STR_15(CODE[5]), 
		 -> STR_13(CODE[5]), STR_10(CODE[9]), STR_8(CODE[3]), STR_6(CODE[3]), 
		 -> STR_4(CODE[5]), STR_1(CODE[7]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK1[32]), STR_52(CODE[16]), 
		 -> STR_50(CODE[14]), STR_48(CODE[11]), STR_46(CODE[9]), STR_44(CODE[16]), 
		 -> STR_42(CODE[13]), STR_40(CODE[13]), STR_38(CODE[9]), STR_36(CODE[13]), 
		 -> STR_34(CODE[14]), STR_32(CODE[10]), STR_28(CODE[9]), STR_18(CODE[14]), 
		 -> STR_16(CODE[16]), STR_14(CODE[14]), STR_12(CODE[2]), STR_11(CODE[6]), 
		 -> STR_9(CODE[16]), STR_7(CODE[14]), STR_5(CODE[15]), STR_3(CODE[2]), 
		 -> STR_2(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK1[32]), STR_52(CODE[16]), 
		 -> STR_50(CODE[14]), STR_48(CODE[11]), STR_46(CODE[9]), STR_44(CODE[16]), 
		 -> STR_42(CODE[13]), STR_40(CODE[13]), STR_38(CODE[9]), STR_36(CODE[13]), 
		 -> STR_34(CODE[14]), STR_32(CODE[10]), STR_28(CODE[9]), STR_18(CODE[14]), 
		 -> STR_16(CODE[16]), STR_14(CODE[14]), STR_12(CODE[2]), STR_11(CODE[6]), 
		 -> STR_9(CODE[16]), STR_7(CODE[14]), STR_5(CODE[15]), STR_3(CODE[2]), 
		 -> STR_2(CODE[10]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_56(CODE[11]), STR_55(CODE[11]), STR_54(CODE[10]), STR_53(CODE[13]), 
		 -> STR_51(CODE[3]), STR_49(CODE[3]), STR_47(CODE[3]), STR_45(CODE[3]), 
		 -> STR_43(CODE[3]), STR_41(CODE[3]), STR_39(CODE[3]), STR_37(CODE[3]), 
		 -> STR_35(CODE[3]), STR_33(CODE[3]), STR_31(CODE[3]), STR_30(CODE[15]), 
		 -> STR_29(CODE[15]), STR_27(CODE[3]), STR_26(CODE[13]), STR_25(CODE[11]), 
		 -> STR_24(CODE[10]), STR_23(CODE[6]), STR_22(CODE[6]), STR_21(CODE[3]), 
		 -> STR_20(CODE[4]), STR_19(CODE[17]), STR_17(CODE[3]), STR_15(CODE[5]), 
		 -> STR_13(CODE[5]), STR_10(CODE[9]), STR_8(CODE[3]), STR_6(CODE[3]), 
		 -> STR_4(CODE[5]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1909_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_56(CODE[11]), STR_55(CODE[11]), STR_54(CODE[10]), STR_53(CODE[13]), 
		 -> STR_51(CODE[3]), STR_49(CODE[3]), STR_47(CODE[3]), STR_45(CODE[3]), 
		 -> STR_43(CODE[3]), STR_41(CODE[3]), STR_39(CODE[3]), STR_37(CODE[3]), 
		 -> STR_35(CODE[3]), STR_33(CODE[3]), STR_31(CODE[3]), STR_30(CODE[15]), 
		 -> STR_29(CODE[15]), STR_27(CODE[3]), STR_26(CODE[13]), STR_25(CODE[11]), 
		 -> STR_24(CODE[10]), STR_23(CODE[6]), STR_22(CODE[6]), STR_21(CODE[3]), 
		 -> STR_20(CODE[4]), STR_19(CODE[17]), STR_17(CODE[3]), STR_15(CODE[5]), 
		 -> STR_13(CODE[5]), STR_10(CODE[9]), STR_8(CODE[3]), STR_6(CODE[3]), 
		 -> STR_4(CODE[5]), STR_1(CODE[7]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_56(CODE[11]), STR_55(CODE[11]), STR_54(CODE[10]), STR_53(CODE[13]), 
		 -> STR_51(CODE[3]), STR_49(CODE[3]), STR_47(CODE[3]), STR_45(CODE[3]), 
		 -> STR_43(CODE[3]), STR_41(CODE[3]), STR_39(CODE[3]), STR_37(CODE[3]), 
		 -> STR_35(CODE[3]), STR_33(CODE[3]), STR_31(CODE[3]), STR_30(CODE[15]), 
		 -> STR_29(CODE[15]), STR_27(CODE[3]), STR_26(CODE[13]), STR_25(CODE[11]), 
		 -> STR_24(CODE[10]), STR_23(CODE[6]), STR_22(CODE[6]), STR_21(CODE[3]), 
		 -> STR_20(CODE[4]), STR_19(CODE[17]), STR_17(CODE[3]), STR_15(CODE[5]), 
		 -> STR_13(CODE[5]), STR_10(CODE[9]), STR_8(CODE[3]), STR_6(CODE[3]), 
		 -> STR_4(CODE[5]), STR_1(CODE[7]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_56(CODE[11]), STR_55(CODE[11]), STR_54(CODE[10]), STR_53(CODE[13]), 
		 -> STR_51(CODE[3]), STR_49(CODE[3]), STR_47(CODE[3]), STR_45(CODE[3]), 
		 -> STR_43(CODE[3]), STR_41(CODE[3]), STR_39(CODE[3]), STR_37(CODE[3]), 
		 -> STR_35(CODE[3]), STR_33(CODE[3]), STR_31(CODE[3]), STR_30(CODE[15]), 
		 -> STR_29(CODE[15]), STR_27(CODE[3]), STR_26(CODE[13]), STR_25(CODE[11]), 
		 -> STR_24(CODE[10]), STR_23(CODE[6]), STR_22(CODE[6]), STR_21(CODE[3]), 
		 -> STR_20(CODE[4]), STR_19(CODE[17]), STR_17(CODE[3]), STR_15(CODE[5]), 
		 -> STR_13(CODE[5]), STR_10(CODE[9]), STR_8(CODE[3]), STR_6(CODE[3]), 
		 -> STR_4(CODE[5]), STR_1(CODE[7]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), STR_52(CODE[16]), STR_50(CODE[14]), STR_48(CODE[11]), 
		 -> STR_46(CODE[9]), STR_44(CODE[16]), STR_42(CODE[13]), STR_40(CODE[13]), 
		 -> STR_38(CODE[9]), STR_36(CODE[13]), STR_34(CODE[14]), STR_32(CODE[10]), 
		 -> STR_28(CODE[9]), STR_18(CODE[14]), STR_16(CODE[16]), STR_14(CODE[14]), 
		 -> STR_12(CODE[2]), STR_11(CODE[6]), STR_9(CODE[16]), STR_7(CODE[14]), 
		 -> STR_5(CODE[15]), STR_3(CODE[2]), STR_2(CODE[10]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), STR_52(CODE[16]), STR_50(CODE[14]), STR_48(CODE[11]), 
		 -> STR_46(CODE[9]), STR_44(CODE[16]), STR_42(CODE[13]), STR_40(CODE[13]), 
		 -> STR_38(CODE[9]), STR_36(CODE[13]), STR_34(CODE[14]), STR_32(CODE[10]), 
		 -> STR_28(CODE[9]), STR_18(CODE[14]), STR_16(CODE[16]), STR_14(CODE[14]), 
		 -> STR_12(CODE[2]), STR_11(CODE[6]), STR_9(CODE[16]), STR_7(CODE[14]), 
		 -> STR_5(CODE[15]), STR_3(CODE[2]), STR_2(CODE[10]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), STR_52(CODE[16]), STR_50(CODE[14]), 
		 -> STR_48(CODE[11]), STR_46(CODE[9]), STR_44(CODE[16]), STR_42(CODE[13]), 
		 -> STR_40(CODE[13]), STR_38(CODE[9]), STR_36(CODE[13]), STR_34(CODE[14]), 
		 -> STR_32(CODE[10]), STR_28(CODE[9]), STR_18(CODE[14]), STR_16(CODE[16]), 
		 -> STR_14(CODE[14]), STR_12(CODE[2]), STR_11(CODE[6]), STR_9(CODE[16]), 
		 -> STR_7(CODE[14]), STR_5(CODE[15]), STR_3(CODE[2]), STR_2(CODE[10]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 


Critical Paths under _main in COMRAM

    _robotInit->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _doOperation->_tirePositioning
    _tirePositioning->_setMotorSpeeds
    _sendArduinoTireOperationStartMessage->_I2C_Master_Write
    _sendArduinoTireDropRequest->_I2C_Master_Write
    _sendArduinoAbortOperationMessage->_I2C_Master_Write
    _requestIsTireDropDone->_I2C_Master_Read
    _requestIsTireDropDone->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _errorCorrectedMove->_setMotorSpeeds
    _setMotorSpeeds->_set_pwm_duty_cycle
    _set_pwm_duty_cycle->___fltol
    ___fltol->___flsub
    ___flmul->___xxtofl
    ___fldiv->___flmul
    ___flsub->___fldiv
    ___fladd->___flmul
    _doDisplayLog->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _utoa->_pad
    _stoa->_fputc
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _atoi->_isspace
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->_updateMotorAEncoder
    _interruptHandler->_updateMotorBEncoder

Critical Paths under _main in BANK0

    _main->_doOperation
    _doOperation->_tirePositioning
    _tirePositioning->_printf
    _opErrorCorrectionDegrees->_errorCorrectedMove
    _errorCorrectedMove->_setMotorSpeeds
    _doDisplayLog->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doOperation

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0  313538
                                             65 BANK0     18    18      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___llmod
                       _doDisplayLog
                        _doOperation
                            _lcdInst
                             _printf
                      _replaceOldLog
                          _robotInit
 ---------------------------------------------------------------------------------
 (1) _robotInit                                            0     0      0     892
                        _EncoderInit
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     350
                                              9 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                             18 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     421
                                              5 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _EncoderInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _replaceOldLog                                        2     2      0     130
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _doOperation                                         75    75      0  217137
                                             61 BANK0      4     4      0
                                              0 BANK1     67    67      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                         _TIMER_INIT
                            ___awmod
                 _errorCorrectedMove
                     _init_motor_PWM
                            _lcdInst
                            _opDelay
           _opErrorCorrectionDegrees
                             _printf
              _requestIsTireDropDone
   _sendArduinoAbortOperationMessage
         _sendArduinoTireDropRequest
_sendArduinoTireOperationStartMessag
                     _setMotorSpeeds
                    _tirePositioning
 ---------------------------------------------------------------------------------
 (2) _tirePositioning                                     25    21      4   65678
                                            113 COMRAM     3     3      0
                                             39 BANK0     22    18      4
                            ___awdiv
                                _abs
                            _lcdInst
                            _opDelay
                             _printf
                     _setMotorSpeeds
 ---------------------------------------------------------------------------------
 (3) _opDelay                                             18    12      6     636
                                              5 COMRAM    18    12      6
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     625
                                              5 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendArduinoTireOperationStartMessage                 1     1      0    1325
                                              8 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _sendArduinoTireDropRequest                           1     1      0    1325
                                              8 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _sendArduinoAbortOperationMessage                     1     1      0    1325
                                              8 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _requestIsTireDropDone                                1     1      0    1390
                                              8 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1291
                                              6 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                              6 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _opErrorCorrectionDegrees                            23     9     14   41474
                                            113 COMRAM     1     1      0
                                             32 BANK0     22     8     14
                           ___xxtofl
                                _abs
                 _errorCorrectedMove
 ---------------------------------------------------------------------------------
 (3) _errorCorrectedMove                                  24    10     14   38007
                                              8 BANK0     24    10     14
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                     _setMotorSpeeds
 ---------------------------------------------------------------------------------
 (3) _setMotorSpeeds                                      14     8      6   17872
                                            107 COMRAM     6     0      6
                                              0 BANK0      8     8      0
                           ___xxtofl
                 _set_pwm_duty_cycle
 ---------------------------------------------------------------------------------
 (4) _set_pwm_duty_cycle                                  20    12      8   11264
                                             87 COMRAM    20    12      8
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4    2096
                                              5 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4    1057
                                             77 COMRAM    10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    4313
                                             19 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8     626
                                              5 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2543
                                             44 COMRAM    25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    4727
                                             69 COMRAM     8     0      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             16     8      8    3982
                                             44 COMRAM    16     8      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _init_motor_PWM                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     613
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _TIMER_INIT                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDisplayLog                                        13    11      2   47732
                                            101 COMRAM    11    11      0
                                             39 BANK0      2     0      2
                             ___wmul
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              14     4     10   44856
                                             97 COMRAM     4     4      0
                                             29 BANK0     10     0     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   41667
                                             95 COMRAM     2     2      0
                                             23 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           55    49      6   41059
                                             75 COMRAM    20    14      6
                                              0 BANK0     23    23      0
                               _atoi
                               _ctoa
                               _dtoa
                              _fputc
                            _isdigit
                               _stoa
                            _strncmp
                               _utoa
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                39    28     11    7827
                                             36 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (5) _toupper                                              8     6      2     512
                                             11 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (6) _islower                                              6     4      2     191
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     191
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _isalpha                                              6     4      2     191
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    7119
                                             36 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                              5 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                              5 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (4) _strncmp                                             11     5      6    1675
                                              5 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (4) _stoa                                                22    18      4    2797
                                             18 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    8423
                                             36 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     633
                                             23 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              5 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              5 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    5806
                                             36 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    5527
                                             25 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     310
                                              5 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    2142
                                             18 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    1642
                                              9 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0     158
                                              8 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    2945
                                             12 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     281
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1842
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     158
                                              8 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (3) _send_byte                                            1     1      0     127
                                              7 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (3) _send_nibble                                          1     1      0      65
                                              6 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (4) _pulse_e                                              1     1      0      34
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___llmod                                              9     1      8     412
                                              5 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _interruptHandler                                    0     0      0      92
                _updateMotorAEncoder
                _updateMotorBEncoder
 ---------------------------------------------------------------------------------
 (15) _updateMotorBEncoder                                 5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (15) _updateMotorAEncoder                                 5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   ___llmod
   _doDisplayLog
     ___wmul
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _ctoa
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _doOperation
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _TIMER_INIT
     ___awmod
     _errorCorrectedMove
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _setMotorSpeeds
         ___xxtofl
         _set_pwm_duty_cycle
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flge
           ___flmul
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
     _init_motor_PWM
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _opDelay
     _opErrorCorrectionDegrees
       ___xxtofl
       _abs
         ___aomod (ARG)
       _errorCorrectedMove
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _setMotorSpeeds
           ___xxtofl
           _set_pwm_duty_cycle
             ___fldiv
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flge
             ___flmul
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _ctoa
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _stoa
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _strlen
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
     _requestIsTireDropDone
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _sendArduinoAbortOperationMessage
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _sendArduinoTireDropRequest
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _sendArduinoTireOperationStartMessage
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _setMotorSpeeds
       ___xxtofl
       _set_pwm_duty_cycle
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flge
         ___flmul
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
     _tirePositioning
       ___awdiv
       _abs
         ___aomod (ARG)
       _lcdInst
         _send_byte
           _send_nibble
             _pulse_e
       _opDelay
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _ctoa
               _pad
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
                 _fputs
                   _fputc
                     _putch
                       _send_byte
                         _send_nibble
                           _pulse_e
                 _strlen
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
                 _fputs
                   _fputc
                     _putch
                       _send_byte
                         _send_nibble
                           _pulse_e
                 _strlen
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _isdigit
             _stoa
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
                 _fputs
                   _fputc
                     _putch
                       _send_byte
                         _send_nibble
                           _pulse_e
                 _strlen
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
                 _fputs
                   _fputc
                     _putch
                       _send_byte
                         _send_nibble
                           _pulse_e
                 _strlen
               _toupper
                 _islower
       _setMotorSpeeds
         ___xxtofl
         _set_pwm_duty_cycle
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flge
           ___flmul
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e
         _isdigit
         _stoa
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _strlen
         _strncmp
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _xtoa
           _isalpha
           _isupper
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
           _toupper
             _islower
   _replaceOldLog
   _robotInit
     _EncoderInit
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _send_byte
           _send_nibble
             _pulse_e
       _send_byte
         _send_nibble
           _pulse_e
       _send_nibble
         _pulse_e

 _interruptHandler (ROOT)
   _updateMotorAEncoder
   _updateMotorBEncoder

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     1E0      37       12.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     43      78       7       46.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     53      5B       5       71.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     74      79       1       96.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     32C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 01 18:08:16 2019

                                 ___fldiv@aexp 0045                                   ___fldiv@bexp 0044  
                                 ___fldiv@sign 003D                                    __CFG_CPD$ON 000000  
                                 ___awdiv@sign 000B                            ___wmul@multiplicand 0008  
                                  __CFG_BORV$3 000000                 doOperation@motorBStartDistance 012C  
                                 __CFG_CP0$OFF 000000                                   __CFG_CP1$OFF 000000  
                                 __CFG_CP2$OFF 000000                                   __CFG_CP3$OFF 000000  
                                  __CFG_OSC$HS 000000               __end_of_opErrorCorrectionDegrees 352C  
                                          l410 11AC                                            l252 372A  
                                          l254 373A                                            l265 19B6  
                                          l617 2D9E                                            l570 36B4  
                                          l651 2628                                            l636 2A5C  
                                          l653 2630                                            l590 243E  
                                          l638 2A64                                            l755 38A8  
                                          l588 2436                                            l993 32B4  
                                 __CFG_CPB$OFF 000000                                            _PR2 000FCB  
                                          _PSA 007EAB                                            _abs 3F16  
                                          _pad 3684                                   ___awmod@sign 000B  
                             ??_init_motor_PWM 0006                                            wreg 000FE8  
                                 ___flmul@aexp 0021                                   ___flmul@bexp 0026  
                                 ___flmul@sign 0020                                   ___flmul@temp 002B  
                                 ___flmul@prod 0027                              _doDisplayLog$2270 006F  
                   __end_of_errorCorrectedMove 23C2                                   __CFG_LVP$OFF 000000  
                                 ___fltol@exp1 0057                                   __CFG_WDT$OFF 000000  
                                         ?_abs 0018                                           l1312 2048  
                                         l1403 3F3E                                           l1323 20B6  
                                         l1148 3AC8                                           l1324 20B2  
                                         l1166 339C                                           l1510 3CCA  
                                         l1342 15EA                                           l1351 1802  
                                         l1176 35B8                                           l1352 17FE  
                                         l1273 1DDE                                           l1257 1D0C  
                                         l1434 30F2                                           l1282 1E44  
                                         l1258 1CEA                                           l1283 1E40  
                                         l1390 2F38                                           l1359 1888  
                                         l1383 2EBA                                           ?_pad 001A  
                                         l7024 39B6                                           l7034 3EB4  
                                         l7042 3D6A                                           l7130 2C7E  
                                         l7122 2C44                                           l8002 02CA  
                                         l7044 3D6E                                           l7140 2CDA  
                                         l7116 2C1C                                           l8020 0448  
                                         l8012 03DA                                           l7038 3ECA  
                                         l7062 369E                                           l7310 25E0  
                                         l7206 3386                                           l7222 35A2  
                                         l7214 3546                                           l8110 1BFA  
                                         l7072 36D6                                           l7128 2C6A  
                                         l7144 2CF0                                           l7160 3128  
                                         l7216 355A                                           l8200 1D30  
                                         l7234 3EA2                                           l7066 36AC  
                                         l7242 3C04                                           l7170 317A  
                                         l7306 25C8                                           l7322 2D62  
                                         l7402 2644                                           l8050 0670  
                                         l8210 1D56                                           l8130 1C3E  
                                         l8106 1BF6                                           l7076 3704  
                                         l7068 36BE                                           l7244 3C10  
                                         l7148 2D16                                           l7180 31D8  
                                         l7164 314C                                           l7340 2DEC  
                                         l7332 2DB6                                           l8036 05A0  
                                         l8028 04E4                                           l8300 372E  
                                         l9012 0B7E                                           l7350 2E46  
                                         l7430 2724                                           l8070 07BE  
                                         l8142 1C62                                           l8134 1C42  
                                         l9014 0B84                                           l7184 31FE  
                                         l7176 31C2                                           l7168 3166  
                                         l7272 2458                                           l7336 2DCE  
                                         l7416 2696                                           l7408 2674  
                                         l8064 0782                                           l8080 07E0  
                                         l8320 3BD4                                           l8208 1D52  
                                         l8304 373E                                           l9016 0B8C  
                                         l7258 2418                                           l7354 2E5E  
                                         l7346 2E2A                                           l7506 3604  
                                         l7194 3316                                           l8074 07C8  
                                         l8218 1D68                                           l7602 2046  
                                         l9050 0C9C                                           l8402 385A  
                                         l7460 2FCE                                           l7276 2468  
                                         l7508 3612                                           l7196 332A  
                                         l8236 1E02                                           l8252 1E22  
                                         l8228 1DCE                                           l8172 1C9E  
                                         l7532 1F02                                           l8340 3AEA  
                                         l8404 3866                                           l7470 3018  
                                         l7462 2FD2                                           l7286 2560  
                                         l7454 2812                                           l7438 279A  
                                         l8318 3BAE                                           l8246 1E18  
                                         l7614 207C                                           l9054 0CAA  
                                         l8414 389A                                           l9302 100A  
                                         l7480 3036                                           l7368 2A9C  
                                         l8280 1EB0                                           l8272 1E8A  
                                         l8184 1CF8                                           l7608 205E  
                                         l7552 1F42                                           l7536 1F06  
                                         l7800 329E                                           l8440 37F6  
                                         l8432 37D8                                           l9080 0D52  
                                         l9064 0CDA                                           l9048 0C96  
                                         l7482 305E                                           l7378 2B88  
                                         l8186 1CFC                                           l7650 2156  
                                         l7642 2148                                           l7634 20FA  
                                         l7570 1F90                                           l8450 3816  
                                         l8426 37C8                                           l9058 0CBA  
                                         l9074 0CFA                                           l9146 3C46  
                                         l9322 1080                                           l9226 0DDA  
                                         l9164 3ABA                                           l9156 3A86  
                                         l7476 3028                                           l8284 1EB8  
                                         l7564 1F7A                                           l7556 1F46  
                                         l7740 17AA                                           l8380 2374  
                                         l9092 0D7C                                           l9076 0D36  
                                         l9316 1070                                           l9244 0E6E  
                                         l9236 0E40                                           l9332 10AA  
                                         l9158 3A92                                           l7486 3092  
                                         l7478 3030                                           l8286 1EBA  
                                         l7638 211E                                           l7806 32EC  
                                         l7670 1596                                           l8438 37EE  
                                         l8454 3820                                           l8550 1962  
                                         l9350 1128                                           l9334 10DA  
                                         l8800 1456                                           l8720 394E  
                                         l7648 2154                                           l7672 159A  
                                         l7832 3426                                           l7816 33DC  
                                         l8392 23A4                                           l8384 2380  
                                         l8616 1BBE                                           l8608 1B92  
                                         l8544 194A                                           l8536 190A  
                                         l9088 0D70                                           l9096 0D82  
                                         l9264 0F1A                                           l8802 1472  
                                         l7578 1FA8                                           l7770 1864  
                                         l7746 17C8                                           l7690 15DA  
                                         l7674 15AA                                           l7850 3466  
                                         l7842 343E                                           l8458 382E  
                                         l8554 1982                                           l9370 1166  
                                         l9362 114E                                           l9354 1134  
                                         l9346 111C                                           l9282 0F82  
                                         l7940 006C                                           l8740 3994  
                                         l8732 397C                                           l8724 395C  
                                         l8716 3942                                           l7596 2020  
                                         l7588 1FF8                                           l7844 344A  
                                         l7836 3436                                           l7860 2ECA  
                                         l8388 2398                                           l8572 1A24  
                                         l8580 1A78                                           l8564 19C6  
                                         l8822 14C8                                           l8814 14B0  
                                         l8726 3964                                           l7782 18A6  
                                         l7766 1846                                           l7870 2EFA  
                                         l8670 348A                                           l8590 1AF2  
                                         l8574 1A40                                           l8558 19A4  
                                         l9374 1172                                           l9366 115A  
                                         l9358 1140                                           l9382 1180  
                                         l7960 0086                                           l7952 0078  
                                         l7944 0070                                           l7936 005A  
                                         l8832 1520                                           l8840 153E  
                                         l8752 11F2                                           l8736 3986  
                                         l7792 3254                                           l7688 15D6  
                                         l7880 2F6A                                           l7872 2F20  
                                         l8664 4000                                           l8592 1B0E  
                                         l8584 1AB2                                           l7938 005C  
                                         l7962 00C8                                           l8826 14DE  
                                         l8818 14BE                                           l8842 155A  
                                         l7698 1608                                           l7866 2EE8  
                                         l8674 34EE                                           l8586 1ACE  
                                         l7956 007C                                           l7948 0074  
                                         l7796 3288                                           l7868 2EEE  
                                         l7974 013A                                           l8774 12DC  
                                         l7878 2F5E                                           l8598 1B66  
                                         l8934 095A                                           l8926 08F8  
                                         _P1M0 007DEE                                           _P1M1 007DEF  
                                         l7992 0216                                           l7976 0158  
                                         l7896 2FAA                                           l8944 0982  
                                         l7978 0166                                           l8966 0A3C  
                                         STR_1 FFD3                                           l8968 0A7C  
                                         STR_2 FF87                                           STR_3 FFD8  
                                         STR_4 FFCE                                           STR_5 FEA7  
                                         STR_6 FFD7                                           STR_7 FEF0  
                                         l8998 0B40                                           STR_8 FFD7  
                                         STR_9 FE87                                           _LATB 000F8A  
                                         _LATD 000F8C                                           u8010 2452  
                                         u8020 256E                                           u8101 2D42  
                                         u8040 2590                                           u8041 258E  
                                         u8050 259E                                           u8210 2A52  
                                         u7500 39AE                                           u8060 25A4  
                                         u8300 2692                                           u8150 2DE2  
                                         u8310 26C8                                           u9030 33CA  
                                         u7520 39F6                                           u8080 25B2  
                                         u8160 2E0E                                           u8240 2BB2  
                                         u8400 27CC                                           u8320 26CA  
                                         u9040 33FA                                           u8241 2BB0  
                                         u8401 27CA                                           u8250 2BC0  
                                         u8410 27DA                                           u7700 3FD0  
                                         u7540 3D90                                           u8260 2BC6  
                                         u8420 27E0                                           u8340 2702  
                                         u9045 33F0                                           u7710 3FD2  
                                         u8190 2E72                                           u7630 3FA0  
                                         u8350 2704                                           u8167 2E04  
                                         u7640 3FA2                                           u7560 3F70  
                                         u8280 261E                                           u9400 0322  
                                         u9080 3450                                           u9160 2F74  
                                         u9240 29FE                                           u8450 3014  
                                         u7650 3F0E                                           u7570 3F72  
                                         u8370 2776                                           u9330 019E  
                                         u7547 3D86                                           u7820 317E  
                                         u7580 3F24                                           u7900 355E  
                                         u7660 3F10                                           u8380 27AA  
                                         u9340 01A0                                           u9260 2A22  
                                         u7485 402A                                           u7741 2C4A  
                                         u7486 402C                                           u8470 30C2  
                                         u8550 365E                                           u7670 3CB2  
                                         u9350 01AE                                           u8375 2764  
                                         u9255 2A00                                           u8480 30C4  
                                         u7760 2C82                                           u7680 3CB4  
                                         u9600 1CD2                                           u8720 20AC  
                                         u7930 3E9E                                           u9450 05D4  
                                         u7851 32F6                                           u9275 2A24  
                                         u9380 024A                                           u7950 23EA  
                                         u7870 332E                                           u9470 06C8  
                                         u9630 1D14                                           u8910 17F8  
                                         u7960 23EC                                           u8760 2108  
                                         u8770 212C                                           u9580 1CC0  
                                         u8860 15F6                                           u7990 242C  
                                         u9590 1CD0                                           u8950 1854  
                                         u8870 176C                                           u9840 1E96  
                                         u9760 1E26                                           u8960 1872  
                                         u8875 1762                                           u9780 1E3A  
                                         u9960 236C                                           u9955 40C0  
                                         u9980 2390                                           u9956 40C2  
                                 __CFG_PWRT$ON 000000                                           abs@a 0018  
                                         _dbuf 0150                                           _atoi 2FBC  
                                         _ctoa 3BF0                                           _main 0DBC  
                                         _dtoa 23C2                       __end_of_interruptHandler 3D60  
                                         _keys FE33                                           _logs 0178  
                                         _prec 00D3                                           _nout 0147  
                                         pad@i 0021                                           pad@p 001E  
                                         fsr1h 000FE2                                           fsr2h 000FDA  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           pad@w 0023  
                                         fsr2l 000FD9                                           _stoa 2D38  
                                         btemp 007A                                           _utoa 2A3E  
                                         _xtoa 260A                                           prodh 000FF4  
                                         prodl 000FF3                                           start 000E  
                                __CFG_IESO$OFF 000000                        __size_of_setMotorSpeeds 0096  
                              ___fldiv@new_exp 003E                            __end_of_EncoderInit 4164  
                                __CFG_MCLRE$ON 000000             tirePositioning@bottomPreviousState 00B3  
                                 ___param_bank 000000                                          ??_abs 001A  
                                        ??_pad 0020                       __size_of_tirePositioning 030E  
                        I2C_Master_Read@ackBit 0007                               ?_I2C_Master_Init 0013  
                             ?_I2C_Master_Read 0001                               ?_I2C_Master_Wait 0001  
                             ?_I2C_Master_Stop 0001                                 replaceOldLog@i 0006  
                    doOperation@distanceToPole 0130                                  ___fltol@sign1 0056  
                                  ?_TIMER_INIT 0001                                __end_of___aodiv 2D38  
                                        ?_atoi 000D                                          ?_ctoa 0025  
                              __end_of___fladd 1ED6                                          ?_main 0001  
                                        ?_dtoa 0025                                __end_of___aomod 3220  
                                        _CCP1X 007DED                                __end_of___fldiv 215E  
                                        _CCP1Y 007DEC                                          _CCP2X 007DD5  
                                        _CCP2Y 007DD4                                __end_of___awdiv 3838  
                                        _EEADR 000FA9                                          STR_10 FFCA  
                                        STR_11 FFDA                                          STR_12 FFFC  
                                        STR_20 FFEC                                          STR_21 FFE3  
                                        STR_13 FFCE                                          STR_22 FFE6  
                                        STR_14 FED4                                          STR_30 FEC5  
                                        STR_15 FFCE                                          STR_31 FFD7  
                                        STR_23 FFE0                                          STR_32 FF9B  
                                        STR_24 FF91                                          STR_40 FF1A  
                                        STR_16 FE67                                          STR_41 FFD7  
                                        STR_33 FFD7                                          STR_17 FFD7  
                                        STR_25 FF66                                          STR_26 FF41  
                                        STR_42 FF27                                          STR_18 FF0C  
                                        STR_34 FEFE                                          STR_50 FEE2  
                                        STR_51 FFD7                                          STR_43 FFD7  
                                        STR_35 FFD7                                          STR_27 FFD7  
                                        STR_19 FE56                                          STR_28 FFAF  
                                        STR_36 FF34                                          STR_44 FE97  
                                        STR_52 FE77                                __end_of___awmod 399E  
                                        STR_45 FFD7                                          STR_37 FFD7  
                                        STR_61 FFF6                                          STR_53 FF4E  
                                        STR_29 FEB6                                          STR_38 FFC1  
                                        STR_46 FFB8                                          STR_54 FFA5  
                                        STR_63 FFF6                                          STR_47 FFD7  
                                        STR_39 FFD7                                          STR_71 FFF9  
                                        STR_55 FF71                                          STR_56 FF7C  
                                        STR_48 FF5B                                          STR_49 FFD7  
                                        STR_73 FFF9                                          STR_57 FFF3  
                                        STR_59 FFF3                                          STR_75 FFF0  
                                        STR_68 FFED                                          STR_77 FFF0  
                              __end_of___flmul 18BC                                __end_of___flsub 3D1A  
                              __end_of___fltol 3478                                          ?_stoa 0013  
                                        u10010 386A                                __end_of___lldiv 38BA  
                                        u10100 1928                                          ?_utoa 0025  
                                        u10200 19EA                                          u10060 37FA  
                                        u10220 1A5A                                          u10108 192A  
                                        u11007 3A5C                                          u10240 1AE8  
                                        u11017 09AC                                          u10090 1914  
                                        u11107 11FE                                          u11027 09C4  
                                        u10500 094E                                          u11117 12E8  
                                        u11037 0AC8                                          u10270 1B78  
                                        u10190 19DA                                          u10510 096C  
                                        u11127 14A4                                          u11047 0AE0  
                                        u10335 3B66                                          u10280 1B88  
                                        u10520 097C                                          u11137 1560  
                                        u11057 0B9A                                          u10370 3968  
                                        u10290 1BB2                                          u10098 1916  
                                        u10506 0950                                          u11147 4012  
                              __end_of___lodiv 33BE                                          u11067 0BB2  
                                        u10516 096E                                ___awdiv@divisor 0008  
                                        u11157 401C                                          u11077 18C8  
                                        u10470 1536                                          u10630 0D64  
                                        u10526 097E                                          u11087 18DE  
                                        ?_xtoa 0025                                          u10560 0C6C  
                              __end_of___llmod 3ADA                                          u11097 11DA  
                                        u10570 0C78                                          u10490 093C  
                                        u10810 113C                                          u10580 0C84  
                                        u10660 3C88                                          u10590 0C90  
                                        u10566 0C6E                                          u10680 3A96  
                                        u10576 0C7A                                          u10496 093E  
                                        u10586 0C86                                          u10907 0F28  
                                        u10596 0C92                                          u10917 0F74  
                                        u10927 0F90                                          u10937 1018  
                                        u10947 1098                                          u10957 1110  
                                        _T0PS0 007EA8                                          u10967 11C2  
                                        _T0PS1 007EA9                                          _T0PS2 007EAA  
                              __end_of___lomod 35DA                                          u10977 3A10  
                                        u10897 0E7C                                          u10987 3A28  
                                        u10997 3A3A                                          i2l433 3D2A  
                                        i2l435 3D46                                          i2l436 3D5C  
                                        i2l437 3D52                                   main@keyValue 00D2  
                              ___awdiv@counter 000A                                   vfpfcnvrt@fmt 004E  
                                        _TMR0H 000FD7                                   vfpfcnvrt@llu 008F  
                                        _TMR0L 000FD6                                          _PORTB 000F81  
                                        _TRISD 000F95                                  __CFG_WRT0$OFF 000000  
                                __CFG_WRT1$OFF 000000                                  __CFG_WRT2$OFF 000000  
                                __CFG_WRT3$OFF 000000                                __end_of_lcdInst 41B6  
                               __CFG_EBTR0$OFF 000000                                 __CFG_FCMEN$OFF 000000  
                               __CFG_EBTR1$OFF 000000                                 __CFG_EBTR2$OFF 000000  
                                 main@keypress 00CE                                 __CFG_EBTR3$OFF 000000  
                                __CFG_WRTB$OFF 000000                                  __CFG_WRTC$OFF 000000  
                                __CFG_WRTD$OFF 000000                    set_pwm_duty_cycle@duty_valA 0064  
                  set_pwm_duty_cycle@duty_valB 0066                                __end_of_opDelay 3B3E  
                              __end_of_initLCD 3A74                                 __CFG_EBTRB$OFF 000000  
              tirePositioning@topPreviousState 00B1                                          _flags 00D5  
       __end_ofinit_motor_PWM@TIMER2_PRESCALER FE4F                 init_motor_PWM@TIMER2_PRESCALER FE4E  
                                        _fputc 399E                                __end_of_isalpha 3F16  
                                        _fputs 3EAA                                __end_of_isdigit 3FD8  
                                        atoi@n 001A                                          pad@fp 001A  
                                        atoi@s 000D                                          _width 0149  
                                        ctoa@c 0027                                          _putch 419E  
                                        ctoa@w 0028                                          main@i 00CF  
                                        dtoa@d 0027                                          dtoa@i 0047  
                                        dtoa@n 003F                                          dtoa@p 0039  
                                        dtoa@s 003D                                          dtoa@w 003B  
                              __end_of_islower 3F78                                __end_of_isspace 3EAA  
                              __end_of_isupper 3FA8                                          tablat 000FF5  
                  __end_of_updateMotorAEncoder 3E2C                                send_nibble@data 0007  
                                        plusw1 000FE3                                          plusw2 000FDB  
                         __size_of_doOperation 05A8                    __end_of_updateMotorBEncoder 3DE8  
                                        stoa@i 001F                                          stoa@l 0027  
                                        stoa@p 0025                                          stoa@s 0015  
                                        stoa@w 0021                                __end_of_pulse_e 402E  
                                        ttemp5 007B                                          ttemp6 007E  
                                        ttemp7 0082                                          utoa@d 0027  
                                        utoa@i 0043                                          utoa@n 003B  
                                        utoa@p 0037                                          utoa@w 0039  
                                        status 000FD8                    I2C_Master_Read@receivedByte 0008  
                    requestIsTireDropDone@data 0009                                          wtemp8 007B  
                                        xtoa@c 004A                                          xtoa@d 0027  
                                        xtoa@i 0048                                          xtoa@n 0040  
                                        xtoa@p 003C                                          xtoa@w 003E  
                                        xtoa@x 002F                                __end_of_strncmp 3684  
                              __end_of_toupper 3CD4                       errorCorrectedMove@ASpeed 009C  
                             ___lodiv@dividend 0006                       errorCorrectedMove@BSpeed 009E  
                               __CFG_PBADEN$ON 000000                                   _toupper$1966 0012  
                              __initialization 38BA                            main@currentLogState 00D0  
                                 __end_of_atoi 30FC                                   __end_of_ctoa 3C3E  
                                 __end_of_main 11CE                                   __end_of_dtoa 260A  
                                 __end_of_keys FE44                                   __end_of_stoa 2E7C  
                        __size_of_doDisplayLog 039C                                   __end_of_utoa 2BF0  
                                 __end_of_xtoa 283C                                         ??_atoi 000F  
                                       ??_ctoa 0028                                         ??_main 00C1  
                                       ??_dtoa 002F                               opDelay@startTime 0014  
                                       ??_stoa 0017                                         ??_utoa 002F  
                                       ??_xtoa 0030                                  __activetblptr 000002  
                      set_pwm_duty_cycle@dutyA 0058                        set_pwm_duty_cycle@dutyB 005C  
                            ?_I2C_Master_Start 0001                               ___lodiv@quotient 0016  
                            ?_I2C_Master_Write 0007                          __end_of_replaceOldLog 3C8A  
                           ??_I2C_Master_Start 0007                           _millisecondsMeasured 0075  
                                       _ADCON1 000FC1                             ??_I2C_Master_Write 0009  
                                       _CCP1M0 007DE8                                         _CCP1M1 007DE9  
                                       _CCP1M2 007DEA                                         _CCP1M3 007DEB  
                                       _CCP2M0 007DD0                                         _CCP2M1 007DD1  
                                       _CCP2M2 007DD2                                         _CCP2M3 007DD3  
                                 ?_send_nibble 0001                                         ?_fputc 000A  
                             ___llmod@dividend 0006                                         ?_fputs 0013  
                                       _EEDATA 000FA8                                         _CCPR1L 000FBE  
                                       _CCPR2L 000FBB                                         _EECON2 000FA7  
                                       _T08BIT 007EAE                               ___awdiv@dividend 0006  
                       doOperation@tiresOnPole 0136                                         ?_putch 0001  
                       doOperation@tiresToDrop 0132                                         _INT0IE 007F94  
                                       _INT0IF 007F91                                         _INT1IE 007F83  
                                       _INT1IF 007F80                                         _INT2IE 007F84  
                                       _INT2IF 007F81                                         i2l6142 3E24  
                                       i2l6134 3DDE                             _set_pwm_duty_cycle 283C  
                                  _EncoderInit 414C                                  vfpfcnvrt@done 0082  
                                       _TMR0IE 007F95                                         _TMR0IF 007F92  
                                       _TMR0ON 007EAF                                         _TMR2ON 007E52  
                                       _SSPADD 000FC8                                         _SSPBUF 000FC9  
                             __end_of___xxtofl 2FBC              __size_of_opErrorCorrectionDegrees 00B4  
                                 _doDisplayLog 11CE                            __size_of_TIMER_INIT 001E  
                    ?_opErrorCorrectionDegrees 00A0       opErrorCorrectionDegrees@maxOperationTime 00AA  
                          ?_set_pwm_duty_cycle 0058                                 __CFG_XINST$OFF 000000  
                        _encoderAInterruptLast 014B                                   vfprintf@cfmt 0060  
                                       ___flge 3220                                      ??___aodiv 0016  
                                    ??___fladd 0035                                      ??___aomod 0016  
                                       ___wmul 407E                                      ??___fldiv 0035  
                                    ??___awdiv 000A                                 __CFG_STVREN$ON 000000  
                                    ??___awmod 000A                                      ??___flmul 001C  
                                    ??___flsub 004E                                      ??___fltol 0052  
                                    ??___lldiv 000E                                      ??___lodiv 0016  
                                    ??___llmod 000E                                      ??___lomod 0016  
                             doOperation@F3372 0143                                         clear_0 38F4  
                                       clear_1 3906                                         clear_2 3912  
                             ___awdiv@quotient 000C                                ___awmod@divisor 0008  
                              ___awmod@counter 000A                                      ??_lcdInst 0009  
                                       _printf 4056                                         pad@buf 001C  
                                       ctoa@fp 0025                    ?_sendArduinoTireDropRequest 0001  
                                       dtoa@fp 0025                updateMotorBEncoder@directionPin 0004  
                                       _strlen 3D60                                      ??_opDelay 000C  
                                    ??_initLCD 000A                                         fputc@c 000A  
                                       fputs@c 0017                                         fputs@i 0018  
                                 __pdataCOMRAM 0079                                         fputs@s 0013  
                                    ??_isalpha 0008                                      ??_isdigit 0008  
                        _requestIsTireDropDone 3FD8                           ??_set_pwm_duty_cycle 0060  
                            ??_tirePositioning 0072                                      ??_islower 0008  
                                 __mediumconst FE32                                      ??_isspace 0008  
             doOperation@currentOperationState 0140                  _opErrorCorrectionDegrees$2275 00AE  
                                       tblptrh 000FF7                                      ??_isupper 0008  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                       stoa@cp 0023                                         stoa@fp 0013  
                             __end_of_vfprintf 3BF0                                      ??_pulse_e 0006  
                                       utoa@fp 0025                                         xtoa@fp 0025  
                                    ??_strncmp 000C                                      ??_toupper 000E  
                                   ___flge@ff1 0006                                     ___flge@ff2 000A  
                                 ___xxtofl@arg 0010                          pulse_e@interruptState 0006  
                                 ___xxtofl@exp 000F                                   ___xxtofl@val 0006  
                                   __accesstop 0080                        __end_of__initialization 3920  
                          _setMotorSpeeds$2272 0080                            _setMotorSpeeds$2273 0084  
                                ___rparam_used 000001                                 _setMotorSpeeds 371E  
                doOperation@tiresOnPoleAfterOp 0112                                     ___fltol@f1 004E  
                         __end_of_happynewyear FE4B                                 __pcstackCOMRAM 0001  
                                 __pidataBANK1 41C0                        opDelay@maxOperationTime 0008  
                                __end_of_fputc 3A0A                                  __end_of_fputs 3EE2  
                                __end_of_putch 41AA                                        ??_fputc 000E  
                                      ??_fputs 0017                                        ??_putch 0009  
                                   __pbssBANK0 00D3                                     __pbssBANK1 0143  
                       __end_of_setMotorSpeeds 37B4       __end_of_sendArduinoAbortOperationMessage 412E  
    __size_of_sendArduinoAbortOperationMessage 0022             ??_sendArduinoAbortOperationMessage 0009  
            ?_sendArduinoAbortOperationMessage 0001               _sendArduinoAbortOperationMessage 410C  
                            ?_interruptHandler 0001                             _errorCorrectedMove 215E  
                           ??_interruptHandler 0006                          _encoderBInterruptLast 014C  
                                      ?___flge 0006                                        ?___wmul 0006  
           tirePositioning@distanceRecordedTop 00B5                            ?_errorCorrectedMove 0088  
                           __size_of_send_byte 0012                                   ??_TIMER_INIT 0006  
                                      ?_printf 009D                                        ?_strlen 0006  
                                      _T2CKPS0 007E50                                        _T2CKPS1 007E51  
                  tirePositioning@topBreakbeam 00B9                         ?_requestIsTireDropDone 0001  
                           __size_of_robotInit 0040                                      ?___xxtofl 0006  
                           __size_of_vfpfcnvrt 0802        opErrorCorrectionDegrees@distanceDegrees 00A8  
                                      _SSPCON1 000FC6                                        _SSPCON2 000FC5  
                                      _SSPSTAT 000FC7                           ??_errorCorrectedMove 0096  
                             ___lomod@dividend 0006                           __size_of_send_nibble 0016  
                              ?_setMotorSpeeds 006C    opErrorCorrectionDegrees@motorAStartDistance 00B4  
                                opDelay@millis 0006                             __end_of_TIMER_INIT 414C  
                                      __Hparam 0000                                     _keyPressed 014F  
                                      __Lparam 0000                tirePositioning@maxOperationTime 00A7  
                              __size_of___flge 00D0                                        ___aodiv 2BF0  
                                      ___fladd 1BCA                                        ___aomod 30FC  
                                      ___fldiv 1ED6                                        ___awdiv 37B4  
                                      ___awmod 392E                                        ___flmul 156A  
                                      ___flsub 3CD4                                        ___fltol 33BE  
                                      ___lldiv 3838                                __size_of___wmul 0026  
                                      ___lodiv 32F0                                        ___llmod 3A74  
                                      ___lomod 352C                                      ?_vfprintf 0097  
                                      __pcinit 38BA                                        __ramtop 1000  
                                      _lcdInst 41AA                                        __ptext0 0DBC  
                                      __ptext1 3E2C                                        __ptext2 3A0A  
                                      __ptext3 3B3E                                        __ptext4 3838  
                                      __ptext5 414C                                        __ptext6 3C3E  
                                      __ptext7 0814                                        __ptext8 18BC  
                                      __ptext9 3ADA                                __size_of_printf 0028  
                                    _T0CONbits 000FD5                                        _opDelay 3ADA  
                              __size_of_strlen 0044                                        _initLCD 3A0A  
                               _motorADistance 00D9                                   __size_of_abs 0032  
                                 __size_of_pad 009A                                        _isalpha 3EE2  
                                      _isdigit 3FA8                                     ??___xxtofl 000A  
                             ___awmod@dividend 0006                                 _motorBDistance 00D7  
                                      _islower 3F48                                        _isspace 3E6C  
                      doOperation@startedDistA 0114                        doOperation@startedDistB 0116  
                                      _isupper 3F78                       __size_of_I2C_Master_Init 005C  
                     __size_of_I2C_Master_Read 0024                       __size_of_I2C_Master_Wait 0012  
                     __size_of_I2C_Master_Stop 0008                                        atoi@neg 0013  
                                      _pulse_e 4004                                  ??_doOperation 00BD  
            opErrorCorrectionDegrees@goalSpeed 00A0                                        _strncmp 35DA  
                               __pintcode_body 3D1A                                        _toupper 3C8A  
                  _topBreakBeamTriggeredChange 014E                           end_of_initialization 3920  
                        __end_of_LCD_SIZE_HORZ FE4E                              __end_of_send_byte 419E  
                        __end_of_LCD_SIZE_VERT FE4D                                   ?_EncoderInit 0001  
                        doOperation@isDoneDrop 0129                                        fputc@fp 000C  
                                __Lmediumconst FE32                                        int_func 3D1A  
                                      fputs@fp 0015                        __size_of_init_motor_PWM 0028  
                            __end_of_robotInit 3E6C                      __size_of_I2C_Master_Start 0008  
                    __size_of_I2C_Master_Write 000A                                ___lldiv@divisor 000A  
                              ___lldiv@counter 0012                   __size_of_updateMotorAEncoder 0044  
                            __end_of_vfpfcnvrt 0814             tirePositioning@startDistanceBottom 00AD  
                 __size_of_updateMotorBEncoder 0044                           doDisplayLog@keyValue 006C  
                                      postdec1 000FE5                                        postdec2 000FDD  
                                      postinc0 000FEE                                        postinc1 000FE6  
                                      postinc2 000FDE                                _tirePositioning 18BC  
                                   ??_vfprintf 0060                           doDisplayLog@keypress 006A  
                                      strlen@a 0008                                        strlen@s 0006  
                                    _PORTBbits 000F81                                      _PORTCbits 000F82  
                                    _PORTEbits 000F84           updateMotorBEncoder@interruptPinState 0002  
                                  ___fladd@grs 003C                                  ___xxtofl@sign 000E  
                                    _TRISAbits 000F92                    doOperation@bottomLaserState 0141  
                                    _TRISBbits 000F93                                      _TRISCbits 000F94  
                                    _TRISEbits 000F96                                    ___fldiv@grs 0040  
                                  ___fldiv@rem 0039                                   _happynewyear FE44  
                 tirePositioning@startDistance 00AF                                    ___flmul@grs 0022  
  opErrorCorrectionDegrees@motorBStartDistance 00B2                  doOperation@totalTiresSupplied 011F  
                                send_byte@data 0008                            __end_of_doOperation 0DBC  
            opErrorCorrectionDegrees@turnRatio 00A2                         __size_of_replaceOldLog 004C  
                               __end_of___flge 32F0                                    vfpfcnvrt@ap 0050  
                                  vfpfcnvrt@cp 0080                                    vfpfcnvrt@fp 004C  
                                  vfpfcnvrt@ll 0086                                 __end_of___wmul 40A4  
                                __pidataCOMRAM 41D8                          doOperation@poleNumber 011D  
                               __end_of_printf 407E                                 __end_of_strlen 3DA4  
                          start_initialization 38BA                                ___lodiv@divisor 000E  
                  __size_of_set_pwm_duty_cycle 0202                                ___lodiv@counter 001E  
                    setMotorSpeeds@motorASpeed 006C                      setMotorSpeeds@motorBSpeed 0070  
                                  __end_of_abs 3F48                                    __end_of_pad 371E  
                      errorCorrectedMove@error 009A                       _opErrorCorrectionDegrees 3478  
                            ??_I2C_Master_Init 0017                              ??_I2C_Master_Read 0007  
                            ??_I2C_Master_Wait 0006                              ??_I2C_Master_Stop 0007  
                              ___llmod@divisor 000A                                ___llmod@counter 000E  
                      __end_of_tirePositioning 1BCA                                    vfprintf@fmt 0099  
                                     ??___flge 000E                                       ??___wmul 000A  
                        main@currentRobotState 00D1                       I2C_Master_Init@clockFreq 0013  
                                  __pdataBANK1 0170                        ??_requestIsTireDropDone 0009  
                             __CFG_LPT1OSC$OFF 000000                 doOperation@tiresDeployedOnPole 0134  
              tirePositioning@startDistanceTop 00AB                                doOperation@send 0118  
                                     ??_printf 0062                      __size_of_interruptHandler 3D58  
                                     ??_strlen 0008                                      ___fladd@a 0031  
                                    ___fladd@b 002D                                      ___fldiv@a 0031  
                                    ___fldiv@b 002D                                    __pbssBIGRAM 0178  
                                    ___flmul@a 0018                                      ___flmul@b 0014  
                                  __pbssCOMRAM 0075                                      ___flsub@a 004A  
                                    ___flsub@b 0046                                  __pcstackBANK0 0080  
                                __pcstackBANK1 0100                               ___aodiv@dividend 0006  
                                _replaceOldLog 3C3E                               ??_setMotorSpeeds 0072  
                            __size_of___xxtofl 0140                                    _doOperation 0814  
                       setMotorSpeeds@Aforward 006E                         setMotorSpeeds@Bforward 006F  
                               _init_motor_PWM 402E                                      _atoi$1870 0019  
                                    _atoi$1871 0017                                      _atoi$1869 0015  
                         __size_of_EncoderInit 0018                               _I2C_Master_Start 41D0  
                             _I2C_Master_Write 41B6                       doOperation@topLaserState 0142  
                                    _dtoa$1342 0037                              __CFG_CCP2MX$PORTC 000000  
                                    __pintcode 0008                                  __pmediumconst FE32  
                                     ?___aodiv 0006                                       ?___fladd 002D  
                                     ?___aomod 0006                                       ?___fldiv 002D  
                                     ?___awdiv 0006                               ___aodiv@quotient 0018  
                                     ?___awmod 0006                                       ?___flmul 0014  
                                     ?___flsub 0046                                       ?___fltol 004E  
                                     ?___lldiv 0006                                       ?___lodiv 0006  
        errorCorrectedMove@motorAStartDistance 008E                                       ?___llmod 0006  
                                     ?___lomod 0006                                       ?_lcdInst 0001  
                            __size_of_vfprintf 0056                                       ?_opDelay 0006  
                              ___lomod@divisor 000E                                       ?_initLCD 0001  
                       doOperation@badCountBot 011B                                ___lomod@counter 0016  
                                     ?_isalpha 0006                                       ?_isdigit 0006  
                                     ?_islower 0006                                       ?_isspace 0006  
                               ?_replaceOldLog 0001                                       ?_isupper 0006  
                          _updateMotorAEncoder 3DE8                                   doOperation@i 013A  
                          _updateMotorBEncoder 3DA4                                  ??_send_nibble 0007  
                                     ?_pulse_e 0001                                 __size_of_fputc 006C  
                               __size_of_fputs 0038                                       ?_strncmp 0006  
                                     ?_toupper 000C                         __end_of_init_motor_PWM 4056  
                 doOperation@topLaserStatePrev 0138                                 __size_of_putch 000C  
                  __size_of_errorCorrectedMove 0264                                 ___wmul@product 000A  
                                     _LATAbits 000F89                                  ?_doDisplayLog 00A7  
                                     _LATDbits 000F8C                               ?_tirePositioning 00A7  
                                    _send_byte 418C                    errorCorrectedMove@goalSpeed 0088  
                               _LCD_LINE1_ADDR FE4B                                 _LCD_LINE2_ADDR FE55  
                               _LCD_LINE3_ADDR FE54                                 _LCD_LINE4_ADDR FE53  
                   doOperation@timeInOperation 013C                        init_motor_PWM@FREQUENCY FE4F  
                         ?_updateMotorAEncoder 0001                           doOperation@goalSpeed 0127  
                                     i2u675_40 3DAE                                       i2u676_40 3DC0  
                                     i2u675_48 3DB0                                       i2u676_48 3DC2  
                                     i2u678_40 3DF2                                       i2u679_40 3E04  
                                     i2u678_48 3DF4                           ?_updateMotorBEncoder 0001  
                                     i2u679_48 3E06                               __CFG_WDTPS$32768 000000  
                                    _robotInit 3E2C                                      _vfpfcnvrt 0012  
                                    _xtoa$1370 0038                                      _xtoa$1371 003A  
                            ___wmul@multiplier 0006                   ??_sendArduinoTireDropRequest 0009  
                                 _isspace$1896 000C                                     vfpfcnvrt@c 008E  
                                    copy_data0 38CE                        _set_pwm_duty_cycle$2271 0068  
                              ?_init_motor_PWM 0001                                 ??_doDisplayLog 0066  
                         doOperation@timeStart 0123                         __end_of_LCD_LINE1_ADDR FE4C  
                       __end_of_LCD_LINE2_ADDR FE56                         __end_of_LCD_LINE3_ADDR FE55  
                       __end_of_LCD_LINE4_ADDR FE54                            __end_of_send_nibble 417A  
                                   _EECON1bits 000FA6                                     ?_send_byte 0001  
                                     __Hrparam 0000                          ??_updateMotorAEncoder 0001  
                        ??_updateMotorBEncoder 0001                        doDisplayLog@currentPole 006D  
              doDisplayLog@currentDisplayState 006B                                     vfprintf@ap 009B  
                                     __Lrparam 0000                                     vfprintf@fp 0097  
                           __CFG_BOREN$SBORDIS 000000            __size_of_sendArduinoTireDropRequest 0022  
                                   ?_robotInit 0001           updateMotorAEncoder@interruptPinState 0002  
                             __size_of___aodiv 0148                               __size_of___fladd 030C  
        errorCorrectedMove@motorBStartDistance 0090                               __size_of___aomod 0124  
                             __size_of___fldiv 0288                               __size_of___awdiv 0084  
                             __size_of___awmod 0070                               __size_of___flmul 0352  
                             __size_of___flsub 0046                               __size_of___fltol 00BA  
                             __size_of___lldiv 0082                               __size_of___lodiv 00CE  
                             __size_of___llmod 0066                    errorCorrectedMove@turnRatio 008A  
                             __size_of___lomod 00AE                                     ?_vfpfcnvrt 004C  
                              ___aodiv@divisor 000E                               _interruptHandler 0008  
                              ___aodiv@counter 0016                               __size_of_lcdInst 000C  
                   ??_opErrorCorrectionDegrees 0072                                ??_replaceOldLog 0006  
                             __size_of_opDelay 0064                                _I2C_Master_Init 3B3E  
                              _I2C_Master_Read 40A4                               __size_of_initLCD 006A  
                                     ___xxtofl 2E7C                                _I2C_Master_Wait 417A  
                              _I2C_Master_Stop 41C8                               __size_of_isalpha 0034  
                             __size_of_isdigit 0030                               __size_of_islower 0030  
                             __size_of_isspace 003E                            doOperation@badCount 0119  
                                     __ptext10 37B4                                       __ptext11 40C8  
                                     __ptext20 3478                                       __ptext12 40EA  
                                     __ptext21 215E                                       __ptext13 410C  
                                     __ptext30 1BCA                                       __ptext22 371E  
                                     __ptext14 3FD8                                       __ptext31 402E  
                                     __ptext23 283C                                       __ptext15 41B6  
                                     __ptext40 3F48                                       __ptext32 392E  
                                     __ptext24 2E7C                                       __ptext16 41C8  
                                     __ptext41 3F78                                       __ptext33 412E  
                                     __ptext25 33BE                                       __ptext17 41D0  
                                     __ptext50 30FC                                       __ptext42 3EE2  
                                     __ptext34 11CE                                       __ptext26 156A  
                                     __ptext18 40A4                                       __ptext51 2BF0  
                                     __ptext43 2A3E                                       __ptext35 4056  
                                     __ptext27 3220                                       __ptext19 417A  
                                     __ptext60 3FA8                                       __ptext52 3BF0  
                                     __ptext44 352C                                       __ptext36 3B9A  
                                     __ptext28 1ED6                                       __ptext61 407E  
                                     __ptext53 3684                                       __ptext45 32F0  
                                     __ptext37 0012                                       __ptext29 3CD4  
                                     __ptext62 41AA                                       __ptext54 3D60  
                                     __ptext46 35DA                                       __ptext38 260A  
                                     __ptext63 418C                                       __ptext55 3EAA  
                                     __ptext47 2D38                                       __ptext39 3C8A  
                                     __ptext64 4164                                       __ptext56 399E  
                                     __ptext48 23C2                                       __ptext65 4004  
                                     __ptext57 419E                                       __ptext49 3F16  
                                     __ptext66 3A74                                       __ptext58 2FBC  
                                     __ptext59 3E6C                                       __ptext68 3DA4  
                                     __ptext69 3DE8                               __size_of_isupper 0030  
                             __size_of_pulse_e 002A                                _motorADirection 0177  
                             __size_of_strncmp 00AA                               __size_of_toupper 004A  
                                __size_of_atoi 0140                                  __size_of_ctoa 004E  
                                __size_of_main 0412                                _motorBDirection 0079  
                                __size_of_dtoa 0248                                  __size_of_stoa 0144  
                                __size_of_utoa 01B2                                  __size_of_xtoa 0232  
                                    stoa@F1144 0170                doOperation@distanceFromLastPole 0121  
               set_pwm_duty_cycle@max_duty_val 0062                                       int$flags 007A  
                           doOperation@PIDData 0100                                       _vfprintf 3B9A  
                                    printf@fmt 009D                 doOperation@motorAStartDistance 012A  
                                     main@tick 00CA                                       main@time 00C3  
               __size_of_requestIsTireDropDone 002C                  __end_of_requestIsTireDropDone 4004  
                  I2C_Master_Write@byteToWrite 0007   __end_of_sendArduinoTireOperationStartMessage 40EA  
__size_of_sendArduinoTireOperationStartMessage 0022         ??_sendArduinoTireOperationStartMessage 0009  
        ?_sendArduinoTireOperationStartMessage 0001           _sendArduinoTireOperationStartMessage 40C8  
              updateMotorAEncoder@directionPin 0004                               ___aomod@dividend 0006  
                   __end_of_set_pwm_duty_cycle 2A3E                                      putch@data 0009  
                     __end_of_I2C_Master_Start 41D8                                 _vfpfcnvrt$1385 0084  
                     __end_of_I2C_Master_Write 41C0                                     _INTCONbits 000FF2  
        tirePositioning@distanceRecordedBottom 00B7                                       isalpha@c 0006  
                                     isdigit@c 0006                                    _send_nibble 4164  
                                 ?_doOperation 0001                 _bottomBreakBeamTriggeredChange 014D  
                                     intlevel2 0000                                  _LCD_SIZE_HORZ FE4D  
                                     islower@c 0006           errorCorrectedMove@correctionConstant 0092  
                                _LCD_SIZE_VERT FE4C                                       isspace@c 0006  
                             ___lldiv@dividend 0006                                    ??_send_byte 0008  
                                     isupper@c 0006                                      strncmp@_l 0006  
                                    strncmp@_r 0008                doOperation@bottomLaserStatePrev 0139  
                                   _OSCCONbits 000FD3                             doOperation@counted 012E  
                                  ??_robotInit 001B                                       printf@ap 0064  
                      __end_of_I2C_Master_Init 3B9A                                ___aomod@divisor 000E  
                      __end_of_I2C_Master_Read 40C8                        __end_of_I2C_Master_Wait 418C  
                      __end_of_I2C_Master_Stop 41D0                                    ??_vfpfcnvrt 0052  
                                  lcdInst@data 0009                                       stoa@nuls 0018  
                              ___aomod@counter 0016                          doDisplayLog@logNumber 00A7  
           __end_of_sendArduinoTireDropRequest 410C                     _sendArduinoTireDropRequest 40EA  
                                   _TIMER_INIT 412E                __end_ofinit_motor_PWM@FREQUENCY FE53  
                         __end_of_doDisplayLog 156A                 tirePositioning@bottomBreakbeam 00BB  
                             ___lldiv@quotient 000E                                       strncmp@l 000D  
                                     strncmp@n 000A                                       strncmp@r 000F  
                                     toupper@c 000C                                    _SSPCON1bits 000FC6  
                                  _SSPCON2bits 000FC5                                  ___fladd@signs 0039  
   opErrorCorrectionDegrees@correctionConstant 00A4                                   ___aodiv@sign 0017  
                                ??_EncoderInit 0006                                   ___fladd@aexp 003A  
                                 ___fladd@bexp 003B                                   ___aomod@sign 0017  
